"""
This type stub file was generated by pyright.
"""

from ._base import _NamedAttrObject
from arcpy.arcobjects import Result

"""
Contains the implementation of the Neighborhood classes.
"""
__all__ = ["SearchNeighborhoodStandard", "SearchNeighborhoodSmooth", "SearchNeighborhoodStandardCircular", "SearchNeighborhoodSmoothCircular", "SearchNeighborhoodStandard3D", "CrossValidationResult", "GeostatisticalDatasets"]
class SearchNeighborhoodStandard(_NamedAttrObject):
    """The SearchNeighborhoodStandard class can be used to define the search
       neighborhood for IDW , Local Polynomial Interpolation , and Radial Basis
       Functions .  Search neighborhoods"""
    __esri_toolinfo__ = ...
    def __init__(self, majorSemiaxis=..., minorSemiaxis=..., angle=..., nbrMax=..., nbrMin=..., sectorType=...) -> None:
        """SearchNeighborhoodStandard({majorSemiaxis}, {minorSemiaxis}, {angle},
           {nbrMax}, {nbrMin}, {sectorType})

             majorSemiaxis{Double}:
           The distance, in map units, specifying the length of the major semi
           axis of the ellipse within which data is selected from.

             minorSemiaxis{Double}:
           The distance, in map units, specifying the length of the minor semi
           axis of the ellipse within which data is selected from.

             angle{Double}:
           The angle of the search ellipse.

             nbrMax{Long}:
           Maximum number of neighbors, within the search ellipse, to use when
           making the prediction.

             nbrMin{Long}:
           Minimum number of neighbors, within the search ellipse, to use when
           making the prediction.

             sectorType{String}:
           The searching ellipse can be divided into 1, 4, 4 with an offset of
           45ยบ, or 8 sectors."""
        ...
    


class SearchNeighborhoodSmooth(_NamedAttrObject):
    """The SearchNeighborhoodSmooth class can be used to define the search
       neighborhood for IDW , Local Polynomial Interpolation and Radial Basis
       Functions (only when the INVERSE_MULTIQUADRIC_FUNCTION keyword is used).
       The smooth search neighborhood class accepts inputs for a minor and major
       axis, the size of the search ellipse, the angle of the search ellipse,
       and a smoothing factor.

       Learn more about smooth interpolation"""
    __esri_toolinfo__ = ...
    def __init__(self, majorSemiaxis=..., minorSemiaxis=..., angle=..., smoothFactor=...) -> None:
        """SearchNeighborhoodSmooth({majorSemiaxis}, {minorSemiaxis}, {angle},
           {smoothFactor})

             majorSemiaxis{Double}:
           The distance, in map units, specifying the length of the major semi
           axis of the ellipse within which data is selected from.

             minorSemiaxis{Double}:
           The distance, in map units, specifying the length of the minor semi
           axis of the ellipse within which data is selected from.

             angle{Double}:
           The angle of the search ellipse.

             smoothFactor{Double}:
           Determines how much smoothing will be performed. 0 is no smoothing; 1
           is the maximum amount of smoothing."""
        ...
    


class SearchNeighborhoodStandardCircular(_NamedAttrObject):
    """The SearchNeighborhoodStandardCircular class can be used to define the
       search neighborhood for Empirical Bayesian Kriging , IDW , Local
       Polynomial Interpolation , and Radial Basis Functions .  Search
       neighborhoods"""
    __esri_toolinfo__ = ...
    def __init__(self, radius=..., angle=..., nbrMax=..., nbrMin=..., sectorType=...) -> None:
        """SearchNeighborhoodStandardCircular({radius}, {angle}, {nbrMax},
           {nbrMin}, {sectorType})

             radius{Double}:
           The distance, in map units, specifying the length of the radius of
           the searching circle.

             angle{Double}:
           The angle of the search circle. This parameter will only affect the
           angle of the sectors.

             nbrMax{Long}:
           Maximum number of neighbors, within the search ellipse, to use when
           making the prediction.

             nbrMin{Long}:
           Minimum number of neighbors, within the search ellipse, to use when
           making the prediction.

             sectorType{String}:
           The searching ellipse can be divided into 1, 4, 4 with an offset of
           45ยบ, or 8 sectors."""
        ...
    


class SearchNeighborhoodSmoothCircular(_NamedAttrObject):
    """The SearchNeighborhoodSmoothCircular class can be used to define the
       search neighborhood for Empirical Bayesian Kriging , IDW , Local
       Polynomial Interpolation , and Radial Basis Functions (only when the
       INVERSE_MULTIQUADRIC_FUNCTION keyword is used). The class accepts inputs
       for the radius of the searching circle and a smoothing factor.  Smooth
       interpolation"""
    __esri_toolinfo__ = ...
    def __init__(self, radius=..., smoothFactor=...) -> None:
        """SearchNeighborhoodSmoothCircular({radius}, {smoothFactor})

             radius{Double}:
           The distance, in map units, specifying the length of the radius of
           the searching circle.

             smoothFactor{Double}:
           Determines how much smoothing will be performed. 0 is no smoothing; 1
           is the maximum amount of smoothing."""
        ...
    


class SearchNeighborhoodStandard3D(_NamedAttrObject):
    """The SearchNeighborhoodStandard3D class can be used to define the
       search neighborhood for 3D interpolation Search
       neighborhoods"""
    __esri_toolinfo__ = ...
    def __init__(self, radius=..., nbrMax=..., nbrMin=..., sectorType=...) -> None:
        """SearchNeighborhoodStandard3D({radius}, {nbrMax}, {nbrMin},
                                        {sectorType})

             radius{Double}:
           The distance, in map units, specifying the length of the radius of
           the search neighborhood.

             nbrMax{Long}:
           Maximum number of neighbors to use when making the prediction.

             nbrMin{Long}:
           Minimum number of neighbors to use when making the prediction.

             sectorType{String}:
           The search neighborhood can be divided into 1, 4, 6, 8, 12 or 20 sectors."""
        ...
    


class CrossValidationResult(Result):
    """The CrossValidationResult class is returned by the Cross Validation tool
       and contains access to the cross-validation results that can be generated
       for any geostatistical layer."""
    @property
    def count(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    @property
    def meanError(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    @property
    def rootMeanSquare(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    @property
    def averageStandard(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    @property
    def meanStandardized(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    @property
    def rootMeanSquareStandardized(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    @property
    def percentIn90Interval(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    @property
    def percentIn95Interval(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    @property
    def averageCRPS(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    


class GADatasets:
    def __init__(self, info) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


def GeostatisticalDatasets(ga_model_source): # -> GADatasets:
    """The GeostatisticalDatasets class is used to manage datasets associated
       with a geostatistical model source. A geostatistical model source can be
       either a geostatistical layer or a geostatistical model (XML)."""
    ...

