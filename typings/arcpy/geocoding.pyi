"""
This type stub file was generated by pyright.
"""

from arcpy.geoprocessing._base import gptooldoc
from arcpy import _geocoding
from arcpy._geocoding import *

r"""Geocoding is the process of assigning a location, usually in the form
of coordinate values, to an address by comparing the descriptive
location elements in the address to those present in the reference
material. Addresses come in many forms, ranging from the common
address format of house number followed by the street name and
succeeding information to other location descriptions such as postal
zone or census tract. In essence, an address includes any type of
information that distinguishes a place."""
__all__ = [
    "AssignZonesToStreets",
    "ClipLocator",
    "ConsolidateLocator",
    "CreateCompositeAddressLocator",
    "CreateFeatureLocator",
    "CreateLocator",
    "GeocodeAddresses",
    "GeocodeFile",
    "GeocodeLocationsFromTable",
    "PackageLocator",
    "RebuildAddressLocator",
    "RematchAddresses",
    "ReverseGeocode",
    "SplitAddressIntoComponents",
]
__alias__ = ...
__all__ += _geocoding.__all__

@gptooldoc("AssignZonesToStreets_geocoding", None)
def AssignZonesToStreets(
    in_street_features=...,
    zone_features=...,
    zone_fields=...,
    out_streets=...,
    tolerance=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """AssignZonesToStreets_geocoding(in_street_features, zone_features, zone_fields;zone_fields..., out_streets, {tolerance})

       Assigns left and right administrative zone values-such as
       neighborhood, city, metro, or postal code-to street line segments for
       street addresses.

    INPUTS:
     in_street_features (Feature Layer):
         The input street feature class or layer.
     zone_features (Feature Layer):
         The input administrative zone feature class or layer.
     zone_fields (Field):
         The fields from the zone_features parameter value that will be
         assigned to the in_street_features parameter value.
     tolerance {Double}:
         The tolerance of the in_street_features parameter value that increases
         the width of the line feature on both sides to determine which
         zone_features values will be on the left and the right to account for
         data and digitization quality issues.The default value is 10 meters.

    OUTPUTS:
     out_streets (Dataset):
         The output street feature class or layer that contains the
         administrative zone assigned to the left and right sides of the street
         segment based on the direction the line was digitized."""
    ...

@gptooldoc("ClipLocator_geocoding", None)
def ClipLocator(
    in_locator=..., out_locator=..., area_of_interest=..., extent=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ClipLocator_geocoding(in_locator, out_locator, {area_of_interest}, {extent})

       Clips a locator based on an area of interest or extent and creates a
       locator with a smaller extent and size.

    INPUTS:
     in_locator (Address Locator):
         The locator (.loc file) that will be clipped.Geocode services or
         composite locators that contain geocode services,
         including services from ArcGIS Enterprise or ArcGIS Online, as
         participating locators are not supported. If the service is a
         participating locator in a composite locator it will not be clipped.
     area_of_interest {Feature Layer}:
         The polygon layer that defines an area of interest that will be used
         to clip the locator.This parameter overrides the extent parameter.
     extent {Extent}:
         Specifies the extent that will be used to clip the locator.

         * DISPLAY-The extent will be equal to the visible display.

         * Layer name-The extent of the specified layer will be used.

         * Extent object-The extent of the specified object will be used.

         * Space delimited string of coordinates-The extent of the specified
         string will be used. Coordinates are expressed in the order of x-min,
         y-min, x-max, y-max.

    OUTPUTS:
     out_locator (Address Locator):
         The clipped output locator (.loc file)."""
    ...

@gptooldoc("ConsolidateLocator_geocoding", None)
def ConsolidateLocator(
    in_locator=..., output_folder=..., copy_arcsde_locator=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ConsolidateLocator_geocoding(in_locator, output_folder, {copy_arcsde_locator})

       Consolidate Locator

    INPUTS:
     in_locator (Address Locator):
         Input Locator
     copy_arcsde_locator {Boolean}:
         Composite locator only: copy participating locators in ArcSDE database instead of referencing them

    OUTPUTS:
     output_folder (Folder):
         Output Folder"""
    ...

@gptooldoc("CreateCompositeAddressLocator_geocoding", None)
def CreateCompositeAddressLocator(
    in_address_locators=...,
    in_field_map=...,
    in_selection_criteria=...,
    out_composite_address_locator=...,
    in_result_ordering=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateCompositeAddressLocator_geocoding(in_address_locators;in_address_locators..., in_field_map, {in_selection_criteria;in_selection_criteria...}, out_composite_address_locator, {in_result_ordering})

       Creates a composite locator. A composite locator consists of two or
       more individual locators that allow addresses and places to be matched
       using multiple locators.

    INPUTS:
     in_address_locators (Value Table):
         The locators that will be used to create the composite locator. The
         order of the participating locators determines how candidates are
         searched and a place or address is matched. When you geocode a single
         place or address, the place or address will be matched using all
         participating locators unless the locator is specified with a
         selection criterion. All the found candidates will be displayed based
         on the order of the listed participating locators. If you geocode a
         table of addresses or places, addresses or places will be matched
         automatically to the first best candidate found from the first
         participating locators. If the address or place fails to match, it
         will fall back to the subsequent locator in the list.A reference name
         for each participating locator is required. This is
         the name of the locator referred to by the composite locator. Do not
         use spaces or special symbols in the name. The maximum length of the
         name is 14 characters.
     in_field_map (Field Mappings):
         The mapping of input fields used by each participating locator to the
         input fields of the composite address locator.For each locator input
         field, format the field information as in this
         sample string: "Address 'Address or Intersection' true true false 4
         Text 0 0 ,First,'#',Street". The information in this string is
         composed of the following:

         * New field name (Address)-The new locator field name for the
         composite locator. One locator in the composite may have an
         Address field and the other
         locator may have a Street Address field. You can designate the new
         composite locator field as Address, which references both original
         locator fields.

         * Alias for the new field name ('Address or
         Intersection')-The new locator field name alias for the composite
         locator. For a composite locator with the new field name
         Address, you can
         designate an alias of 'Address or Intersection' for the field.

         * isEditable (true)-Specifies whether the new composite locator field
         is editable. The options are true or false.

         * Allow NULL Values (true)-Specifies whether the new composite locator
         field allows null values. The options are true or false.

         * Required (false)-Specifies whether the new composite locator field
         is a required field. The options are true or false.

         * Length (4)-The length of the new composite locator field.

         * Type (Text)-The data type of the new composite locator field. This
         value should always be Text for a locator.

         * Scale (0)-The scale of the new composite locator field. Any value
         between 1 and 100 can be used. This value does not apply to locators,
         but a valid value must be used.

         * Precision (0)-The precision of the new composite locator field. Any
         value between 1 and 100 can be used. This value does not apply to
         locators, but a valid value must be used.

         * Merge rule (First)-The merge rule for the new composite locator
         field. Any merge rule value can be used. This value does not apply to
         locators, but a valid value must be used.

         * Delimiter ('#')-The delimiter for the new composite locator field.
         Any supported delimiter can be used.

         * Original locator field name (Street)-The locator field name in the
         original participating locator.
     in_selection_criteria {Value Table}:
         The selection criteria for each participating locator. Only one
         selection criterion is supported for each participating locator.Using
         selection criteria will disqualify participating locators that
         do not meet the criteria for a particular address or place so that the
         geocoding process will be more efficient. See Fundamentals of
         combining multiple locators into a composite locator to learn more
         about the use of selection criteria in the geocoding process.
     in_result_ordering {String}:
         Specifies the fallback order of the participating locators to which
         addresses can be matched to increase the probability of finding the
         best match when geocoding.

         * Use locator order-Participating locators are in the order
         they were added and adhere to the fallback order described in Combine
         multiple locators into a composite locator. This is the default.

         * Syntax is a comma delimited string of locator names.

         * For a composite locator containing two locators (Atlanta.loc and
         Memphis.loc, for example) syntax should be as follows: "Atlanta,
         Memphis"

         * Order by role and score-Participating locators are grouped
         by role and fallback order.

         * Syntax is a comma delimited string of role groupings structured as
         follows: [LocatorRole1](LocatorName1.LocatorRole1,
         LocatorName2.LocatorRole1).

         * For a composite locator containing two multirole locators
         (Atlanta.loc and Memphis.loc, for example) each containing a
         PointAddress role and a StreetAddress role, syntax should be as
         follows: "[PointAddress](Atlanta.PointAddress, Memphis.PointAddress),[
         StreetAddress](Memphis.StreetAddress,Atlanta.StreetAddress)".

         * Roles much be ordered from most precise to least precise.

         * Custom order-A customizable fallback order for
         participating locators allows you to insert locators between the roles
         of a multirole locator.

         * Syntax is a comma delimited string of locator names and roles
         structured as follows: LocatorName.LocatorRole.

         * For a composite locator containing two multirole locators
         (Atlanta.loc and Memphis.loc, for example) each containing a
         PointAddress role and a StreetAddress role, syntax should be as
         follows: "Atlanta.StreetAddress,Memphis.PointAddress,Memphis.StreetAdd
         res,Atlanta.PointAddress".

         * Locators and roles can be placed in any order, but placing less
         precise roles before more precise roles may result in unexpected
         behavior.

         To generate the correct Python syntax, first run the tool from the
         Geoprocessing pane. Then, open the Run menu and select Copy Python
         Command.

    OUTPUTS:
     out_composite_address_locator (Address Locator):
         The composite address locator that will be created. ArcGIS Pro only
         supports saving locators in a file folder."""
    ...

@gptooldoc("CreateFeatureLocator_geocoding", None)
def CreateFeatureLocator(
    in_features=..., search_fields=..., output_locator=..., locator_fields=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateFeatureLocator_geocoding(in_features, search_fields, output_locator, {locator_fields})

       Creates a locator using reference data that contains a unique name or
       value for every feature stored in a single field. A locator created
       with this tool has broad applications. It can be used to search for
       names or unique attributes of your features, such as water meters,
       short place names, cell towers, or alphanumeric strings used to
       identify locations (for example, N1N115).

    INPUTS:
     in_features (Feature Layer):
         The reference data feature class or feature layer that will be used to
         create the locator.Feature classes represented as services are
         supported data types for
         use as reference data.When a definition query is defined for the
         reference data or there are
         selected features, only the queried and selected features are included
         when the locator is created.When creating a locator with reference
         data that contains millions of
         features, you must have at least three to four times the size of the
         data in free disk space on the drive containing your temp directory,
         as files used to build the locator are written to this location before
         the locator is copied to the output location. If you do not have
         enough disk space, the tool will fail when it runs out of space. Also,
         when creating large locators, your machine must have enough RAM to
         handle large memory-intensive processes.
     search_fields (Field Info):
         Maps the reference data field to the field used for search in the
         in_features parameter. The search_fields mapping is done in the
         following format, in which <locator field name> is the name of the
         field supported by the locator role, and <data field name> is the name
         of the field used for search in the in_features parameter.# <locator
         field name> <data field name> # This shows an example:
         reference_data_field_map = ''' "'Name' AssetName" '''The selected
         field will be indexed and used for search. Map the
         relevant field for the reference data in the in_features parameter.
     locator_fields {Field Info}:
         Maps additional fields for extent and rank if they exist in the data.
         The Rank field is used to sort results for ambiguous queries or
         candidates with the same name and score. The extent fields help set
         the map extent for displaying geocoded results. The locator_fields
         mapping is done in the following format:# <additional locator field
         name> <additional data field name> # This
         shows an example: additional_fields_map = ''' "'Rank' RANK;'Min X'
         Xmin; 'Max X' Xmax;'Min Y' Ymin; 'Max Y' Ymax" '''The <additional
         locator field name> field is the name of the
         additional fields supported by the locator, and the <additional data
         field name> field is the name of the field in the in_features
         parameter. Map the relevant fields for the reference data in the
         in_features parameter.

    OUTPUTS:
     output_locator (Address Locator):
         The output locator file to be created in a file folder. Once the
         locator is created, additional properties and options can be modified
         in the locator's settings."""
    ...

@gptooldoc("CreateLocator_geocoding", None)
def CreateLocator(
    country_code=...,
    primary_reference_data=...,
    field_mapping=...,
    out_locator=...,
    language_code=...,
    alternatename_tables=...,
    alternate_field_mapping=...,
    custom_output_fields=...,
    precision_type=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateLocator_geocoding(country_code, primary_reference_data;primary_reference_data..., field_mapping;field_mapping..., out_locator, language_code, {alternatename_tables;alternatename_tables...}, {alternate_field_mapping;alternate_field_mapping...}, {custom_output_fields;custom_output_fields...}, {precision_type})

        Creates a locator that can find the location of an address or a place,
        convert a table of addresses or places to a collection of point
        features, or identify the address of a point location.

     INPUTS:
      country_code (String):
          Specifies where country-specific geocoding logic will be applied to
          the reference data for the locator.It can be specified using
          AS_DEFINED_IN_DATA and a value can be mapped
          from primary_reference_data in field_mapping, or it can be applied to
          the entire dataset by specifying the three-character country code name
          such as USA for the United States of America, CAN for Canada, or PRI
          for Puerto Rico.It provides a country template containing the expected
          field names
          that are available for use by the field_mapping parameter for the
          specified country of the locator to be created.

          * AS_DEFINED_IN_DATA-Three-character country code value defined in the
          reference data for each feature

          * ASM-American Samoa

          * AUS-Australia

          * AUT-Austria

          * BEL-Belgium

          * CAN-Canada

          * CHE-Switzerland

          * CZE-Czechia

          * DEU-Germany

          * ESP-Spain

          * EST-Estonia

          * FRA-France

          * GBR-Great Britain

          * GUM-Guam

          * ISR-Israel

          * ITA-Italy

          * JPN-Japan

          * KOR-South Korea

          * LTU-Lithuania

          * LVA-Latvia

          * MNP-Northern Mariana Islands

          * NLD-Netherlands

          * PRI-Puerto Rico

          * SWE-Sweden

          * VIR-U.S. Virgin Islands

          * USA-United States

          * UMI-Minor Outlying Islands of the United States
      primary_reference_data (Value Table):
          The reference data feature classes and their roles that will be used
          to create the locator. Only one primary table can be used per
          role.Feature classes represented as services are supported data types
          for
          use as primary reference data.When a definition query is defined for
          the primary reference data or
          there are selected features, only the queried and selected features
          will be included when the locator is created.When creating a locator
          with reference data that contains millions of
          features, you must have at least three to four times the size of the
          data in free disk space on the drive containing your temp directory,
          as files used to build the locator are written to this location before
          the locator is copied to the output location. If you do not have
          enough disk space, the tool will fail when it runs out of space. Also,
          when creating large locators, your machine must have enough RAM to
          handle large memory-intensive processes.
      field_mapping (String):
          The mapping of primary reference dataset fields to the fields
          supported by the locator role. Each field mapping in this parameter is
          in the following format in which <role name> is the locator role name,
          <locator role field name> is the name of the field supported by the
          locator role, <primary data> is the name of the data used in the
          primary_reference_data parameter, and <primary data field name> is the
          name of the field in the primary reference dataset. # <role
          name>.<locator role field name> <primary
          data>.<primary data field name> # This shows an example:
          primary_reference_data_field_map =
          "'StreetAddress.HOUSE_NUMBER_FROM_LEFT streets.L_F_ADD';"\\
          "'StreetAddress.HOUSE_NUMBER_TO_LEFT streets.L_T_ADD';"\\
          "'StreetAddress.HOUSE_NUMBER_FROM_RIGHT streets.R_F_ADD';"\\
          "'StreetAddress.HOUSE_NUMBER_TO_RIGHT streets.R_T_ADD';"\\
          "'StreetAddress.STREET_PREFIX_DIR streets.PREFIX';"\\
          "'StreetAddress.STREET_PREFIX_TYPE streets.PRE_TYPE';"\\
          "'StreetAddress.STREET_NAME streets.NAME';"\\
          "'StreetAddress.STREET_SUFFIX_TYPE streets.TYPE';"\\
          "'StreetAddress.STREET_SUFFIX_DIR streets.SUFFIX';"\\
          "'StreetAddress.CITY_LEFT streets.CITYL';"\\ "'StreetAddress.CITY_RIGHT
          streets.CITYR';"\\ "'StreetAddress.REGION_LEFT streets.STATE_ABBR';"\\
          "'StreetAddress.REGION_RIGHT streets.STATE_ABBR';"\\
          "'StreetAddress.POSTAL_LEFT streets.ZIPL';"\\
          "'StreetAddress.POSTAL_RIGHT streets.ZIPR'"        The following is an
          example of primary field_mapping.Map the relevant fields for each
          table from the primary_reference_data
          parameter. If you do not map an optional reference data field used by
          the locator role to a field in a reference dataset, it is not
          necessary to specify that there is no mapping using <None> in place of
          a field name.To determine the <locator role field name> value for a
          reference data
          field used by a locator role, open the Create Locator tool in ArcGIS
          Pro and choose the locator role. The name that appears in the Field
          Name column of the Field Mapping parameter is the field's role field
          name.If you are using an alternate name table, map Join ID in the
          primary_reference_data parameter value.To add custom output fields,
          the names of the fields must be defined
          in the custom_output_fields parameter as well as the field_mapping
          parameter. The field_mapping parameter will use the format '<locator
          role field name> <primary data field name>' in which <locator role
          field name> is defined as 'RoleName.CustomFieldName', and <primary
          data field name> is the name of the field in the primary reference
          dataset as shown in the mapped fields in the example above. If a
          custom field is added to a Street Address role, you will need to map
          'StreetAddress.CustomFieldName_Left' and
          'StreetAddress.CustomFieldName_Right' for each side of the street.
      language_code (String):
          Specifies where language-specific geocoding logic will be applied to
          the reference data for the locator.If a language code field exists in
          the primary reference data,
          providing a language code can improve the results of the geocoding.It
          can be specified by setting AS_DEFINED_IN_DATA as the language_code
          value and mapping a value from primary_reference_data in
          field_mapping, or it can be applied to the entire dataset by
          specifying a language using the three-character language code
          representing the language of the address, such as ENG for English.

          * AS_DEFINED_IN_DATA-Three-character language code value defined in
          the reference data for each feature

          * BAQ-Basque

          * CAT-Catalan

          * CZE-Czech

          * DUT-Dutch

          * ENG-English

          * EST-Estonian

          * FRE-French

          * GER-German

          * GLG-Galician

          * HEB-Hebrew

          * ITA-Italian

          * JPN-Japanese

          * KOR-Korean

          * LIT-Lithuanian

          * LAV-Latvian

          * SPA-Spanish

          * SWE-Swedish
      alternatename_tables {Value Table}:
          The tables that contain alternate names for the features in the
          primary role tables.Tables represented as services are supported data
          types for use as
          alternate name tables.When a definition query is defined for the
          alternate name table or
          there are selected records, only the queried and selected records will
          be included when the locator is created.
      alternate_field_mapping {String}:
          Maps alternate name table fields to the alternate data fields
          supported by the locator role. Each field mapping must use the
          following format, in which <alternate name table role> is the name of
          the alternate name table role, <locator role alternate field name> is
          the name of the alternate data field supported by the alternate name
          table locator role, <alternate data table> is the name of the
          alternate name table, and <alternate data table field name> is the
          name of the field in the alternate name table. Map the relevant fields
          for each table in alternatename_tables. # <alternate name table
          role>.<locator role alternate field
          name> <alternate data table>.<alternate data table field name> # This
          shows an example: alternate_data__table_field_map =
          "'AlternateStreetName.STREET_NAME_JOIN_ID altname.JOINID';"\\
          "'AlternateStreetName.STREET_PREFIX_DIR altname.PRE_DIR';"\\
          "'AlternateStreetName.STREET_PREFIX_TYPE altname.PRE_TYPE';"\\
          "'AlternateStreetName.STREET_NAME altname.ST_NAME';"\\
          "'AlternateStreetName.STREET_SUFFIX_TYPE altname.ST_TYPE';"\\
          "'AlternateStreetName.STREET_SUFFIX_DIR altname.SUF_DIR'"        The
          following is an example of alternate_field_mapping for
          alternatename_tables.If the data is normalized and the primary table
          does not contain city
          name values but the alternate name table does, the Primary Name
          Indicator field can be mapped to a field in the alternate name table
          that contains a value that indicates whether the record is the primary
          field (for example, true/false or Yes/No). If this field is not
          mapped, the first record in the alternate name table will be used as
          the primary value.
      custom_output_fields {String}:
          Adds user-defined output fields to the locator. The values specified
          for this parameter will define the names of the custom output fields
          that will be returned in the geocode result; however, each new field
          must be mapped to a field in the reference data. This new output field
          will apply for all roles that were used in the locator. If the locator
          role has a left and right side, _left and _right will be appended to
          the end of the field name. The maximum number of fields supported in
          the locator is 50.You must first include the custom output field names
          in the
          field_mapping parameter; then list the names in the
          custom_output_fields parameter.
      precision_type {String}:
          Specifies the precision of the locator.Locators created with
          GLOBAL_EXTRA_HIGH or LOCAL_EXTRA_HIGH precision
          can be used in ArcGIS Pro 2.6 or later and Enterprise 10.8.1 or later.

          * GLOBAL_EXTRA_HIGH-The precision is approximately 1 centimeter, which
          is consistent globally.

          * GLOBAL_HIGH-The precision is approximately 0.5 meter, which is
          consistent globally. This is the default.

          * LOCAL_EXTRA_HIGH-Increased precision is used for local areas.

     OUTPUTS:
      out_locator (Address Locator):
          The output address locator file."""
    ...

@gptooldoc("GeocodeAddresses_geocoding", None)
def GeocodeAddresses(
    in_table=...,
    address_locator=...,
    in_address_fields=...,
    out_feature_class=...,
    out_relationship_type=...,
    country=...,
    location_type=...,
    category=...,
    output_fields=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GeocodeAddresses_geocoding(in_table, address_locator, in_address_fields, out_feature_class, {out_relationship_type}, {country;country...}, {location_type}, {category;category...}, {output_fields})

       Geocodes a table of addresses. This process requires a table that
       stores the addresses you want to geocode and an address locator or a
       composite address locator. This tool matches the stored addresses
       against the locator and saves the result for each input record in a
       new point feature class. When using the ArcGIS World Geocoding
       Service, this operation may consume credits.

    INPUTS:
     in_table (Table View):
         The table of addresses to geocode.
     address_locator (Address Locator):
         The address locator that will be used to geocode the table of
         addresses. Including the .loc extension after the locator name
         at the end of the
         locator path is optional.
     in_address_fields (Field Info):
         Each field mapping in this parameter is in the format
         input_address_field, table_field_name in which input_address_field is
         the name of the input address field specified by the address locator,
         and table_field_name is the name of the corresponding field in the
         table of addresses you want to geocode.You can specify a single input
         field that stores the complete address,
         for example, 303 Peachtree St NE, Atlanta, GA 30308. Alternatively,
         you can specify multiple fields if the input addresses are divided
         into multiple fields such as Address, City, State, and ZIP for a
         general United States address. You can also specify a single input
         field that stores the complete address, for example, 303 Peachtree St
         NE, Atlanta, GA 30308, and a field that stores the country associated
         with the address, for example, USA.Some locators support multiple
         input address fields, such as Address,
         Address2, and Address3. In this case, the address component can be
         separated into multiple fields, and the address fields will be
         concatenated at the time of geocoding. For example, 100, Main st, and
         Apt 140 across three fields, or 100 Main st and Apt 140 across two
         fields, both become 100 Main st Apt 140 when geocoding.If you do not
         map an optional input address field used by the address
         locator to a field in the input table of addresses, specify that there
         is no mapping using <None> in place of the field name.
     out_relationship_type {Boolean}:
         This parameter has no effect in ArcGIS Pro. It remains to support
         backward compatibility with ArcGIS Desktop.In ArcGIS Pro, the only
         permissible value is STATIC.

         * STATIC-A static copy of the fields input address table will be
         created in the output feature class. This is the only permissible
         value.

         * DYNAMIC-This option is not applicable in ArcGIS Pro. See ArcGIS
         Desktop help for this tool.
     country {String}:
         The country or countries to search for the geocoded addresses.This
         parameter is available for locators that support a country
         parameter and will limit geocoding to the selected countries.
         Specifying a country will improve the accuracy of geocoding in most
         cases. If a field representing countries in the in_table parameter is
         mapped to the Country field in the input_address_field parameter
         value, the country value from the in_table parameter value will
         override the country parameter.This is limited to the specified
         country or countries. When no country
         is specified, geocoding is performed using all supported countries of
         the locator.Specify the value as either two-character or three-
         character country
         codes in a comma-separated list. See the Supported Country Codes
         column for the input value to use.The country parameter is not
         supported for all locators.
     location_type {String}:
         Specifies the preferred output geometry for POINT_ADDRESS matches. The
         options for this parameter are ROUTING_LOCATION, which is the side of
         street location that can be used for routing and ADDRESS_LOCATION,
         which is the location that represents the rooftop, parcel centroid for
         the address, or front door. If the preferred location does not exist
         in the data, the default location of ROUTING_LOCATION will be
         returned. For geocode results with Addr_type = PointAddress, the x,y
         attribute values describe the coordinates of the address along the
         street, and the DisplayX and DisplayY values describe the rooftop or
         building centroid coordinates. See the ArcGIS REST API web help for
         details about the locationType parameter for geocodeAddresses.This
         parameter is not supported for all locators.

         * ADDRESS_LOCATION-Geometry for geocode results that represent an
         address location such as rooftop location, parcel centroid, or front
         door will be returned.

         * ROUTING_LOCATION-Geometry for geocode results that represent a
         location close to the side of the street that can be used for vehicle
         routing will be returned. This is the default.
     category {String}:
         Limits the types of places the locator searches, eliminating
         false positive matches and potentially speeding up the search process.
         When no category is used, geocoding is performed using all supported
         categories. Not all category values are supported for all locations
         and countries. In general, this parameter can be used for the
         following:

         * Limit matches to specific place types or address levels

         * Avoid fallback matches to unwanted address levels

         * Disambiguate coordinate searches
         This parameter is not supported for all locators.See the ArcGIS REST
         API web help for details about category filtering.
     output_fields {String}:
         Specifies the locator output fields that will be returned in the
         geocode results.This parameter can be used with input locators created
         with the Create
         Locator or Create Feature Locator tool stored on disk or published to
         Enterprise 10.9 or later. Composite locators that contain at least one
         locator created with the Create Address Locator tool do not support
         this parameter.

         * ALL-Includes all available locator output fields in the geocode
         results. This is the default.

         * LOCATION_ONLY-Stores the Shape field in the geocode results. The
         original field names from the in_table parameter value will be
         maintained with their original field names.

         * MINIMAL-Adds the following fields that describe the location and how
         well it matches information in the locator in the geocode results:
         Shape, Status, Score, Match_type, Match_addr, and Addr_type. The
         original field names from the in_table parameter value will be
         maintained.

         * MINIMAL_AND_USER-Adds the following fields that describe the
         location and how well it matches information in the locator in the
         geocode results, as well as any user-defined custom output fields:
         Shape, Status, Score, Match_type, Match_addr, and Addr_type. The
         original field names from the in_table parameter value will be
         maintained.

    OUTPUTS:
     out_feature_class (Feature Class):
         The output geocoded feature class.Saving the output to shapefile
         format is not supported due to
         shapefile limitations."""
    ...

@gptooldoc("PackageLocator_geocoding", None)
def PackageLocator(
    in_locator=...,
    output_file=...,
    copy_arcsde_locator=...,
    additional_files=...,
    summary=...,
    tags=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """PackageLocator_geocoding(in_locator, output_file, {copy_arcsde_locator}, {additional_files;additional_files...}, {summary}, {tags})

       Package Locator

    INPUTS:
     in_locator (Address Locator):
         Input Locator
     copy_arcsde_locator {Boolean}:
         Composite locator only: copy participating locators in ArcSDE database instead of referencing them
     additional_files {File}:
         Additional Files
     summary {String}:
         Summary
     tags {String}:
         Tags

    OUTPUTS:
     output_file (File):
         Output File"""
    ...

@gptooldoc("RebuildAddressLocator_geocoding", None)
def RebuildAddressLocator(
    in_address_locator=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """RebuildAddressLocator_geocoding(in_address_locator)

       Rebuilds an address locator to update the locator with the current
       reference data. Because a locator contains a snapshot of the reference
       data when it was created, it will not geocode addresses with the
       updated data when the geometry and attributes of the reference data
       are changed. To geocode addresses with the current version of the
       reference data, the locator must be rebuilt if you want to update the
       changes in the locator.

    INPUTS:
     in_address_locator (Address Locator):
         The address locator to rebuild."""
    ...

@gptooldoc("RematchAddresses_geocoding", None)
def RematchAddresses(
    in_geocoded_feature_class=..., in_where_clause=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """RematchAddresses_geocoding(in_geocoded_feature_class, {in_where_clause})

       Rematches addresses in a geocoded feature class.

    INPUTS:
     in_geocoded_feature_class (Feature Class):
         The geocoded feature class to be rematched.
     in_where_clause {SQL Expression}:
         An SQL expression used to select a subset of features. For more
         information on SQL syntax see the help topic SQL reference for query
         expressions used in ArcGIS."""
    ...

@gptooldoc("ReverseGeocode_geocoding", None)
def ReverseGeocode(
    in_features=...,
    in_address_locator=...,
    out_feature_class=...,
    address_type=...,
    search_distance=...,
    feature_type=...,
    location_type=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ReverseGeocode_geocoding(in_features, in_address_locator, out_feature_class, {address_type}, {search_distance}, {feature_type;feature_type...}, {location_type})

       Creates addresses from point locations in a feature class. The reverse
       geocoding process searches for the nearest address, place, or
       intersection for the point location based on optimized distance values
       for locators created with the Create Locator tool.

    INPUTS:
     in_features (Feature Layer):
         A point feature class or layer from which matching places or addresses
         will be returned based on the features' point location.
     in_address_locator (Address Locator):
         The locator that will be used to reverse geocode the input feature
         class or layer.
     address_type {String}:
         This parameter is deprecated and maintained only for backward
         compatibility. By default, the feature types supported by the locator
         will be used.
     search_distance {Linear Unit}:
         This parameter is deprecated and maintained only for backward
         compatibility. By default, optimized hierarchical distance values will
         be used based on the roles supported by the locator and cannot be
         overridden.
     feature_type {String}:
         Specifies the possible match types that will be returned. A single
         value or multiple values can be selected. If a single value is
         selected, the search tolerance for the input feature type is 500
         meters. If multiple values are included, the default search distances
         specified in the feature type hierarchy table will be applied. See
         Feature types for details about the feature_type parameter for reverse
         geocoding.This parameter is not supported for all locators.

         * SUBADDRESS-The match will be limited to a street address based on
         points that represent house and building subaddress locations. This
         option requires a locator created in ArcGIS Pro 2.8 or later and
         ArcGIS Enterprise 10.9 or later if published as a service.

         * POINT_ADDRESS-The match will be limited to a street address based on
         points that represent house and building locations.

         * PARCEL-The match will be limited to a plot of land that is
         considered real property and can include one or more homes or other
         structures. This match type typically has an address and a parcel
         identification number assigned to it.

         * STREET_ADDRESS-The match will be limited to a street address that
         differs from POINT_ADDRESS because the house number is interpolated
         from a range of numbers. STREET_ADDRESS matches include the house
         number range for the matching street segment rather than the
         interpolated house number value.

         * STREET_INTERSECTION-The match will be limited to a street address
         consisting of a street intersection along with city and optional state
         and postal code information. This is derived from STREET_ADDRESS
         reference data, for example, Redlands Blvd & New York St, Redlands,
         CA, 92373.

         * STREET_NAME-The match will be limited to a street address similar to
         STREET_ADDRESS but without house numbers along with administrative
         divisions and optional postal code, for example, W Olive Ave,
         Redlands, CA, 92373.

         * LOCALITY-The match will be limited to a place-name representing a
         populated place.

         * POSTAL-The match will be limited to a postal code. Reference data is
         postal code points, for example, 90210 USA.

         * POINT_OF_INTEREST-The match will be limited to a point of interest.
         Reference data consists of administrative division place-names,
         businesses, landmarks, and geographic features, for example,
         Starbucks.

         * DISTANCE_MARKER-The match will be limited to a street address that
         represents the linear distance along a street, typically in kilometers
         or miles, from a designated origin location, for example, Mile 25 I-5
         N, San Diego, CA.
     location_type {String}:
         Specifies the preferred output geometry that will be returned for
         POINT_ADDRESS matches. The options for this parameter are
         ROUTING_LOCATION, which is the side of street location that can be
         used for routing and ADDRESS_LOCATION, which is the location that
         represents the rooftop, parcel centroid for the address, or front
         door. If the preferred location does not exist in the data, the
         default location of ROUTING_LOCATION will be returned. For geocode
         results with Addr_type = "PointAddress", the x,y attribute values
         describe the coordinates of the address along the street, and the
         DisplayX and DisplayY values describe the rooftop or building centroid
         coordinates. See the REST API web help for details about the
         locationType parameter for reverseGeocode.This parameter is not
         supported for all locators.

         * ADDRESS_LOCATION-Geometry for geocode results that represent an
         address location such as a rooftop, building centroid, or front door
         will be returned.

         * ROUTING_LOCATION-Geometry for geocode results that represent a
         location close to the side of the street that can be used for vehicle
         routing, will be returned. This is the default.

    OUTPUTS:
     out_feature_class (Feature Class):
         The output feature class.Saving the output to shapefile format is not
         supported due to
         shapefile limitations."""
    ...

@gptooldoc("SplitAddressIntoComponents_geocoding", None)
def SplitAddressIntoComponents(
    country_code=...,
    in_address_data=...,
    in_address_fields=...,
    out_address_data=...,
    in_exceptions=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """SplitAddressIntoComponents_geocoding(country_code, in_address_data, in_address_fields;in_address_fields..., out_address_data, {in_exceptions})

       Splits street address information into address components and creates
       a table or feature class with the additional components added as
       unique fields.

    INPUTS:
     country_code (String):
         Specifies the country addressing structure that will be used to split
         addresses into components.The default is the regional setting of the
         operating system.

         * AUS-Australia

         * AUT-Austria

         * BEL-Belgium

         * CAN-Canada

         * CHE-Switzerland

         * DEU-Germany

         * ESP-Spain

         * FRA-France

         * GBR-Great Britain

         * ISR-Israel

         * NLD-Netherlands

         * USA-United States
     in_address_data (Table View):
         The table or feature class containing street address information that
         will be split into individual address components.Zone information,
         such as city, neighborhood, subregion, and postal
         code, is not supported.
     in_address_fields (String):
         The field or fields in the input table or feature class that, when
         concatenated, will form the street address to be split. Zone
         information, such as city, neighborhood, subregion, and postal code,
         is not supported.The order in which the fields are selected is the
         order the fields
         will be concatenated.
     in_exceptions {Table View}:
         The table that contains street parsing exceptions.The table can be in
         any supported table format.

    OUTPUTS:
     out_address_data (Dataset):
         The output feature class or table that will contain the split street
         address data."""
    ...

@gptooldoc("GeocodeFile_geocoding", None)
def GeocodeFile(
    in_table=...,
    locator=...,
    address_fields=...,
    output_type=...,
    output_location=...,
    output_name=...,
    country=...,
    location_type=...,
    category=...,
    output_fields=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GeocodeFile_geocoding(in_table, locator, address_fields, output_type, output_location, output_name, {country;country...}, {location_type}, {category;category...}, {output_fields})

       Converts large local tables of addresses or places into points in a
       feature class or as a CSV or XLS table. This tool uses locators hosted
       on an ArcGIS Enterprise portal.

    INPUTS:
     in_table (Record Set):
         The input table that contains addresses or places to geocode in CSV,
         XLS, or XLSX format or in a file geodatabase table.
     locator (Address Locator):
         The portal locator that will be used to geocode the table.You can
         select a locator from the populated list of locators on the
         active portal or browse the active portal for other available
         locators. Locators that have been set as utility services on the
         active portal will be available by default.The ArcGIS World Geocoding
         Service is disabled for this tool. Use the
         Geocode Addresses tool if you want to use the ArcGIS World Geocoding
         Service.
     address_fields (Field Info):
         Each field mapping in this parameter is in the format
         input_locator_field, table_field_name in which input_locator_field is
         the name of the input address field specified by the locator, and
         table_field_name is the name of the corresponding field in the table
         of addresses you want to geocode.You can specify a single input field
         that stores the complete address,
         for example, 303 Peachtree St NE, Atlanta, GA 30308. Alternatively,
         you can specify multiple fields if the input addresses are divided
         into multiple fields such as Address, City, State, and ZIP for a
         general United States address. You can also specify a single input
         field that stores the complete address, for example, 303 Peachtree St
         NE, Atlanta, GA 30308, and a field that stores the country associated
         with the address, for example, USA.Some locators support multiple
         input addresses fields such as Address,
         Address2, and Address3. In this case, the address component can be
         separated into multiple fields and the address fields will be
         concatenated at the time of geocoding. For example, 100, Main st, and
         Apt 140 across three fields or 100 Main st and Apt 140 across two
         fields, both become 100 Main st Apt 140 when geocoding.If you do not
         map an optional input address field used by the locator
         to a field in the input table of addresses, specify that there is no
         mapping using <None> in place of a field name.
     output_type (String):
         Specifies the file type to which the geocode results will be written.

         * CSV-A .csv file will be returned.

         * FEATURE_CLASS-A feature class in a file geodatabase will be
         returned.

         * XLS-An .xls file will be returned.
     output_location (Workspace):
         The folder where the output geocoding results will be written.If the
         output is a .csv or .xls file, an output file will be placed in
         the specified folder.If the output is a feature class, an output file
         geodatabase will be
         created and placed in the specified folder, and the new file
         geodatabase will contain the geocoded feature class. The output file
         geodatabase and feature class in the file geodatabase will have the
         same name.
     output_name (String):
         The name of the output geocoded results.
     country {String}:
         The country or countries to search for the geocoded addresses.This
         parameter is available for locators that support a country
         parameter and will limit geocoding to the selected countries. Making a
         country selection will improve the accuracy of geocoding in most
         cases. If a field representing countries in the in_table parameter is
         mapped to the Country field in address_fields, the country value from
         the in_table parameter will override the country parameter.This is
         limited to the specified country or countries. If no country
         is specified, geocoding is performed on all supported countries of the
         locator.Specify the value as either two-character or three-character
         country
         codes in a comma-separated list. See the Supported Country Codes
         column for the input value to use.The country parameter is not
         supported for all locators.
     location_type {String}:
         Specifies the preferred output geometry that will be returned for
         POINT_ADDRESS matches. The options for this parameter are
         ROUTING_LOCATION, which is the side of street location that can be
         used for routing and ADDRESS_LOCATION, which is the location that
         represents the rooftop, parcel centroid for the address, or front
         door. If the preferred location does not exist in the data, the
         default location of ROUTING_LOCATION will be returned. For geocode
         results with Addr_type=PointAddress, the x,y attribute values describe
         the coordinates of the address along the street, and the DisplayX and
         DisplayY values describe the rooftop or building centroid coordinates.
         See the ArcGIS REST API web help for details about the locationType
         parameter for geocodeAddresses.This parameter is not supported for all
         locators.

         * ADDRESS_LOCATION-Geometry for geocode results that represent an
         address location such as a rooftop location, parcel centroid, or front
         door will be returned.

         * ROUTING_LOCATION-Geometry for geocode results that represent a
         location close to the side of the street that can be used for vehicle
         routing will be returned. This is the default.
     category {String}:
         Limits the types of places the locator searches, eliminating
         false positive matches and potentially speeding up the search process.
         When no category is used, geocoding is performed using all supported
         categories. Not all category values are supported for all locations
         and countries. In general, this parameter can be used for the
         following:

         * Limit matches to specific place types or address levels

         * Avoid fallback matches to unwanted address levels

         * Disambiguate coordinate searches
         This parameter is not supported for all locators.See the ArcGIS REST
         API web help for details about category filtering.
     output_fields {String}:
         Specifies the locator output fields that will be returned in the
         geocode results.This parameter can be used with input locators created
         with the Create
         Locator or Create Feature Locator tool published to Enterprise 10.9 or
         later. Composite locators that contain at least one locator created
         with the Create Address Locator tool do not support this parameter.

         * ALL-Includes all available locator output fields in the geocode
         results. This is the default.

         * LOCATION_ONLY-The Shape field will be stored if the geocode result
         is a feature class. The Shape X and Shape Y fields will be stored if
         the result is either a .csv or .xls file. The original field names
         from the in_table parameter will be maintained with their original
         field names.

         * MINIMAL-Adds the following fields that describe the location and how
         well it matches information in the locator in the geocode results:
         Shape, Status, Score, Match_type, Match_addr, and Addr_type. The
         original field names from the in_table parameter value will be
         maintained.

         * MINIMAL_AND_USER-Adds the following fields that describe the
         location and how well it matches information in the locator in the
         geocode results, as well as any user-defined custom output fields:
         Shape, Status, Score, Match_type, Match_addr, and Addr_type. The
         original field names from the in_table parameter value will be
         maintained."""
    ...

@gptooldoc("GeocodeLocationsFromTable_geocoding", None)
def GeocodeLocationsFromTable(
    in_table=...,
    in_address_locator=...,
    address_fields=...,
    output_name=...,
    country=...,
    location_type=...,
    category=...,
    output_fields=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GeocodeLocationsFromTable_geocoding(in_table, in_address_locator, address_fields, output_name, {country;country...}, {location_type}, {category;category...}, {output_fields})

       Geocodes hosted tables using locators hosted on an ArcGIS Enterprise
       portal, which creates a hosted feature layer containing the geocoded
       results.

    INPUTS:
     in_table (Record Set):
         The table on the portal that contains the addresses or places to
         geocode.
     in_address_locator (Address Locator):
         The portal locator that will be used to geocode the input table from
         the portal.You can select a locator from the populated list of
         locators on the
         active portal or browse the active portal for other available
         locators. Locators that have been set as utility services in the
         active portal will be available by default. If the portal locator you
         want to use is not in the populated list, ask your portal
         administrator to add the locator as a portal utility service, and
         configure the locator for batch geocoding.The ArcGIS World Geocoding
         Service is disabled for this tool. Use the
         Geocode Addresses tool if you want to use the ArcGIS World Geocoding
         Service.
     address_fields (Field Info):
         Each field mapping in this parameter is in the format
         input_locator_field, table_field_name in which input_locator_field is
         the name of the input address field specified by the locator, and
         table_field_name is the name of the corresponding field in the table
         of addresses you want to geocode.You can specify a single input field
         that stores the complete address,
         for example, 303 Peachtree St NE, Atlanta, GA 30308. Alternatively,
         you can specify multiple fields if the input addresses are divided
         into multiple fields such as Address, City, State, and ZIP for a
         general United States address. You can also specify a single input
         field that stores the complete address, for example, 303 Peachtree St
         NE, Atlanta, GA 30308, and a field that stores the country associated
         with the address, for example, USA.Some locators support multiple
         input address fields, such as Address,
         Address2, and Address3. In this case, the address component can be
         separated into multiple fields, and the address fields will be
         concatenated at the time of geocoding. For example, 100, Main St, and
         Apt 140 across three fields or 100 Main St and Apt 140 across two
         fields, both become 100 Main St Apt 140 when geocoding.If you do not
         map an optional input address field used by the locator
         to a field in the input table of addresses, specify that there is no
         mapping using <None> in place of a field name.
     output_name (String):
         The name of the output geocoded feature layer that will be created on
         the portal.
     country {String}:
         The country or countries to search for the geocoded addresses.This
         parameter is available for locators that support a country
         parameter and will limit geocoding to the selected countries. Making a
         country selection will improve the accuracy of geocoding in most
         cases. If a field representing countries in the in_table parameter is
         mapped to the Country field in address_fields, the country value from
         the in_table parameter will override the country parameter.This is
         limited to the specified country or countries. If no country
         is specified, geocoding is performed on all supported countries of the
         locator.Specify the value as either two-character or three-character
         country
         codes in a comma-separated list. See the Supported Country Codes
         column for the input value to use.The country parameter is not
         supported for all locators.
     location_type {String}:
         Specifies the preferred output geometry that will be returned for
         POINT_ADDRESS matches. The options for this parameter are
         ROUTING_LOCATION, which is the side of street location that can be
         used for routing and ADDRESS_LOCATION, which is the location that
         represents the rooftop, parcel centroid for the address, or front
         door. If the preferred location does not exist in the data, the
         default location of ROUTING_LOCATION will be returned. For geocode
         results with Addr_type=PointAddress, the x,y attribute values describe
         the coordinates of the address along the street, and the DisplayX and
         DisplayY values describe the rooftop or building centroid coordinates.
         See the ArcGIS REST API web help for details about the locationType
         parameter for geocodeAddresses.This parameter is not supported for all
         locators.

         * ADDRESS_LOCATION-Geometry for geocode results that represent an
         address location such as a rooftop location, parcel centroid, or front
         door will be returned.

         * ROUTING_LOCATION-Geometry for geocode results that represent a
         location close to the side of the street that can be used for vehicle
         routing will be returned. This is the default.
     category {String}:
         Limits the types of places the locator searches, eliminating
         false positive matches and potentially speeding up the search process.
         When no category is used, geocoding is performed using all supported
         categories. Not all category values are supported for all locations
         and countries. In general, this parameter can be used for the
         following:

         * Limit matches to specific place types or address levels

         * Avoid fallback matches to unwanted address levels

         * Disambiguate coordinate searches
         This parameter is not supported for all locators.See the ArcGIS REST
         API web help for details about category filtering.
     output_fields {String}:
         Specifies the locator output fields that will be returned in the
         geocode results.This parameter can be used with input locators created
         with the Create
         Locator or Create Feature Locator tool published to Enterprise 10.9 or
         later. Composite locators that contain at least one locator created
         with the Create Address Locator tool do not support this parameter.

         * ALL-Includes all available locator output fields in the geocode
         results. This is the default.

         * LOCATION_ONLY-Stores the Shape field in the geocode results. The
         original field names from the in_table parameter value will be
         maintained with their original field names.

         * MINIMAL-Adds the following fields that describe the location and how
         well it matches information in the locator in the geocode results:
         Shape, Status, Score, Match_type, Match_addr, and Addr_type. The
         original field names from the in_table parameter value will be
         maintained.

         * MINIMAL_AND_USER-Adds the following fields that describe the
         location and how well it matches information in the locator in the
         geocode results, as well as any user-defined custom output fields:
         Shape, Status, Score, Match_type, Match_addr, and Addr_type. The
         original field names from the in_table parameter value will be
         maintained."""
    ...
