"""
This type stub file was generated by pyright.
"""

from .CIMEnum import *
from .CIMExternal import *

class CIM3DMarkerGraphic:
    """
    Represents a 3D marker graphic.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIM3DMarkerLOD:
    """
    Represents a 3D Marker LOD.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIM3DSymbolProperties:
    """
    Represents 3D symbol properties, a collection of symbol properties
    that apply when the symbol is used in a 3D context.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMAnimatedSymbolProperties:
    """
    Represents animated symbol properties, a collection of symbol properties
    that apply when the symbol layer has animation data.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMCGAAttribute:
    """
    Represents a CGA attribute, the symbol attribute as specified by
    the CGA code in the rule package.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMCallout:
    """
    Represents a callout.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMChartPart:
    """
    Represents a chart part, individual components of the chart marker.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMClippingPath:
    """
    Represents a vector marker clipping path.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMColorSubstitution:
    """
    Represents color substitution, an ordered list of color substitutes.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMCompositeTextPartPosition:
    """
    Represents the text part position properties on a callout part.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMFontVariation:
    """
    Represents a font variation tag name and value. This is sometimes
    referred to as a variation-axis tag and variation-axis value.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffect:
    """
    Represents a geometric effect, this is base class for all geometric
    effects.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerGraphic:
    """
    Represents a marker graphic which is used to define vector graphics
    in a vector marker.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacement:
    """
    Represents a marker placement.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMaterialProperties:
    """
    Represents material properties.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMObjectMarker3DLOD:
    """
    Represents a level of detail of an object marker 3D.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMShapeVertex:
    """
    Represents a shape vertex.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMShapeVertices:
    """
    Represents shape vertices.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMSymbol:
    """
    Represents a symbol. A symbol is used to describe how a geometric
    shape, such as that from a graphic or feature, is displayed.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMSymbolLayer:
    """
    Represents a symbol layer. Symbol layers are the components that
    make up a symbol. A symbol layer is represented by a stroke, fill,
    marker, or procedural symbol layer.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMTextMargin:
    """
    Represents a text margin which defines the margin to apply around
    text.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMBalloonCallout(CIMCallout):
    """
    Represents a balloon callout. Balloon callouts are a filled background
    that is placed behind text. They may or may not have a leader line
    connecting the callout to an anchor point.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMCompositeCallout(CIMCallout):
    """
        Represents a composite callout. Composite callouts are a filled
        background along with an optional shadow, which is placed
    ///
        behind text. They may also have a leader line (consisting of one
        or both of a simple line, and filled dart)
    /// connecting the
        callout to an anchor point. Composite callouts may have additional
        surrounding text elements.
    /// The text representing these parts
        is specified in the text string using tags. Their relative position
        properties are
    /// specified in the CIMCompositeCallout through
        their corresponding CIMCompositeTextPartPosition elements specified
        below,
    /// but these properties can also be overridden with tag
        attributes.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMFill(CIMSymbolLayer):
    """
    Represents a fill which defines how the polygonal geometry is drawn.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectAddControlPoints(CIMGeometricEffect):
    """
    Represents the add control points geometric effect.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectArrow(CIMGeometricEffect):
    """
    Represents the arrow geometric effect which creates a dynamic line
    along a line feature with an arrow of a specified arrow type and
    width.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectBuffer(CIMGeometricEffect):
    """
    Represents the buffer geometric effect which creates a dynamic
    polygon with a specified distance around features.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectCircularSector(CIMGeometricEffect):
    """
    Represents the circular sector geometric effect which creates a
    circular sector of a specified radius and start/end angles originating
    from a point feature.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectControlMeasureLine(CIMGeometricEffect):
    """
    Represents the control measure line geometric effect.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectCut(CIMGeometricEffect):
    """
    Represents the cut geometric effect which creates a dynamic line
    that is shorter on one or both ends than the line feature or polygon
    outline.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectDashes(CIMGeometricEffect):
    """
    Represents the dashes geometric effect which creates a dynamic
    multipart line geometry from a line feature or the outline of a
    polygon based on a template.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectDonut(CIMGeometricEffect):
    """
    Represents the donut geometric effect which creates a dynamic polygon
    ring of a specified width in relation to the outline of polygon
    features.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectEnclosingPolygon(CIMGeometricEffect):
    """
    Represents the enclosing polygon geometric effect which creates
    a dynamic polygon from the spatial extent of a line or polygon
    feature.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectExtension(CIMGeometricEffect):
    """
    Represents the extension geometric effect which creates a dynamic
    line that is extended from either the beginning or the end of the
    line feature at a specified deflection angle and length.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectJog(CIMGeometricEffect):
    """
    Represents the jog geometric effect which creates a dynamic line
    with a jog of a specified angle, position, and width in the line.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectLocalizerFeather(CIMGeometricEffect):
    """
    Represents a geometric effect which creates a localizer feather
    for aeronautical charts.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectMove(CIMGeometricEffect):
    """
    Represents the move geometric effect which creates a point, line
    or polygon that is offset a specified distance in X and Y.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectOffset(CIMGeometricEffect):
    """
    Represents the offset geometric effect which creates a dynamic
    line or polygon offset at a specified distance perpendicularly
    from a feature.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectOffsetHatch(CIMGeometricEffect):
    """
    Represents a geometric effect which creates a hatch pattern to
    depict special use airspace for aeronautical charts.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectOffsetTangent(CIMGeometricEffect):
    """
    Represents the offset tangent geometric effect which creates a
    dynamic line along a line feature offset in the direction defined
    by either the beginning or the end of the line.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectRadial(CIMGeometricEffect):
    """
    Represents the radial geometric effect which creates a dynamic
    line of a specified length and angle originating from a point feature.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectRegularPolygon(CIMGeometricEffect):
    """
    Represents the regular polygon geometric effect which creates a
    dynamic polygon around a point feature with a specified number
    of edges. All edges are equal in length and all angles are equal.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectReverse(CIMGeometricEffect):
    """
    Represents the reverse geometric effect which creates a dynamic
    polygon around a point feature with a specified number of edges.
    All edges are equal in length and all angles are equal.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectRotate(CIMGeometricEffect):
    """
    Represents the rotate geometric effect which creates a dynamic
    line or polygon rotated a specified angle from the feature.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectScale(CIMGeometricEffect):
    """
    Represents the rotate geometric effect which creates a dynamic
    line or polygon scaled by a specified factor. Vertices are moved
    in relation to the center point of a feature envelope. Values greater
    than 1 move vertices away from the center point. Values between
    0 and 1 move vertices toward the center point. Values less than
    0 draw an inverse dynamic line or polygon where the vertices have
    crossed to the other side of the center point.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectSuppress(CIMGeometricEffect):
    """
    Represents the suppress geometric effect which creates a dynamic
    line that hides sections of a stroke between pairs control points.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectTaperedPolygon(CIMGeometricEffect):
    """
    Represents the tapered polygon geometric effect which creates a
    dynamic polygon along a line feature, whose width varies by two
    specified amounts along its length, as defined by a percentage
    of the line feature's length.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGeometricEffectWave(CIMGeometricEffect):
    """
    Represents the wave geometric effect which creates a dynamic line
    or polygon along a feature with a repeating wave pattern.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGradientFill(CIMFill):
    """
    Represents a gradient fill which fills polygonal geometry with
    a specified color scheme.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMHatchFill(CIMFill):
    """
    Represents a hatch fill which fills polygonal geometry with a uniform
    series of parallel line symbols.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMLineCallout(CIMCallout):
    """
    Represents a line callout.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarker(CIMSymbolLayer):
    """
    Represents a marker which is a self-contained shape or image that
    can draw for a point graphic or placed in a repeating arrangement
    along a stroke or within a fill. It can be a glyph from a font,
    a picture, a collection of vector geometries, or a 3D model.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarker3D(CIMMarker):
    """
    Represents a 3D marker which consists of one or more ShapeGraphics
    contained within one or more ShapeLODs.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerFillPlacement(CIMMarkerPlacement):
    """
    Represents a marker fill placement.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacementAroundPolygon(CIMMarkerFillPlacement):
    """
    Represents marker placement around polygon which places a marker
    on a specific position on the polygon outline.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacementInsidePolygon(CIMMarkerFillPlacement):
    """
    Represents marker placement inside a polygon which defines how
    a polygon is filled with a pattern of markers.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacementPolygonCenter(CIMMarkerFillPlacement):
    """
    Represents marker placement polygon center which defines how a
    single marker will be placed within the polygon.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerStrokePlacement(CIMMarkerPlacement):
    """
    Represents a marker stroke placement.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMaterialSymbolLayer(CIMSymbolLayer):
    """
    Represents a material which defines how the multipatch or mesh
    is drawn.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMeshEdge(CIMSymbolLayer):
    """
    Represents a stroke drawn at specified edges of a mesh.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMultiLayerSymbol(CIMSymbol):
    """
    Represents a multilayer symbol, a generic type for point, line,
    and polygon symbols, specifying that they can contain more than
    one symbol layers.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMObjectMarker3D(CIMMarker):
    """
    Represents a marker symbol for 3D objects.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMPictureFill(CIMFill):
    """
    Represents a picture fill which fills polygonal geometry with a
    picture. Supported file types are .bmp, .jpg, .png, and .gif.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMPictureMarker(CIMMarker):
    """
    Represents a picture marker created from a raster (bitmapped) image
    file. The image can have color substitutions to replace one or
    more colors in the image or it can have a tint applied to the whole
    image depending on the picture type. Supported formats are .bmp,
    .jpg, .png, and .gif.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMPointSymbol(CIMMultiLayerSymbol):
    """
    Represents a point symbol used to draw point features and point
    graphics.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMPointSymbolCallout(CIMLineCallout):
    """
    Represents a point symbol callout which draws a point symbol as
    the background and a line symbol for leaders. Often used for highway
    shields.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMPolygonSymbol(CIMMultiLayerSymbol):
    """
    Represents a polygon symbol which is used to draw polygon features
    or polygon graphics.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMProceduralSymbolLayer(CIMSymbolLayer):
    """
    Represents a procedural symbol layer which defines rendering using
    script-based logic to construct complex 3D objects and textures
    from simple geometries. Properties of the symbol are derived from
    a rule package (.rpk file).
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMSimpleLineCallout(CIMCallout):
    """
    Represents a simple line callout for drawing basic leader lines.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMSolidFill(CIMFill):
    """
    Represents a solid fill which fills polygonal geometry with a single
    solid color.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMSolidMeshEdge(CIMMeshEdge):
    def __init__(self, *args, **Kwargs) -> None: ...

class CIMStroke(CIMSymbolLayer):
    """
    Represents a stroke which defines how line geometry or the outline
    of polygon geometry is drawn.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMTextSymbol(CIMSymbol):
    """
    Represents a text symbol which is used to draw text graphics, bleeds,
    and annotation. Text symbols do not contain any symbol layers but
    can have callouts.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMVectorMarker(CIMMarker):
    """
    Represents a vector marker which can represent vector graphics.
    It's constructed from MarkerGraphics which are geometries and symbols
    used as building blocks for the marker.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMWaterFill(CIMFill):
    """
    Represents a water fill which fills polygonal geometry with animated
    water.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMglTFMarker3D(CIMMarker):
    """
    Represents a marker symbol for 3D objects.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMBackgroundCallout(CIMLineCallout):
    """
    Represents a background callout which draws a callout with an optional
    polygon background and leader line.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMCharacterMarker(CIMMarker):
    """
    Represents a character marker.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMChartMarker(CIMMarker):
    """
    Represents a chart marker, a marker used to display a chart.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMGradientStroke(CIMStroke):
    """
    Represents a gradient stroke which draws linear geometry with a
    specified color scheme.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMLineSymbol(CIMMultiLayerSymbol):
    """
    Represents a line symbol which is used to draw polyline features
    or graphics.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacementAlongLine(CIMMarkerStrokePlacement):
    """
    Represents marker placement along the line which defines how a
    marker is placed along a line or polygon outline.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacementAlongLineRandomSize(CIMMarkerPlacementAlongLine):
    """
    Represents marker placement along the line which places randomly
    sized markers evenly along a line or polygon outline.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacementAlongLineSameSize(CIMMarkerPlacementAlongLine):
    """
    Represents marker placement along the line which places markers
    that are the same size evenly along a line or polygon outline.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacementAlongLineVariableSize(CIMMarkerStrokePlacement):
    """
    Represents marker placement along the line which places markers
    in either increasing, decreasing or alternating gradations along
    a line or polygon outline.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacementAtExtremities(CIMMarkerStrokePlacement):
    """
    Represents marker placement at extremities which places markers
    at only one or both endpoints of a line.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacementAtMeasuredUnits(CIMMarkerStrokePlacement):
    """
    Represents marker placement at geometry M values.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacementAtRatioPositions(CIMMarkerStrokePlacement):
    """
    Represents marker placement at ratio positions which places a set
    number of markers along the line or the outline of a polygon.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacementOnLine(CIMMarkerStrokePlacement):
    """
    Represents a marker placement on the line.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMarkerPlacementOnVertices(CIMMarkerStrokePlacement):
    """
    Represents a marker placement on vertices which places a single
    marker on a line or polygon outline at a set distance from the
    middle or one of the endpoints.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMMeshSymbol(CIMMultiLayerSymbol):
    """
    Represents a mesh symbol which is used to draw multipatch features
    or mesh features.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMPictureStroke(CIMStroke):
    """
    Represents a picture stroke which draws linear geometry with a
    repeating image file. Supported file types are .bmp, .jpg, .png,
    and .gif.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMPieChartMarker(CIMChartMarker):
    """
    Represents a pie chart marker which is a marker that draws numeric
    values arranged in a circle.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMSolidStroke(CIMStroke):
    """
    Represents a solid stroke which draws linear geometry with a single
    solid color.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMStackedBarChartMarker(CIMChartMarker):
    """
    Represents a stacked bar chart marker which is a chart made of
    vertical stacked bars displaying values.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMBarChartMarker(CIMChartMarker):
    """
    Represents a bar chart marker, a chart made of vertical bars displaying
    values.
    """

    def __init__(self, *args, **Kwargs) -> None: ...
