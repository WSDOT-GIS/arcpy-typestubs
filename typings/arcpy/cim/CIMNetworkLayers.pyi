"""
This type stub file was generated by pyright.
"""

from .CIMEnum import *
from .CIMExternal import *
from .CIMVectorLayers import CIMDataConnection
from .CIMLayer import CIMBaseLayer

class CIMNALocatorOverrideClass:
    """
    Represents locator settings for a particular class.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMNetworkAttributeParameterDefinitionValue:
    """
    Provides access to read or update the value assigned to a network
    parameter of a network attribute.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMNetworkDatasetRenderer:
    """
    Represents a network dataset renderer.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMNetworkSourceDisplayFilter:
    """
    Represents a network source display filter.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMNetworkTraceConfiguration:
    """
    Represents a Trace Configuration.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMNetworkTravelModeDefinition:
    """
    The network travel mode is used to configure a group of cost, traversability,
    and other analysis configurations.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMNetworkTravelModeDefinitionContext:
    """
    Specifies the travel mode travel mode to be applied. Depending
    on the SourceType, some properties are conditionally required to
    indicate the travel mode.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMRestrictionStatusSymbolClass:
    """
    Restriction status, label, and symbol.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMTraversableDirectionsAdornerPointSymbolClass:
    """
    Traversable directions, label, and adorner point symbol.
      /// The applicable adorner point symbol is oriented and added
    to the restriction status symbol when drawn to indicate the directional
    traversability of network elements.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMInMemoryDatasetDataConnection(CIMDataConnection):
    """
    Represents an in-memory dataset data connection.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMInMemoryWorkspaceDataConnection(CIMDataConnection):
    """
    Represents an in-memory workspace data connection.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMNALayer(CIMBaseLayer):
    """
    Represents a network analysis layer.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMNetworkDatasetLayer(CIMBaseLayer):
    """
    Represents a network dataset layer.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMTraceNetworkLayer(CIMBaseLayer):
    """
    Represents a trace network layer.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMUtilityNetworkLayer(CIMBaseLayer):
    """
    Represents a utility network layer.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMNetworkDatasetElementCompositeRenderer(CIMNetworkDatasetRenderer):
    """
    Represents a network dataset element composite renderer.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMNetworkDatasetSimpleRenderer(CIMNetworkDatasetRenderer):
    """
    Represents a network dataset simple renderer.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMNetworkDatasetTrafficRenderer(CIMNetworkDatasetRenderer):
    """
    Represents a network dataset traffic renderer.
    """

    def __init__(self, *args, **Kwargs) -> None: ...

class CIMRestrictionStatusRenderer(CIMNetworkDatasetRenderer):
    """
    Represents a renderer that shows the restriction status of network
    elements.
    """

    def __init__(self, *args, **Kwargs) -> None: ...
