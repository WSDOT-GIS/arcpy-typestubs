"""
This type stub file was generated by pyright.
"""

from arcpy.geoprocessing._base import gptooldoc

r"""The ArcGIS Indoors toolbox contains tools for adding datasets, feature
classes, tables, and configurations to host ArcGIS Indoors data in a
geodatabase."""
__all__ = ['ClassifyIndoorPathways', 'ConfigureIndoorPositioning', 'CreateIndoor3DDataset', 'CreateIndoorDataset', 'CreateIndoorNetworkDataset', 'CreateIndoorsDatabase', 'GenerateFacilityEntryways', 'GenerateFloorTransitions', 'GenerateIndoorPathways', 'GenerateOccupantFeatures', 'GenerateUnitOpenings', 'ImportBIMToIndoorDataset', 'ImportFloorplansToIndoorsGDB', 'ThinIndoorPathways', 'UpdateOccupantFeatures']
__alias__ = ...
@gptooldoc('ConfigureIndoorPositioning_indoors', None)
def ConfigureIndoorPositioning(in_geodatabase=..., encryption_key=..., api_key=..., building_id=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ConfigureIndoorPositioning_indoors(in_geodatabase, encryption_key, api_key, building_id)

        Writes indoor positioning system configuration information to an
        ArcGIS Indoors geodatabase. The values are used by ArcGIS Indoors for
        iOS and ArcGIS Indoors for Android.

     INPUTS:
      in_geodatabase (Workspace):
          The Indoors file or enterprise geodatabase for which IPS configuration
          information will be generated.
      encryption_key (String):
          The key used by the tool and Indoors mobile apps to encrypt or
          unencrypt the API Key parameter (api_key in Python) value.
      api_key (String):
          A unique value in the form of a GUID used by Indoors mobile apps to
          enable Indoo.rs indoor positioning. The API key is provided by
          Indoo.rs.
      building_id (String):
          A unique alphanumerical value used by Indoors mobile apps to link the
          site in the mobile map package to the Indoo.rs indoor positioning
          survey. The building ID is provided by Indoo.rs."""
    ...

@gptooldoc('CreateIndoor3DDataset_indoors', None)
def CreateIndoor3DDataset(target_gdb=..., indoor_dataset_name=..., spatial_reference=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateIndoor3DDataset_indoors(target_gdb, indoor_dataset_name, spatial_reference)

        Creates an indoor 3D dataset containing the necessary multipatch
        feature classes to maintain floor plan data using a streamlined schema
        that conforms to the ArcGIS Indoors Information Model. You can use
        these feature classes when preparing 3D scenes of floor plans and
        share them across your organization.

     INPUTS:
      target_gdb (Workspace):
          The target file or enterprise geodatabase that will contain the indoor
          3D dataset.
      indoor_dataset_name (String):
          The unique name assigned to the output indoor dataset. The default is
          Indoor3D. If a dataset with this name exists in the target
          geodatabase, the indoor 3D feature classes will be created in that
          dataset.
      spatial_reference (Spatial Reference):
          The horizontal and vertical coordinate system of the output indoor 3D
          dataset.You can specify the spatial reference in several ways
          including the
          following:

          * Reference a feature class or feature dataset with the spatial
          reference you want to apply, such as
          C:/workspace/myproject.gdb/indoors/details.

          * Define a SpatialReference object. You can define the
          spatial reference object using either of the following:

          * sr = arcpy.SpatialReference(3857, 115700)
          Factory codes, for example:

          * sr = arcpy.SpatialReference("WGS 1984 Web Mercator
          (auxiliary sphere)", "WGS 1984")            Names, for example:

          * Use the well-known text (WKT) string of a spatial reference. One way
          to determine the WKT for a spatial reference is to export the spatial
          reference as a string, for example, arcpy.SpatialReference(3857,
          115700).exportToString()."""
    ...

@gptooldoc('CreateIndoorDataset_indoors', None)
def CreateIndoorDataset(target_gdb=..., indoor_dataset_name=..., spatial_reference=..., create_attribute_rules=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateIndoorDataset_indoors(target_gdb, indoor_dataset_name, spatial_reference, {create_attribute_rules})

        Creates an indoor dataset containing the necessary feature classes to
        maintain floor plan data using a streamlined schema that conforms to
        the ArcGIS Indoors Information Model.

     INPUTS:
      target_gdb (Workspace):
          The target file or enterprise geodatabase that will contain the output
          indoor dataset.
      indoor_dataset_name (String):
          The unique name of the output indoor dataset. The default is Indoor.
      spatial_reference (Spatial Reference):
          The horizontal and vertical coordinate system of the output
          indoor dataset. You can specify the spatial reference in several ways,
          including the following:

          * Reference a feature class or feature dataset with the spatial
          reference you want to apply, such as
          C:/workspace/myproject.gdb/indoors/details.

          * Define a SpatialReference object. You can define the
          spatial reference object using either of the following:

          * sr = arcpy.SpatialReference(3857, 115700)
          Factory codes, for example:

          * sr = arcpy.SpatialReference("WGS 1984 Web Mercator
          (auxiliary sphere)", "WGS 1984")             Names, for example:

          * Use the well-known text (WKT) string of a spatial reference. One way
          to determine the WKT for a spatial reference is to export the spatial
          reference as a string, for example, arcpy.SpatialReference(3857,
          115700).exportToString().
      create_attribute_rules {Boolean}:
          Specifies whether attribute rules and the associated fields and error
          datasets will be created in the Indoors database. These attribute
          rules include validation checks to use in quality control workflows
          for floor plan data. The target geodatabase must be a file geodatabase
          or an enterprise geodatabase configured for branch versioning.

          * CREATE_RULES-Attribute rules and error layers will be created. This
          is the default.

          * NO_CREATE_RULES-Attribute rules and error layers will not be
          created."""
    ...

@gptooldoc('CreateIndoorsDatabase_indoors', None)
def CreateIndoorsDatabase(target_gdb=..., create_network=..., spatial_reference=..., create_attribute_rules=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateIndoorsDatabase_indoors(target_gdb, {create_network}, {spatial_reference}, {create_attribute_rules})

        Creates an Indoors geodatabase that conforms to the ArcGIS Indoors
        Information Model and contains the feature classes, fields, and tables
        required for maintaining indoor data for floor plan mapping, routing,
        space planning, and workspace reservations.

     INPUTS:
      target_gdb (Workspace):
          The geodatabase that will contain the ArcGIS Indoors Information Model
          to manage indoor GIS information for use with Indoors apps.
      create_network {Boolean}:
          Specifies whether a network dataset containing the indoor
          transportation network feature classes-Landmarks, Pathways, and Floor
          Transitions-will be created in the Indoors database.

          * CREATE_NETWORK-A network dataset and feature classes will be
          created. This is the default.

          * NO_CREATE_NETWORK-A network dataset and feature classes will not be
          created.
      spatial_reference {Spatial Reference}:
          The spatial reference of the output Indoors database. If no
          spatial reference is set, the output Indoors database will use WGS84
          Web Mercator (auxiliary sphere) as the horizontal coordinate system
          and WGS84 as the vertical coordinate system. You can specify the
          spatial reference in several ways, including the following:

          * Reference a feature class or feature dataset with the spatial
          reference you want to apply, such as
          C:/workspace/myproject.gdb/indoors/details.

          * Define a SpatialReference object. You can define the
          spatial reference object using either of the following:

          * sr = arcpy.SpatialReference(3857, 115700)
          Factory codes, for example:

          * sr = arcpy.SpatialReference("WGS 1984 Web Mercator
          (auxiliary sphere)", "WGS 1984")             Names, for example:

          * Use the well-known text (WKT) string of a spatial reference. One way
          to determine the WKT for a spatial reference is to export the spatial
          reference as a string, for example, arcpy.SpatialReference(3857,
          115700).exportToString().
      create_attribute_rules {Boolean}:
          Specifies whether attribute rules and the associated fields and error
          datasets will be created in the Indoors database. These attribute
          rules include validation checks to use in quality control workflows
          for floor plan data. The target geodatabase must be a file geodatabase
          or an enterprise geodatabase configured for branch versioning.

          * CREATE_RULES-Attribute rules and error layers will be created. This
          is the default.

          * NO_CREATE_RULES-Attribute rules and error layers will not be
          created."""
    ...

@gptooldoc('GenerateOccupantFeatures_indoors', None)
def GenerateOccupantFeatures(in_unit_features=..., unit_id_field=..., in_occupant_table=..., occupant_id_field=..., out_occupant_feature_class=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateOccupantFeatures_indoors(in_unit_features, unit_id_field, in_occupant_table, occupant_id_field, out_occupant_feature_class)

        Creates or updates employee or occupant point data that conforms to
        the ArcGIS Indoors Information Model.

     INPUTS:
      in_unit_features (Feature Layer):
          The input polygon features representing building spaces that may be
          occupied. In the ArcGIS Indoors Information Model, this is the Units
          layer. The centroid of each space will be used as the point location
          of the occupant or occupants.
      unit_id_field (Field):
          The field in the in_unit_features parameter values that will be used
          as the primary key to associate building spaces with records in the
          in_occupant_table parameter value.
      in_occupant_table (Table View):
          The input table that contains information about building occupants.The
          information can be stored in a geodatabase table, a sheet in an
          Excel workbook (.xls or .xlsx file), or a .csv file.
      occupant_id_field (Field):
          The field in the in_occupant_table parameter value that will be used
          as the primary key to associate occupants with in_unit_features
          parameter values.

     OUTPUTS:
      out_occupant_feature_class (Feature Class):
          The output feature class created from joining the in_unit_features and
          in_occupant_table parameter values."""
    ...

@gptooldoc('GenerateUnitOpenings_indoors', None)
def GenerateUnitOpenings(in_unit_features=..., in_detail_features=..., door_detail_expression=..., wall_detail_expression=..., target_openings=..., wall_thickness_tolerance=..., delete_existing_openings=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateUnitOpenings_indoors(in_unit_features, in_detail_features, door_detail_expression, wall_detail_expression, target_openings, {wall_thickness_tolerance}, {delete_existing_openings})

        Creates unit openings as line features that model the location and
        physical extent of an entrance.

     INPUTS:
      in_unit_features (Feature Layer):
          The input polygon features representing unit footprints for one or
          more facilities. In the Indoors model, this is the Units layer. The
          tool only processes the levels that contain the selected features.
      in_detail_features (Feature Layer):
          The input polyline features representing the architectural detail
          polylines.
      door_detail_expression (SQL Expression):
          An SQL expression used to identify which detail polylines represent
          doors.
      wall_detail_expression (SQL Expression):
          An SQL expression used to identify which detail polylines represent
          walls.
      target_openings (Feature Layer):
          The existing polyline feature class or feature layer to which
          generated polylines will be written. In the Indoors model this is the
          Details layer.
      wall_thickness_tolerance {Linear Unit}:
          The distance that will be searched inward and outward from the edge of
          a unit feature to find a door feature. The default unit of measurement
          is feet. The default value is 2 feet but can range from 0 to 6 feet.
      delete_existing_openings {Boolean}:
          Specifies whether existing opening features with a USE_TYPE field
          value of Opening will be deleted before creating new opening features.
          If deleted, existing openings will be replaced with new openings if
          they are at the same location.

          * DELETE_EXISTING-Existing openings will be deleted.

          * KEEP_EXISTING-Existing openings will not be deleted. This is the
          default."""
    ...

@gptooldoc('ImportBIMToIndoorDataset_indoors', None)
def ImportBIMToIndoorDataset(in_bim_floorplan_layer=..., target_unit_features=..., target_detail_features=..., target_level_features=..., target_facility_features=..., facility_id=..., facility_name=..., ground_floor_name=..., floorplan_polygon_use_type_field=..., floors_to_import=..., area_unit_of_measure=..., in_bim_rooms_layer=..., room_properties_mapping=..., allow_insert_new_facility=..., design_options=..., target_unit3d_features=..., target_detail3d_features=..., target_facility3d_features=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ImportBIMToIndoorDataset_indoors(in_bim_floorplan_layer, target_unit_features, target_detail_features, target_level_features, target_facility_features, facility_id, facility_name, ground_floor_name, {floorplan_polygon_use_type_field}, {floors_to_import;floors_to_import...}, {area_unit_of_measure}, {in_bim_rooms_layer}, {room_properties_mapping}, {allow_insert_new_facility}, {design_options;design_options...}, {target_unit3d_features}, {target_detail3d_features}, {target_facility3d_features})

        Imports features from a BIM file into an indoor dataset that conforms
        to the ArcGIS Indoors Information Model. The output of this tool can
        be used to create floor-aware maps and scenes, as well as to generate
        an indoor network for routing.

     INPUTS:
      in_bim_floorplan_layer (Polygon):
          The Floorplan_Polygon feature layer from the source BIM file that has
          been added to the current map.
      target_unit_features (Feature Layer):
          The target Units feature layer, feature class, or feature service that
          conforms to the ArcGIS Indoors Information Model and resides in the
          same workspace as the target Facilities, Levels, and Details features.
      target_detail_features (Feature Layer):
          The target Details feature layer, feature class, or feature service
          that conforms to the ArcGIS Indoors Information Model and resides in
          the same workspace as the target Facilities, Levels, and Units
          features.
      target_level_features (Feature Layer):
          The target Levels feature layer, feature class, or feature service
          that conforms to the ArcGIS Indoors Information Model and resides in
          the same workspace as the target Facilities, Units, and Details
          features.
      target_facility_features (Feature Layer):
          The target Facilities feature layer, feature class, or feature service
          that conforms to the ArcGIS Indoors Information Model and resides in
          the same workspace as the target Levels, Units, and Details features.
      facility_id (String):
          The unique facility ID that will be assigned to the output Indoors
          features. The facility ID cannot contain spaces.
      facility_name (String):
          The common name of the building.
      ground_floor_name (String):
          The ground floor of the building. The vertical order of the levels is
          derived from this input. Any levels with an elevation that is less
          than the specified ground floor will be assigned a negative vertical
          order.
      floorplan_polygon_use_type_field {String}:
          The field from the Floorplan_Polygon feature layer that will be used
          to populate the USE_TYPE field for the target unit features. If no
          field is provided, the RoomName field value from the Floorplan_Polygon
          layer will be used.
      floors_to_import {String}:
          The floors in the input BIM file that will be imported to the target
          features. If no floors are provided, all floors will be imported.
      area_unit_of_measure {String}:
          Specifies the unit of measure that will be used for the area fields in
          the Levels and Units feature classes.

          * SQUARE_METERS-The area unit will be square meters.

          * SQUARE_FEET-The area unit will be square feet. This is the default.
      in_bim_rooms_layer {Feature Layer}:
          The Rooms layer from the Architectural dataset in the input BIM file.
          This layer will be used to obtain extended field values that can be
          mapped to existing fields in the Units feature class using the Room
          Properties Mapping parameter.
      room_properties_mapping {Field Mappings}:
          Controls which attribute fields in the Units feature class will be
          populated with field values from the input BIM Rooms layer. The fields
          must exist before running the tool. It is recommended that you map
          fields from the input BIM Rooms layer to fields from the Units feature
          class that have the same field type.
      allow_insert_new_facility {Boolean}:
          Specifies whether a building from the input BIM file will be imported
          if an intersection is detected between that building's floor plan and
          an existing Facilities feature in the target facility features.

          * NO_ALLOW_INSERT_NEW_FACILITY-The tool tests whether the input BIM
          floorplan polygon intersects any existing facility polygon in the
          target facility features. If an intersection is detected, the tool
          checks whether the specified facility_id and facility_name parameter
          values match the FACILITY_ID and NAME field values of the intersecting
          Facilities feature. If the values match, the tool updates the existing
          facility. If the values do not match, the tool issues a message and
          stops running. This is the default.

          * ALLOW_INSERT_NEW_FACILITY-The tool does not test whether the input
          BIM floorplan polygon intersects any existing facility polygon in the
          target facility features. You can use this option to import a building
          that overlaps or touches an existing facility.
      design_options {String}:
          The Revit design options in the input BIM file that will be included
          when importing features. If no value is specified, only the main model
          will be imported. This parameter is enabled when the input BIM file
          includes Revit design options.
      target_unit3d_features {Feature Layer}:
          The target 3D Units feature layer, feature class, or feature service
          that conforms to the ArcGIS Indoors Information Model and resides in
          the same workspace as the target 3D Details and target 3D Facilities
          features. Multipatch unit features will be created in the target 3D
          units layer that represent the base of each room in the input BIM
          file.
      target_detail3d_features {Feature Layer}:
          The target 3D Details feature layer, feature class, or feature service
          that conforms to the ArcGIS Indoors Information Model and resides in
          the same workspace as the target 3D Units and target 3D Facilities
          features. Multipatch detail features will be created in the target 3D
          details layer from the following categories in the input BIM file:
          Doors, Ramps, Stairs, Stair supports, Stair Landings, Columns,
          Structural Columns, Walls, Windows, Cornices, and Curtain Wall Panels.
      target_facility3d_features {Feature Layer}:
          The target 3D Facilities feature layer, feature class, or feature
          service that conforms to the ArcGIS Indoors Information Model and
          resides in the same workspace as the target 3D Units and target 3D
          Details features. A multipatch facility feature will be created in the
          target 3Dfacilities layer from the ExteriorShell category in the input
          BIM file."""
    ...

@gptooldoc('ImportFloorplansToIndoorsGDB_indoors', None)
def ImportFloorplansToIndoorsGDB(target_unit_features=..., target_detail_features=..., target_level_features=..., target_facility_features=..., in_excel_template=..., uniqueid_delimiter=..., sliver_threshold=..., door_close_buffer=..., area_unit_of_measure=..., measurement_mode=..., target_section_features=..., target_zone_features=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ImportFloorplansToIndoorsGDB_indoors(target_unit_features, target_detail_features, target_level_features, target_facility_features, in_excel_template, uniqueid_delimiter, {sliver_threshold}, {door_close_buffer}, {area_unit_of_measure}, {measurement_mode}, {target_section_features}, {target_zone_features})

        Imports floor plans from CAD files into an Indoors workspace that
        conforms to the ArcGIS Indoors Information Model. The output of this
        tool can be used to create floor-aware maps and scenes for use in
        floor-aware apps, as well as to generate an indoor network for
        routing.

     INPUTS:
      target_unit_features (Feature Layer):
          The target Units feature layer, feature class, or feature service that
          conforms to the ArcGIS Indoors Information Model and resides in the
          same workspace as the target Facilities, Levels, and Details features.
      target_detail_features (Feature Layer):
          The target Details feature layer, feature class, or feature service
          that conforms to the ArcGIS Indoors Information Model and resides in
          the same workspace as the target Facilities, Levels, and Units
          features.
      target_level_features (Feature Layer):
          The target Levels feature layer, feature class, or feature service
          that conforms to the ArcGIS Indoors Information Model and resides in
          the same workspace as the target Facilities, Units, and Details
          features.
      target_facility_features (Feature Layer):
          The target Facilities feature layer, feature class, or feature service
          that conforms to the ArcGIS Indoors Information Model and resides in
          the same workspace as the target Levels, Units, and Details features.
      in_excel_template (File):
          An Excel spreadsheet (.xls or .xlsx file) that contains input and
          configuration parameters.
      uniqueid_delimiter (String):
          Specifies the delimiter that will separate key values in the Indoors
          model hierarchy.

          * PERIOD-The ID will include key values separated by periods. This is
          default.

          * HYPHEN-The ID will include key values separated by hyphens.

          * UNDERSCORE-The ID will include key values separated by underscores.
      sliver_threshold {Long}:
          The ratio of perimeter to area that defines a sliver polygon. It is
          used when importing Unit polygons to improve the quality of the
          imported data. Unit polygons that are determined to be slivers are
          placed in a review geodatabase located in the scratch folder of the
          ArcGIS Pro project. The default value is 2.
      door_close_buffer {Double}:
          The distance, in inches, the tool will search from a door to find and
          snap to the nearest wall. This parameter is used when the CLOSE_DOORS
          column is set to Y in the input Excel template file. The default value
          is 0.
      area_unit_of_measure {String}:
          Specifies the unit of measure that will be used to calculate area for
          the area fields when importing floor plans.

          * SQUARE_FEET-Area will be defined in square feet. This is default.

          * SQUARE_METERS-Area will be defined in square meters.
      measurement_mode {String}:
          Specifies the measurement mode that will be used to calculate the area
          fields when importing floor plans.

          * GEODESIC-Area will be calculated using geodesic distance. Geodesic
          distance is calculated in a 3D spherical space as the distance across
          the curved surface of the world. This is default.

          * PLANAR-Area will be calculated using planar distance. Planar
          distance is straight-line Euclidean distance calculated in a 2D
          Cartesian coordinate system.
      target_section_features {Feature Layer}:
          The target Sections feature layer, feature class, or feature service
          that conforms to the ArcGIS Indoors Information Model and resides in
          the same workspace as the target Facilities, Levels, Units, and
          Details features.
      target_zone_features {Feature Layer}:
          The target Zones feature layer, feature class, or feature service that
          conforms to the ArcGIS Indoors Information Model and resides in the
          same workspace as the target Facilities, Levels, Units, and Details
          features."""
    ...

@gptooldoc('UpdateOccupantFeatures_indoors', None)
def UpdateOccupantFeatures(target_occupant_features=..., in_unit_features=..., in_occupant_table=..., occupant_id_from_target_occupant_features=..., occupant_id_from_input_table=..., unit_id_from_units_features=..., unit_id_from_input_table=..., occupant_attributes_mapping=..., allow_insert=..., allow_delete=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """UpdateOccupantFeatures_indoors(target_occupant_features, {in_unit_features}, {in_occupant_table}, {occupant_id_from_target_occupant_features}, {occupant_id_from_input_table}, {unit_id_from_units_features}, {unit_id_from_input_table;unit_id_from_input_table...}, {occupant_attributes_mapping}, {allow_insert}, {allow_delete})

        Updates the Occupants feature class that conforms to the ArcGIS
        Indoors Information Model.

     INPUTS:
      target_occupant_features (Feature Layer):
          The target feature layer, feature class, or feature service to which
          occupant records will be added, updated, or deleted. The input must
          contain unique values that identify each occupant and must conform to
          the Occupants feature class in the Indoors model.
      in_unit_features {Feature Layer}:
          The input polygon features representing building spaces that may be
          occupied. In the ArcGIS Indoors Information Model, this is the Units
          layer. The centroid of each space will be used as the point location
          of the occupant or occupants.
      in_occupant_table {Table View}:
          The input table that contains information about building occupants.The
          information can be stored in a geodatabase table, a sheet in an
          Excel workbook (.xls or .xlsx file), or a .csv file.
      occupant_id_from_target_occupant_features {Field}:
          The field in the target_occupant_features parameter value that will be
          used as the primary key to associate occupants with the
          in_occupant_table parameter values. The field values must be unique.
      occupant_id_from_input_table {Field}:
          The field in the in_occupant_table parameter value that will be used
          as the primary key to associate occupants with the
          target_occupant_features parameter values. The field values must be
          unique.
      unit_id_from_units_features {Field}:
          The field in the in_units_features parameter value that stores the
          unique space identification information that will match the unit
          identifier from the in_occupant_table parameter value. The field
          values must be unique.
      unit_id_from_input_table {Field}:
          The field in the in_occupant_table parameter value that will be used
          as the primary key to associate occupant space assignment with the
          in_units_features parameter values. If a field value is empty, the
          occupant will be loaded as unassigned.
      occupant_attributes_mapping {Field Mappings}:
          The attribute fields in the target_occupant_features parameter value
          that will be populated with field values from the in_occupant_table
          parameter value. The fields must exist in the target_occupant_features
          parameter value before running the tool. It is recommended that you
          map fields from the in_occupant_table parameter value to fields from
          the target_occupant_features parameter value that have the same field
          type.
      allow_insert {Boolean}:
          Specifies whether unique occupant records for the in_occupant_table
          parameter value will be added to the target occupant features layer.

          * INSERT_OCCUPANTS-Unmatched occupant records will be added to the
          target occupant features layer. This is the default.

          * NO_INSERT_OCCUPANTS-Unmatched occupant records will not be added to
          the target occupant features layer.
      allow_delete {Boolean}:
          Specifies whether unique occupant records for the in_occupant_table
          parameter value will be deleted from the target occupant features
          layer.

          * DELETE_OCCUPANTS-Unmatched occupant records will be deleted from the
          target occupant features layer. This is the default.

          * NO_DELETE_OCCUPANTS-Unmatched occupant records will not be deleted
          from the target occupant features layer."""
    ...

@gptooldoc('ClassifyIndoorPathways_indoors', None)
def ClassifyIndoorPathways(in_unit_features=..., target_pathways=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ClassifyIndoorPathways_indoors(in_unit_features, target_pathways)

        Classifies pathways that pass through selected unit spaces, such as
        conference rooms or service areas, as lower priority.

     INPUTS:
      in_unit_features (Feature Layer):
          The input polygon features representing spaces in a building for which
          the Target Pathways parameter values will be classified. In the ArcGIS
          Indoors Information Model, this is the Units layer. Select features in
          the units layer before running the tool.
      target_pathways (Feature Layer):
          The existing feature class or feature layer in which pathways will be
          updated. In the Indoors model, this is the Pathways layer."""
    ...

@gptooldoc('CreateIndoorNetworkDataset_indoors', None)
def CreateIndoorNetworkDataset(target_gdb=..., indoor_network_dataset_name=..., spatial_reference=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateIndoorNetworkDataset_indoors(target_gdb, indoor_network_dataset_name, spatial_reference)

        Creates an indoor network dataset containing the necessary feature
        classes to maintain indoor network data using a streamlined schema
        that conforms to the ArcGIS Indoors Information Model. The indoor
        network dataset can be used to support indoor routable networks.

     INPUTS:
      target_gdb (Workspace):
          The target file or enterprise geodatabase that will contain the output
          indoor network dataset.
      indoor_network_dataset_name (String):
          The unique name of the output indoor network dataset. This name is
          also used for the preliminary indoor network dataset. The default name
          for the indoor network dataset is IndoorNetwork. The default name for
          the preliminary indoor network dataset is PrelimIndoorNetwork.
      spatial_reference (Spatial Reference):
          The spatial reference of the output indoor network dataset.
          You can specify the spatial reference in several ways, including the
          following:

          * Reference a feature class or feature dataset with the spatial
          reference you want to apply, such as
          C:/workspace/myproject.gdb/indoors/details.

          * Define a SpatialReference object. You can define the
          spatial reference object using either of the following:

          * sr = arcpy.SpatialReference(3857, 115700)
          Factory codes, for example:

          * sr = arcpy.SpatialReference("WGS 1984 Web Mercator
          (auxiliary sphere)", "WGS 1984")             Names, for example:

          * Use the well-known text (WKT) string of a spatial reference. One way
          to determine the WKT for a spatial reference is to export the spatial
          reference as a string, for example, arcpy.SpatialReference(3857,
          115700).exportToString()."""
    ...

@gptooldoc('GenerateFacilityEntryways_indoors', None)
def GenerateFacilityEntryways(in_level_features=..., in_unit_features=..., in_door_features=..., target_entryways=..., buffer_size=..., entryway_use_type=..., exterior_unit_exp=..., delete_existing_entryways=..., level_id_field=..., use_type_field=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateFacilityEntryways_indoors(in_level_features, in_unit_features, in_door_features, target_entryways, {buffer_size}, {entryway_use_type}, {exterior_unit_exp}, {delete_existing_entryways}, {level_id_field}, {use_type_field})

        Creates or updates points representing a facility's entry or exit
        locations.

     INPUTS:
      in_level_features (Feature Layer):
          The input polygon features representing a level or levels in one or
          more facilities. In the Indoors model, this is the Levels layer. Only
          the levels represented by these features will be processed.
      in_unit_features (Feature Layer):
          The input polygon features representing building spaces. In the
          Indoors model, this is the Units layer. The tool will use these
          features when identifying exterior edges of a facility.
      in_door_features (Feature Layer):
          The input polyline features representing doors. In the Indoors
          model, this is a subset of features from the Details layer. The tool
          will use these features when identifying entryways along the exterior
          of a facility. The layer must have one or more door features
          selected for the tool to
          run. Use the Select Layer By Attribute tool to make a selection.
      target_entryways (Feature Layer):
          The feature class or feature layer to which generated entryway points
          will be written.
      buffer_size {Double}:
          The distance, in meters, the tool will search inward and outward from
          a facility's exterior edge to identify potential entryways. The value
          must be greater than 0 and less than 10. The default value is 0.5.
      entryway_use_type {String}:
          The value that will be used to calculate the USE_TYPE field for new
          entryway points. The default value is Entry.
      exterior_unit_exp {SQL Expression}:
          An SQL expression used to define which Input Unit Features values
          represent a facility's exterior spaces, such as patios or fire
          escapes. Spaces matching this expression will be treated as exterior
          features during entryway generation.
      delete_existing_entryways {Boolean}:
          Specifies whether existing entryway features with a USE_TYPE field
          value matching the entryway_use_type parameter value will be deleted
          before creating new entryway points. When deleting existing entryways,
          the tool only identifies entryways on levels included in the
          in_level_features parameter.

          * DELETE_FEATURES-Existing features will be deleted.

          * NO_DELETE_FEATURES-Existing features will not be deleted. This is
          the default.
      level_id_field {Field}:
          The field that will be updated with the associated level ID for the
          new entryway features. If the in_level_features parameter value is a
          floor-aware layer, this parameter will default to the layer's
          configured Floor Field value. Otherwise, the parameter will default to
          the LEVEL_ID field. If the defined field does not exist in the
          target_entryways feature layer, a field with the supplied name will be
          created and populated with the level ID field values.
      use_type_field {Field}:
          The field that will be updated with the entryway_use_type value for
          the new entryway features. The default is the USE_TYPE field. If the
          defined field does not exist in the target_entryways feature layer, a
          field with the supplied name will be created and populated with the
          entryway_use_type value."""
    ...

@gptooldoc('GenerateFloorTransitions_indoors', None)
def GenerateFloorTransitions(facility_features=..., transition_unit_features=..., pathway_features=..., target_transitions=..., elevator_delay=..., delete_existing_transitions=..., stairway_unit_exp=..., elevator_unit_exp=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateFloorTransitions_indoors(facility_features, transition_unit_features, pathway_features, target_transitions, {elevator_delay}, {delete_existing_transitions}, {stairway_unit_exp}, {elevator_unit_exp})

        Creates or updates transition line features that connect floors
        vertically.

     INPUTS:
      facility_features (Feature Layer):
          The input polygon features representing a facility or facilities. In
          the Indoors model, this is the Facilities layer. Only the facilities
          represented by these features will be processed.
      transition_unit_features (Feature Layer):
          The input polygon features representing the transition spaces in a
          facility. In the Indoors model, this is the Units layer.
      pathway_features (Feature Layer):
          The input polyline features representing preliminary pathways. The new
          transition features will snap to these polyline features. In the
          Indoors model, this is the PrelimPathways layer.
      target_transitions (Feature Layer):
          An existing feature class or layer that will be updated with the new
          transitions. In the Indoors model, this is the PrelimTransitions
          layer.
      elevator_delay {Long}:
          The average elevator transit time. It is one-half the time in seconds
          that an elevator passenger can expect to spend waiting to enter and
          exit the elevator. Using this parameter can improve routing and
          transit time calculations. The value must be equal to or greater than
          zero.
      delete_existing_transitions {Boolean}:
          Specifies whether existing transition features in selected transition
          spaces will be deleted before creating new transition features. If
          this parameter is not used, the updated_transitions value will include
          both existing and newly created transition features.

          * DELETE_FEATURES-Existing transition features will be deleted. This
          is the default.

          * NO_DELETE_FEATURES-Existing transition features will not be deleted.
      stairway_unit_exp {SQL Expression}:
          An SQL expression used to define which Transition Unit Features values
          represent step-based transitions, such as stairs and escalators.
      elevator_unit_exp {SQL Expression}:
          An SQL expression used to define which Transition Unit Features values
          represent lift-based transitions, such as elevators."""
    ...

@gptooldoc('GenerateIndoorPathways_indoors', None)
def GenerateIndoorPathways(in_level_features=..., in_detail_features=..., target_pathways=..., lattice_rotation=..., lattice_density=..., restricted_unit_features=..., restricted_unit_exp=..., detail_exp=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateIndoorPathways_indoors(in_level_features, in_detail_features, target_pathways, {lattice_rotation}, {lattice_density}, {restricted_unit_features}, {restricted_unit_exp}, {detail_exp})

        Generates preliminary pathways that are cut according to obstructions,
        such as walls or columns, on selected levels in one or more
        facilities.

     INPUTS:
      in_level_features (Feature Layer):
          The input polygon features representing levels in facilities. In the
          Indoors model, this is the Levels layer. The tool honors selections
          and definition queries applied to the layer.
      in_detail_features (Feature Layer):
          The input polyline features representing architectural details that
          can serve as barriers to travel within a facility. In the Indoors
          model, this is the Details layer.If the input polyline layer contains
          feature representing both
          barriers (such as walls and windows) and nonbarriers (such as stairs
          and doorways), use the detail_exp parameter to identify which features
          represent barriers.
      target_pathways (Feature Layer):
          The feature class or feature layer to which generated pathway
          polylines will be written. In the Indoors model, this is the
          PrelimPathways layer.
      lattice_rotation {Double}:
          The number of degrees by which the input floors' primary travel
          direction is rotated clockwise from due west. If left blank, the tool
          will calculate a value based on the minimum bounding rectangle of each
          floor.The value must be between 0.0 and 180.0.
      lattice_density {Double}:
          The longest distance allowed between nodes in the generated lattice of
          pathways. The tool uses the unit of measure from the coordinate system
          of the Indoors dataset. The default value is 0.6.The value must be
          between 0.25 and 2.9.
      restricted_unit_features {Feature Layer}:
          The input polygon features representing restricted and unrestricted
          spaces within a facility. In the Indoors model, this is the Units
          layer.
      restricted_unit_exp {SQL Expression}:
          An SQL expression that will be used to select the
          restricted_unit_features parameter values where the tool will not
          generate pathways.
      detail_exp {SQL Expression}:
          An SQL expression used to select the in_detail_features parameter
          values across which the tool will not generate pathways."""
    ...

@gptooldoc('ThinIndoorPathways_indoors', None)
def ThinIndoorPathways(in_level_features=..., in_pathway_features=..., in_transition_features=..., routable_locations=..., target_pathways=..., target_transitions=..., search_tolerance=..., neighbor_solve_count=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ThinIndoorPathways_indoors(in_level_features, in_pathway_features, in_transition_features, routable_locations;routable_locations..., target_pathways, target_transitions, {search_tolerance}, {neighbor_solve_count})

        Removes preliminary network pathways that are not needed for routing
        between selected locations on each level, reducing the network dataset
        size and improving its route-solving performance.

     INPUTS:
      in_level_features (Feature Layer):
          The input polygon features representing a level or levels in one or
          more facilities. In the ArcGIS Indoors Information Model, this is the
          Levels layer. Only the levels represented by these features will be
          processed.
      in_pathway_features (Feature Layer):
          The input polyline features representing the preliminary pathways to
          be thinned. In the Indoors model, this is the PrelimPathways layer.
      in_transition_features (Feature Layer):
          The input polyline features representing the preliminary transitions
          to be thinned. In the Indoors model, this is the PrelimTransitions
          layer.
      routable_locations (Feature Layer):
          The input point or polygon features representing the locations used to
          calculate routes. This can be any point or polygon features that
          conform to the Indoors model or are configured as floor aware.
      target_pathways (Feature Layer):
          The existing feature class or feature layer to which the thinned
          pathways will be added. In the Indoors model, this is the Pathways
          layer.
      target_transitions (Feature Layer):
          The existing feature class or feature to which thinned transitions
          will be added. In the Indoors model, this is the Transitions layer.
      search_tolerance {Long}:
          The distance, in meters, the tool will search for Routable
          Locations features near the input pathways. The Routable Locations
          features that are farther away than this value will not be used for
          thinning. The default value is 5. The value must be 0 or
          greater.
      neighbor_solve_count {Long}:
          The number of closest neighboring locations that will be
          solved when calculating routes between a specified location and other
          routable locations in the facility. The default value is 50.
          The value must be 1 or greater."""
    ...

