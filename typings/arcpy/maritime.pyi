"""
This type stub file was generated by pyright.
"""

from arcpy.geoprocessing._base import gptooldoc

r"""The Maritime toolbox contains tools that manage S-57, S-100, VPF,
paper charting, and bathymetric data."""
__all__ = ['ApplyMaritimeSymbology', 'ConvertS57ToS101', 'CopyS57Features', 'CreateS57ExchangeSet', 'ExportGeodatabaseToS57', 'ExportGeodatabaseToVPF', 'ExportS101Cell', 'GenerateCartographicLimits', 'GenerateDepthAreas', 'GenerateLandAreas', 'GenerateLightSector', 'ImportS100Cell', 'ImportS100FeatureCatalogue', 'ImportS57ToGeodatabase', 'ImportVPFToGeodatabase', 'ParseS58LogFile', 'ReducePointDensity', 'RepairNauticalData', 'SmoothBathymetricTIN', 'TransferQualityOfPosition', 'ValidateS57File']
__alias__ = ...
@gptooldoc('GenerateDepthAreas_maritime', None)
def GenerateDepthAreas(in_tin=..., in_contours=..., contour_depth_field=..., depth_direction=..., target_workspace=..., min_depth=..., max_depth=..., in_extent_polygon=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateDepthAreas_maritime(in_tin, in_contours, contour_depth_field, depth_direction, target_workspace, min_depth, max_depth, {in_extent_polygon})

        Creates depth area polygon features using a TIN to query depth
        information to find whether a closed contour is trending deeper or
        shallower.

     INPUTS:
      in_tin (TIN Layer):
          The TIN surface from which the nodes will be queried to attribute the
          depth polygons. It is recommended that you use the same TIN surface
          that was used to generate the contours.
      in_contours (Feature Layer):
          The depth contours features.
      contour_depth_field (Field):
          The field that will store the depth value in the depth contours
          feature.
      depth_direction (String):
          Specifies whether the depth direction is positive upward or positive
          downward. The direction must be the same as that of the input TIN and
          contour features for the values of the minimum and maximum depth for
          the generated depth area polygons to be accurate.

          * POSITIVE_UP-The input contour, maximum depth, and minimum depth
          values must be negative with drying heights as positive. This is the
          default.

          * POSITIVE_DOWN-The input contour, maximum depth, and minimum depth
          values must be positive with drying heights as negative.
      target_workspace (Workspace):
          The geodatabase where the depth polygons will be written. The
          workspace is expected to be a nautical workspace with either the S-57
          or S-101 schema.
      min_depth (Double):
          A value used to populate the minimum depth of polygons shallower than
          the shallowest contour value.
      max_depth (Double):
          A value used to populate the maximum depth of polygons deeper than the
          deepest contour value.
      in_extent_polygon {Feature Layer}:
          The extent polygons within which the depth area polygons will be
          generated. If not specified, the TIN domain will be used."""
    ...

@gptooldoc('GenerateLandAreas_maritime', None)
def GenerateLandAreas(in_workspace=..., target_workspace=..., in_extent_polygon=..., in_configuration_file=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateLandAreas_maritime(in_workspace, target_workspace, in_extent_polygon, {in_configuration_file})

        Creates land area polygon features by identifying existing land
        topology features, such as coastline and shoreline construction, and
        eliminating any polygons over water or other exclusionary features. An
        area of interest is specified to limit the processing area.

     INPUTS:
      in_workspace (Workspace):
          The workspace containing a Maritime product schema (S-57 or S-101
          based) in which existing land topology features, such as coastline and
          shoreline construction, will be processed to identify the land areas
          that will be created.
      target_workspace (Workspace):
          The workspace that will contain the land area polygons that are
          created. The workspace must be a Nautical workspace with S-57 or S-101
          schema. For S-57 schema, the workspace should have a NaturalFeaturesA
          polygon feature class with a LNDARE_LandArea subtype. For S-101
          schema, the workspace should have a LandArea_A polygon feature class.
      in_extent_polygon (Feature Layer):
          The extent polygon in which the land area polygons will be generated.
      in_configuration_file {File}:
          The location of an .xml configuration file that lists the feature
          classes that will participate in defining the land topology edges and
          the feature classes that indicate areas where land should not exist.
          If not specified, the default GenerateLandAreasSettings.xml
          configuration file will be used."""
    ...

@gptooldoc('ReducePointDensity_maritime', None)
def ReducePointDensity(in_features=..., out_feature_class=..., depth_field=..., depth_direction=..., depth_bias=..., radius_unit=..., start_thinning_radius=..., end_thinning_radius=..., start_depth=..., end_depth=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ReducePointDensity_maritime(in_features, out_feature_class, depth_field, depth_direction, depth_bias, radius_unit, start_thinning_radius, {end_thinning_radius}, {start_depth}, {end_depth})

        Thins points from a point or multipoint feature class.

     INPUTS:
      in_features (Feature Layer):
          The input point or multipoint features.
      depth_field (Field):
          The field where the depth is stored. It is either a numeric
          field or the shape field specified in in_features. For
          multipoint features, this must be the shape field.
      depth_direction (String):
          Specifies how the depth value will be captured in the depth field of
          the input features.

          * POSITIVE_UP-Depth values will be positive above the surface and
          negative below the surface. This is default.

          * POSITIVE_DOWN-Depth values will be positive below the surface and
          negative above the surface.
      depth_bias (String):
          Specifies the bias that will be used to select the depths to be
          retained.

          * SHALLOW_BIASED-Shallow bias will be used for depth. This is default.

          * DEEP_BIASED-Deep bias will be used for depth.
      radius_unit (String):
          Specifies the unit of measure that will be used by the
          start_thinning_radius and end_thinning_radius parameters.

          * KILOMETERS-The radius unit will be kilometers.

          * METERS-The radius unit will be meters. This is default.

          * DECIMETERS-The radius unit will be decimeters.

          * CENTIMETERS-The radius unit will be centimeters.

          * MILLIMETERS-The radius unit will be millimeters.

          * NAUTICAL_MILES-The radius unit will be nautical miles.

          * MILES-The radius unit will be miles.

          * YARDS-The radius unit will be yards.

          * FEET-The radius unit will be feet.

          * INCHES-The radius unit will be inches.

          * DECIMAL_DEGREES-The radius unit will be decimal degrees.

          * POINTS-The radius unit will be points.
      start_thinning_radius (Double):
          The beginning radius that will be used to remove or thin points
          relative to each other.
      end_thinning_radius {Double}:
          The end radius that will be used to remove or thin points relative to
          each other. The thinning radius will dynamically change as the
          algorithm progresses through the range of depth values.
      start_depth {Double}:
          The depth that will be used to begin the thinning algorithm. Depth
          values that appear before this depth based on the depth_direction
          parameter value will be ignored.
      end_depth {Double}:
          The depth that will be used to end the thinning algorithm. Depth
          values that appear after this depth based on the depth_direction
          parameter value will be ignored.

     OUTPUTS:
      out_feature_class (Feature Class):
          The output feature class."""
    ...

@gptooldoc('SmoothBathymetricTIN_maritime', None)
def SmoothBathymetricTIN(in_tin=..., out_tin=..., depth_direction=..., smoothing_iterations=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """SmoothBathymetricTIN_maritime(in_tin, out_tin, depth_direction, smoothing_iterations)

        Smooths a triangulated irregular network (TIN) dataset in a manner
        that strictly preserves a shallow bias.

     INPUTS:
      in_tin (TIN Layer):
          The input TIN that will be smoothed with a shallow bias.
      depth_direction (String):
          Specifies how the depth will be captured in the input TIN.

          * POSITIVE_UP-The depth will be captured in the input TIN. This is
          default.

          * POSITIVE_DOWN-The downward depth will be captured in the input TIN.
      smoothing_iterations (Long):
          The number of smoothing passes that will be performed over the TIN.

     OUTPUTS:
      out_tin (TIN):
          The output smoothed TIN."""
    ...

@gptooldoc('ApplyMaritimeSymbology_maritime', None)
def ApplyMaritimeSymbology(target_features=..., cxml_file=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ApplyMaritimeSymbology_maritime(target_features;target_features..., cxml_file)

        Applies maritime paper chart symbols to layers based on a CXML format
        file that contains rules.

     INPUTS:
      target_features (Feature Class / Feature Layer):
          The input point, line, or polygon features.
      cxml_file (File):
          The .cxml file that contains rules for applying symbology."""
    ...

@gptooldoc('GenerateCartographicLimits_maritime', None)
def GenerateCartographicLimits(input_polygons=..., erase_features=..., target_feature_class=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateCartographicLimits_maritime(input_polygons, erase_features;erase_features..., target_feature_class)

        Converts polygon features to polylines and removes all segments
        coincident with the erase features.

     INPUTS:
      input_polygons (Feature Layer):
          The polygon features that will be converted to polylines to create
          feature outlines where they are not coincident with the erase_features
          parameter value.
      erase_features (Feature Layer):
          The polyline features that will be used to identify coincident
          features in the input_polygons parameter value that will be removed
          from the target_feature_class parameter value.
      target_feature_class (Feature Layer):
          The feature class containing the cartographic limit features that will
          be converted."""
    ...

@gptooldoc('GenerateLightSector_maritime', None)
def GenerateLightSector(in_features=..., sector_line_length=..., sector_arc_radius=..., sector_unit=..., reference_scale=..., coordinate_system=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateLightSector_maritime(in_features, sector_line_length, sector_arc_radius, sector_unit, {reference_scale}, {coordinate_system})

        Creates navigational light sector lines and arcs based on attributes
        in a specified point feature class.

     INPUTS:
      in_features (Feature Layer):
          The feature class that contains the light features.
      sector_line_length (Double / Field):
          The length of the boundary lines for the light sector. This is the
          line that appears on the chart. The value for the line length can be
          populated based on a specified value or from a field.

          * Double-The line length will be determined by the specified value.

          * Field-The line length will be determined by an appropriate field you
          are using for the line sectors. One field that can be used is Value of
          Nominal Range (VALNMR).
      sector_arc_radius (Double / Field):
          The value that represents where the radius for the line sectors will
          be generated in relation to the light. The arc falls between two
          boundaries of the light sector. The radius is generated at a distance
          from the light sector using the units of measurement you select. You
          can specify a value for the radius or choose a field in the feature
          class that contains the radius values.

          * Double-The radius will be generated based on the specified value.

          * Field-The radius will be generated based on the value in the
          specified field.
      sector_unit (String):
          Specifies the unit of measurement that will be used for the radius arc
          that extends between the two light sector boundaries.To use page
          units, the map must be projected and the reference scale
          must be set.

          * CENTIMETERS-The page units will be centimeters.

          * DECIMAL_DEGREES-The map units will be decimal degrees.

          * DECIMETERS-The map units will be decimeters.

          * FEET-The map units will be feet.

          * INCHES-The page units will be inches.

          * KILOMETERS-The map units will be kilometers.

          * METERS-The map units will be meters.

          * MILLIMETERS-The page units will be millimeters.

          * NAUTICAL_MILES-The map units will be nautical miles.

          * POINTS-The page units will be points.

          * YARDS-The map units will be yards.
      reference_scale {Long}:
          The scale at which the features will be generated when using page
          units.
      coordinate_system {Coordinate System}:
          The coordinate system that will be used when creating the output
          features. The default is the current map coordinate system."""
    ...

@gptooldoc('TransferQualityOfPosition_maritime', None)
def TransferQualityOfPosition(in_geodatabase=..., unverified_features_only=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """TransferQualityOfPosition_maritime(in_geodatabase, {unverified_features_only})

        Transfers the Quality of Position (QUAPOS) attribution from S-57 edge
        primitives (captured in PLTS_SpatialAttributeL) to the feature to aid
        in symbolization dependent on this attribute.

     INPUTS:
      in_geodatabase (Workspace):
          The input geodatabase that contains the chart data in the maritime
          chart schema.
      unverified_features_only {Boolean}:
          Specifies whether only features marked as unverified will be
          processed.

          * UNVERIFIED_FEATURES-Only features marked as unverified will be
          processed.

          * ALL_FEATURES-All features will be processed. This is the default."""
    ...

@gptooldoc('ConvertS57ToS101_maritime', None)
def ConvertS57ToS101(in_feature_catalogue=..., in_config_file=..., input_s57=..., out_location=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ConvertS57ToS101_maritime(in_feature_catalogue, in_config_file, input_s57, out_location)

        Converts the S-57 vector product for storing nautical charting data to
        the new vector S-101 format.

     INPUTS:
      in_feature_catalogue (File):
          The S-101 feature catalogue (XML document) from the International
          Hydrographic Organization (IHO) containing the schema of the features,
          attributes, and relationships used for encoding the hydrographic data
          in the S-101 cells.
      in_config_file (File):
          The input XML file that can be used to customize some aspects of the
          conversion process.
      input_s57 (File / Folder):
          The input S-57 file with a .000 extension or a CATALOG.031 file that
          references a collection of S-57 files.
      out_location (Folder):
          The directory where the converted cell will be written."""
    ...

@gptooldoc('ExportS101Cell_maritime', None)
def ExportS101Cell(in_feature_catalogue=..., in_s101_workspace=..., product=..., export_type=..., output_location=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ExportS101Cell_maritime(in_feature_catalogue, in_s101_workspace, product, export_type, output_location)

        Exports S-101 hydrographic data from a geodatabase to an S-101 file.

     INPUTS:
      in_feature_catalogue (File):
          An S-100 feature catalogue document that describes the content of a
          data product and specification.
      in_s101_workspace (Workspace):
          The workspace that contains the product.
      product (String):
          The name of the product to export.This information must exist in the
          ProductCoverage feature class and
          ProductDefinition table before using this tool.
      export_type (String):
          The type of file created during export.

          * NEW_EDITION-A new edition of a dataset, including new information
          that has not been previously distributed by updates. This is the
          default.
      output_location (Folder):
          The location where the export package will be written."""
    ...

@gptooldoc('ImportS100Cell_maritime', None)
def ImportS100Cell(in_feature_catalogue=..., in_base_cell=..., target_workspace=..., in_update_cells=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ImportS100Cell_maritime(in_feature_catalogue, in_base_cell, target_workspace, {in_update_cells;in_update_cells...})

        Imports S-100 hydrographic data into a geodatabase created from a
        related S-100 Feature Catalogue.

     INPUTS:
      in_feature_catalogue (File):
          An S-100 Feature Catalogue document that describes the content of a
          data product and its specification.
      in_base_cell (File):
          The data contained in a base file in S-100 format.
      target_workspace (Workspace):
          The geodatabase to which all output data will be written.
      in_update_cells {File}:
          The data to be updated in a base file in S-100 format."""
    ...

@gptooldoc('ImportS100FeatureCatalogue_maritime', None)
def ImportS100FeatureCatalogue(in_feature_catalogue=..., target_workspace=..., admin_connection=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ImportS100FeatureCatalogue_maritime(in_feature_catalogue, target_workspace, {admin_connection})

        Imports the contents of an S-100 feature catalogue into an existing
        geodatabase. A feature catalogue is an XML document that describes the
        content of a data product.

     INPUTS:
      in_feature_catalogue (File):
          An S-100 feature catalogue document that describes the content of a
          data product and specification.
      target_workspace (Workspace):
          The geodatabase to which output data will be written.
      admin_connection {File}:
          Optional enterprise geodatabase administrator connection file that
          should be used when importing into an enterprise geodatabase, for
          example, the SDE user."""
    ...

@gptooldoc('CopyS57Features_maritime', None)
def CopyS57Features(in_features=..., target_workspace=..., compilation_scale=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CopyS57Features_maritime(in_features;in_features..., target_workspace, {compilation_scale})

        Copies features from a layer or multiple layers to a target
        geodatabase.

     INPUTS:
      in_features (Feature Layer):
          The input features that will be copied to the target_workspace
          parameter value.
      target_workspace (Workspace):
          The geodatabase to which the output data will be written.
      compilation_scale {Long}:
          The compilation scale attribute value that will be applied to the
          copied features."""
    ...

@gptooldoc('CreateS57ExchangeSet_maritime', None)
def CreateS57ExchangeSet(in_directories=..., out_directory=..., layout_format=..., updates_only=..., lfil_file=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateS57ExchangeSet_maritime(in_directories;in_directories..., out_directory, {layout_format}, {updates_only}, {lfil_file})

        Allows a mariner to view the Electronic Navigational Chart (ENC)
        datasets in an Electronic Chart Display and Information System (ECDIS)
        for shipboard navigation.

     INPUTS:
      in_directories (Folder):
          Folders that contain at least one S-57 base cell (*.000) and,
          optionally, any of the following:

          * S-57 update datasets

          * README.txt file

          * Any referenced files in the S-57 cells (*.txt, *.tif, and *.jpg)
      out_directory (Folder):
          The location of an empty folder where the ENC_ROOT folder will be
          written. The folder must be empty for the tool to run successfully.
      layout_format {String}:
          Specifies the directory and folder structure of the exchange set.

          * VERSION_LAYOUT-The exchange set will be written in the format
          ENC_ROOT\\CATALOG.031, ENC_ROOT\\<Agency>\\<ProductName>\\<MajorEdition>\\<
          MinorEdition>\\<S57Product>, <Referenced Files>. This is the default.

          * PRODUCT_LAYOUT-The exchange set will be written in the format
          ENC_ROOT\\CATALOG.031, ENC_ROOT\\<ProductName>\\<S57Product>, <Referenced
          Files>.

          * FLAT_LAYOUT-The exchange set will be written in the format
          ENC_ROOT\\CATALOG.031, <S57Product(s)>, <Referenced Files>.
      updates_only {Boolean}:
          Specifies how S-57 update datasets in the input folder will be
          processed.

          * INCLUDE_ALL-The output exchange set will include the S-57 base
          dataset and any updates. This is the default.

          * INCLUDE_ONLY_UPDATES-The output exchange set will include all the
          updates but not the base dataset. If there are no updates, the output
          will include the S-57 base dataset.
      lfil_file {File}:
          A text file that will be used to match file names in the output
          exchange set to the long file descriptions populated on the catalog
          file records."""
    ...

@gptooldoc('ExportGeodatabaseToS57_maritime', None)
def ExportGeodatabaseToS57(in_source_gdb=..., product=..., export_type=..., out_location=..., in_product_config=..., clip_data_option=..., sample_export=..., in_scamin_file=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ExportGeodatabaseToS57_maritime(in_source_gdb, product, export_type, out_location, {in_product_config}, {clip_data_option}, {sample_export}, {in_scamin_file})

        Exports hydrographic data from an ArcGIS Maritime geodatabase to an
        S-57 file.

     INPUTS:
      in_source_gdb (Workspace):
          The database from which the product will be exported.
      product (String):
          The name of the product that will be exported. This product metadata
          entry must exist in the ProductDefinitions table, and the related
          extents must be present in the ProductCoverage feature class in the
          workspace.
      export_type (String):
          Specifies the type of file that will be created during the export.

          * NEW_DATASET-A new dataset including information that has not been
          previously distributed by updates will be created.

          * NEW_EDITION-A new edition of a dataset including information that
          has not been previously distributed by updates will be created.

          * UPDATE-Changes to a dataset since the last export will be reflected
          in the file.

          * REISSUE-A reissue of a dataset including all the updates applied to
          the original dataset up to the date of reissue will be created. A
          reissue does not contain information that has not been previously
          issued by updates.

          * CANCEL-When a dataset is deleted, an updated cell file is created
          containing only the Dataset General Information record with the
          Dataset Identifier (DSID) field. In this case, the Edition Number
          (EDTN) subfield must be set to 0.
      out_location (Folder):
          The location containing the output export package.
      in_product_config {File}:
          The configuration file that will be used to export the product.
      clip_data_option {Boolean}:
          Specifies whether the export process will clip data that crosses an
          M_CSCL feature.

          * CLIP-Features in the source database that cross the boundary of an
          M_CSCL feature will be clipped to the boundary in the exported file.

          * DO_NOT_CLIP-Features in the source database that cross the boundary
          of an M_CSCL feature will not be clipped to the boundary in the
          exported file. The features will remain intact in the output. This is
          the default.
      sample_export {Boolean}:
          Specifies whether the product will be exported as a sample.

          * SAMPLE_EXPORT-The exported cell is not stored in the ProductExports
          table and the metadata information will not be updated in the
          ProductDefinitions table.

          * OFFICIAL_EXPORT-The exported cell is stored in the ProductExports
          table as a BLOB, and the edition, update, and other metadata in the
          ProductDefinitions table will be updated. This is the default.
      in_scamin_file {File}:
          A custom configuration file that contains the rules for calculating a
          feature's SCAMIN value that overrides the default value. For
          additional information, refer to Scale Minimum: Radar Range method."""
    ...

@gptooldoc('ImportS57ToGeodatabase_maritime', None)
def ImportS57ToGeodatabase(in_base_cell=..., target_workspace=..., in_update_cells=..., in_product_config=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ImportS57ToGeodatabase_maritime(in_base_cell, target_workspace, {in_update_cells;in_update_cells...}, {in_product_config})

        Imports an S-57 file into an ArcGIS Maritime geodatabase.

     INPUTS:
      in_base_cell (File):
          The base cell file (*.000).
      target_workspace (Workspace):
          The workspace where all the objects will be written.
      in_update_cells {File}:
          Updates cell files (*.001 - *.999).
      in_product_config {File}:
          The product configuration file that will be imported."""
    ...

@gptooldoc('ParseS58LogFile_maritime', None)
def ParseS58LogFile(in_s58_log_file=..., in_s57_file=..., in_production_database_workspace=..., in_reviewer_workspace=..., reviewer_session=..., in_update_cells=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ParseS58LogFile_maritime(in_s58_log_file, in_s57_file, in_production_database_workspace, in_reviewer_workspace, reviewer_session, {in_update_cells;in_update_cells...})

        Parses log files produced by the Validate S-57 File tool and third-
        party validation software against S-58 (recommended ENC validation
        checks). Critical errors and warnings are imported as records in a
        Data Reviewer table.

     INPUTS:
      in_s58_log_file (File):
          The S-58 log file that contains validation errors. It can be an *.S58,
          *.ANL, or *.VLD file.
      in_s57_file (File):
          The base cell file (*.000) from which the validation result was
          produced. The name of the ENC cell referenced in this parameter must
          match the name of the ENC cell referenced in the validation log file.
      in_production_database_workspace (Workspace):
          The workspace to validate and correct. This workspace contains the
          data used to generate the S-57 format file.
      in_reviewer_workspace (Workspace):
          The path to the Data Reviewer workspace where the features or table
          records will be written. A Data Reviewer workspace must be created for
          each ENC product.
      reviewer_session (String):
          An existing Data Reviewer session.
      in_update_cells {File}:
          The cell files (*.001 - *.999) that will be updated."""
    ...

@gptooldoc('RepairNauticalData_maritime', None)
def RepairNauticalData(in_workspace=..., repair_operations=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """RepairNauticalData_maritime(in_workspace, repair_operations;repair_operations...)

        Repairs selected data processes on a database with the Nautical
        schema. Processes include repairing noncollocated structure-equipment
        features, deleting detached FREL and COLLECTIONS records, and
        resolving blank or duplicate LNAM attribute values.

     INPUTS:
      in_workspace (Workspace):
          The file or enterprise geodatabase to be repaired.
      repair_operations (String):
          Specifies the repair process to be executed.

          * FIX_LNAM-Records with a blank LNAM attribute will be resolved by
          populating the records with a valid LNAM value, and duplicate LNAM
          attribute conflicts will be resolved with a new LNAM value provided to
          one of the records.

          * REMOVE_ORPHAN_RELATIONSHIPS-Detached structure or equipment and
          collections records will be removed from the PLTS_FREL and
          PLTS_COLLECTIONS tables.

          * MOVE_EQUIPMENT_FEATURES-Point equipment features that are not
          coincident with point structure features will be identified and moved
          to the location of the structure."""
    ...

@gptooldoc('ValidateS57File_maritime', None)
def ValidateS57File(in_s57_file=..., out_directory=..., in_update_cells=..., regional_rules=..., in_ignore_list=..., exclude_shapefile=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ValidateS57File_maritime(in_s57_file, out_directory, {in_update_cells;in_update_cells...}, {regional_rules}, {in_ignore_list}, {exclude_shapefile})

        Validates an ENC, IENC, or bIENC file and generates an .S58 file and a
        shapefile as a result.

     INPUTS:
      in_s57_file (File):
          The base cell file (*.000).
      out_directory (Folder):
          The location where the validated S-57 log will be created.
      in_update_cells {File}:
          The update cell files (*.001 - *.999).
      regional_rules {String}:
          Specifies the region that will be used to set the Recommended Inland
          ENC Validation Checks for that region.For IENC and bIENC cells, some
          validation rules don't apply in certain
          regions, or they check for different objects and attribution.

          * BR-Brazilian validation rules will be applied.

          * EU-European validation rules will be applied.

          * RU-Russian Federation validation rules will be applied.

          * US-United States validation rules will be applied.
      in_ignore_list {File}:
          A text file containing a list of checks to ignore in the output log
          file.
      exclude_shapefile {Boolean}:
          Specifies whether a shapefile will be generated.

          * EXCLUDE_SHAPEFILE-A shapefile will not be generated. Only the .s58
          file will be created.

          * DO_NOT_EXCLUDE_SHAPEFILE-A shapefile will be generated, along with
          the .s58 file. This is the default."""
    ...

@gptooldoc('ExportGeodatabaseToVPF_maritime', None)
def ExportGeodatabaseToVPF(in_source_gdb=..., ntm_date=..., out_location=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ExportGeodatabaseToVPF_maritime(in_source_gdb;in_source_gdb..., ntm_date, out_location)

        Exports hydrographic data from maritime geodatabases to Vector Product
        Format (VPF).

     INPUTS:
      in_source_gdb (Workspace):
          The source geodatabases that will be exported.
      ntm_date (String):
          The Notice to Mariners date of the source geodatabases.
      out_location (Folder):
          The location where the export package will be written."""
    ...

@gptooldoc('ImportVPFToGeodatabase_maritime', None)
def ImportVPFToGeodatabase(in_vpf_features=..., target_workspace=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ImportVPFToGeodatabase_maritime(in_vpf_features;in_vpf_features..., target_workspace)

        Imports Vector Product Format (VPF) data in Digital Nautical Chart
        (DNC) and Tactical Ocean Data (TOD) formats into an ArcGIS Maritime
        geodatabase. Sources that can be imported include DNC and TOD0, TOD2,
        and TOD4.

     INPUTS:
      in_vpf_features (Folder):
          The VPF data to be imported into the geodatabase from a folder that
          contains one or more libraries. Point, line, polygon, and Ecrtext
          annotation features can be imported.
      target_workspace (Workspace):
          The geodatabase to which the VPF data will be imported. This can be an
          empty template or existing geodatabase."""
    ...

