"""
This type stub file was generated by pyright.
"""

from arcpy.arcobjects._base import _ObjectWithoutInitCall, _ObjectWithoutInitCallWrapper
from arcpy.utils import ArgAdaptor

class constants(ArgAdaptor):
    """Represents the constants that can be passed into various functions"""

    __args__ = ...

class Symbology(_ObjectWithoutInitCallWrapper):
    """It is through the Symbology class that you can gain access to a layer's renderer"""

    _rendererType = ...
    def __new__(cls, wrap_object): ...

class Symbol(_ObjectWithoutInitCall):
    """The Symbol class provides access to basic symbol properties and methods."""

    name = ...
    color = ...
    angle = ...
    outlineColor = ...
    outlineWidth = ...
    useRealWorldUnits = ...
    size = ...
    def listSymbolsFromGallery(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Symbol.listSymbolsFromGallery({wildcard})


        listSymbolsFromGallery provides a mechanism to return a list of symbols
        that exists in a system or project style gallery.


        wildcard{String}:
        A string  used to find symbols based on the symbol name or tag value.  A
        partial word search works. The default value is None.
        """
        ...
    def applySymbolFromGallery(
        self, wildcard, index=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Symbol.applySymbolFromGallery(wildcard, {index})


        applySymbolFromGallery provides a mechanism to set  a symbol to one that
        exists in a system or project style gallery.


        wildcard(String):
        A string  used to find symbols based on the symbol name or tag value.  A
        partial word search works. The default value is None.


        index{Integer}:
        A list index value based on the number of possible symbols that are
        returned with the same name. The default value is 0.
        """
        ...

class ColorRamp(_ObjectWithoutInitCall):
    """ColorRamp provides access to a color ramp that is available in a project.
    To reference a color ramp in a project, use the listColorRamps method on the arcpy.mp.ArcGISProject.
    """

    name = ...
    def __init__(self, color_ramp_name, index=...) -> None:
        """ColorRamp(color_ramp_name, {index})"""
        ...

class ClassBreak(_ObjectWithoutInitCall):
    """The ClassBreak class represents a class break that is available to the GraduatedColorsRenderer
    and the GraduatedSymbolsRenderer classes.
    """

    symbol = ...
    upperBound = ...
    label = ...
    description = ...

class RasterClassBreak(_ObjectWithoutInitCall):
    """The RasterClassBreak class represents a class break that is available to the RasterClassifyColorizer."""

    color = ...
    upperBound = ...
    label = ...
    description = ...

class Item(_ObjectWithoutInitCall):
    """Item provides access to item level information for a UniqueValueRenderer."""

    symbol = ...
    label = ...
    description = ...
    values = ...

class RasterItem(_ObjectWithoutInitCall):
    """Item provides access to item level information for a RasterUniqueValueColorizer."""

    color = ...
    label = ...
    description = ...
    values = ...

class ItemGroup(_ObjectWithoutInitCall):
    """ItemGroup provides access to group level information for a UniqueValueRenderer."""

    heading = ...
    items = ...
