"""
This type stub file was generated by pyright.
"""

from arcpy.geoprocessing._base import gptooldoc

r"""Organizations that collect data about linear features, such as
highways, city streets, railroads, rivers, pipelines, and water and
sewer networks often use linear referencing systems to store data. A
linear reference system stores data using a relative position along
existing line features. That is, location is given in terms of a known
linear feature and a position, or measure, along it. For example,
route I-10, mile 23.2, uniquely identifies a position in geographic
space, and can be used instead of an x,y coordinate."""
__all__ = ['CalibrateRoutes', 'CreateRoutes', 'DissolveRouteEvents', 'LocateFeaturesAlongRoutes', 'MakeRouteEventLayer', 'OverlayRouteEvents', 'TransformRouteEvents']
__alias__ = ...
@gptooldoc('CalibrateRoutes_lr', None)
def CalibrateRoutes(in_route_features=..., route_id_field=..., in_point_features=..., point_id_field=..., measure_field=..., out_feature_class=..., calibrate_method=..., search_radius=..., interpolate_between=..., extrapolate_before=..., extrapolate_after=..., ignore_gaps=..., keep_all_routes=..., build_index=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CalibrateRoutes_lr(in_route_features, route_id_field, in_point_features, point_id_field, measure_field, out_feature_class, {calibrate_method}, {search_radius}, {interpolate_between}, {extrapolate_before}, {extrapolate_after}, {ignore_gaps}, {keep_all_routes}, {build_index})

        Recalculates route measures using points.

     INPUTS:
      in_route_features (Feature Layer):
          The route features that will be calibrated.
      route_id_field (Field):
          The field containing values that uniquely identify each route. The
          field can be a numeric, text, or GUID field.
      in_point_features (Feature Layer):
          The point features that will be used to calibrate the routes.
      point_id_field (Field):
          The field that identifies the route on which each calibration point is
          located. The values in this field match those in the route identifier
          field. This field can be a numeric, text, or GUID field.
      measure_field (Field):
          The field containing the measure value for each calibration point.
          This field must be numeric.
      calibrate_method {String}:
          Specifies how route measures will be recalculated.

          * DISTANCE-Measures will be recalculated using the shortest path
          distance between the calibration points. This is the default.

          * MEASURES-Measures will be recalculated using the pre-existing
          measure distance between the calibration points.
      search_radius {Linear Unit}:
          Limits how far a calibration point can be from a route by specifying
          the distance and its unit of measure. If the unit of measure is
          unknown, the units of the coordinate system of the route feature class
          will be used.
      interpolate_between {Boolean}:
          Specifies whether measure values will be interpolated between the
          calibration points.

          * BETWEEN-Measure values will be interpolated between the calibration
          points. This is the default.

          * NO_BETWEEN-Measure values will not be interpolated between the
          calibration points.
      extrapolate_before {Boolean}:
          Specifies whether measure values will be extrapolated before the
          calibration points.

          * BEFORE-Measure values will be extrapolated before the calibration
          points. This is the default.

          * NO_BEFORE-Measure values will not be extrapolated before the
          calibration points.
      extrapolate_after {Boolean}:
          Specifies whether measure values will be extrapolated after the
          calibration points.

          * AFTER-Measure values will be extrapolated after the calibration
          points. This is the default.

          * NO_AFTER-Measure values will not be extrapolated after the
          calibration points.
      ignore_gaps {Boolean}:
          Specifies whether spatial gaps will be ignored when recalculating the
          measures on disjointed routes.

          * IGNORE-Spatial gaps will be ignored. Measure values will be
          continuous for disjointed routes. This is the default.

          * NO_IGNORE-Spatial gaps will not be ignored. The measure values on
          disjointed routes will have gaps. The gap distance is calculated using
          the straight-line distance between the endpoints of the disjointed
          parts.
      keep_all_routes {Boolean}:
          Specifies whether route features that do not have calibration points
          will be included in the output feature class.

          * KEEP-All route features will be included in the output feature
          class. This is the default.

          * NO_KEEP-All route features will not necessarily be included in the
          output feature class. Features with no calibration points will be
          excluded.
      build_index {Boolean}:
          Specifies whether an attribute index will be created for the route
          identifier field that is written to the out_feature_class parameter
          value.

          * INDEX-An attribute index will be created. This is the default.

          * NO_INDEX-An attribute index will not be created.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class that will be created. It can be a shapefile or a
          geodatabase feature class."""
    ...

@gptooldoc('CreateRoutes_lr', None)
def CreateRoutes(in_line_features=..., route_id_field=..., out_feature_class=..., measure_source=..., from_measure_field=..., to_measure_field=..., coordinate_priority=..., measure_factor=..., measure_offset=..., ignore_gaps=..., build_index=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateRoutes_lr(in_line_features, route_id_field, out_feature_class, measure_source, {from_measure_field}, {to_measure_field}, {coordinate_priority}, {measure_factor}, {measure_offset}, {ignore_gaps}, {build_index})

        Creates routes from existing lines. The input line features that share
        a common identifier are merged to create a single route.

     INPUTS:
      in_line_features (Feature Layer):
          The features from which routes will be created.
      route_id_field (Field):
          The field containing values that uniquely identify each route. The
          field can be a numeric, text, or GUID field.
      measure_source (String):
          Specifies how route measures will be accumulated.

          * LENGTH-The geometric length of the input features will be used to
          accumulate the measures. This is the default.

          * ONE_FIELD-The value stored in a single field will be used to
          accumulate the measures.

          * TWO_FIELDS-The values stored in both the from- and to-measure fields
          will be used to accumulate the measures.
      from_measure_field {Field}:
          A field containing measure values. This field must be numeric and is
          required when the measure source is ONE_FIELD or TWO_FIELDS.
      to_measure_field {Field}:
          A field containing measure values. This field must be numeric and is
          required when the measure source is TWO_FIELDS.
      coordinate_priority {String}:
          The position from which measures will be accumulated for each output
          route. This parameter is ignored when the measure source is
          TWO_FIELDS.

          * UPPER_LEFT-Measures will be accumulated from the point closest to
          the minimum bounding rectangle's upper left corner. This is the
          default.

          * LOWER_LEFT-Measures will be accumulated from the point closest to
          the minimum bounding rectangle's lower left corner.

          * UPPER_RIGHT-Measures will be accumulated from the point closest to
          the minimum bounding rectangle's upper right corner.

          * LOWER_RIGHT-Measures will be accumulated from the point closest to
          the minimum bounding rectangle's lower right corner.
      measure_factor {Double}:
          A value multiplied by the measure length of each input line before
          they are merged to create route measures. The default is 1.
      measure_offset {Double}:
          A value added to the route measures after the input lines have been
          merged to create a route. The default is 0.
      ignore_gaps {Boolean}:
          Specifies whether spatial gaps will be ignored when calculating the
          measures on disjointed routes. This parameter is applicable when the
          measure source is LENGTH or ONE_FIELD.

          * IGNORE-Spatial gaps will be ignored. Measure values will be
          continuous for disjointed routes. This is the default.

          * NO_IGNORE-Spatial gaps will not be ignored. The measure values on
          disjointed routes will have gaps. The gap distance is calculated using
          the straight-line distance between the endpoints of the disjointed
          parts.
      build_index {Boolean}:
          Specifies whether an attribute index will be created for the route
          identifier field that is written to the output route feature class.

          * INDEX-An attribute index will be created. This is the default.

          * NO_INDEX-An attribute index will not be created.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class that will be created. It can be a shapefile or a
          geodatabase feature class."""
    ...

@gptooldoc('DissolveRouteEvents_lr', None)
def DissolveRouteEvents(in_events=..., in_event_properties=..., dissolve_field=..., out_table=..., out_event_properties=..., dissolve_type=..., build_index=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """DissolveRouteEvents_lr(in_events, in_event_properties, dissolve_field;dissolve_field..., out_table, out_event_properties, {dissolve_type}, {build_index})

        Removes redundant information from event tables or separates event
        tables having more than one descriptive attribute into individual
        tables.

     INPUTS:
      in_events (Table View):
          The table with the rows that will be aggregated.
      in_event_properties (Route Measure Event Properties):
          The route location fields and the type of events in the input event
          table.

          * Route identifier field-The field containing values that indicate the
          route on which each event is located. This field can be a numeric,
          text, or GUID field.

          * Event type-The type of events in the input event table
          (POINT or LINE).

          * POINT-Point events occur at a precise location along a route. Only a
          from-measure field must be specified.

          * LINE-Line events define a portion of a route. Both from- and to-
          measure fields must be specified.

          * From-measure field-A field containing measure values. This field
          must be numeric and is required when the event type is POINT or LINE

          * To-measure field-A field containing measure values. This field must
          be numeric and is required when the event type is LINE.
      dissolve_field (Field):
          The fields that will be used to aggregate rows.
      out_event_properties (Route Measure Event Properties):
          The route location fields and the type of events that will be written
          to the output event table.

          * Route identifier field-The field that will contain values that
          indicate the route on which each event is located. The field can be a
          numeric, text, or GUID field.

          * Event type-The type of events the output event table will
          contain (POINT or LINE).

          * POINT-Point events occur at a precise location along a route. Only a
          single measure field must be specified.

          * LINE-Line events define a portion of a route. Both from- and to-
          measure fields must be specified.

          * From-measure field-A field that will contain measure values. This
          field is required when the event type is POINT or LINE.

          * To-measure field-A field that will contain measure values. This
          field is required when the event type is LINE.
      dissolve_type {Boolean}:
          Specifies how the input events will be aggregated.

          * DISSOLVE-Events will be aggregated wherever there is measure
          overlap. This is the default.

          * CONCATENATE-Events will be aggregated where the to-measure of one
          event matches the from-measure of the next event. This option is
          applicable only for line events.
      build_index {Boolean}:
          Specifies whether an attribute index will be created for the route
          identifier field that is written to the output event table.

          * INDEX-An attribute index will be created. This is the default.

          * NO_INDEX-An attribute index will not be created.

     OUTPUTS:
      out_table (Table):
          The table that will be created."""
    ...

@gptooldoc('LocateFeaturesAlongRoutes_lr', None)
def LocateFeaturesAlongRoutes(in_features=..., in_routes=..., route_id_field=..., radius_or_tolerance=..., out_table=..., out_event_properties=..., route_locations=..., distance_field=..., zero_length_events=..., in_fields=..., m_direction_offsetting=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """LocateFeaturesAlongRoutes_lr(in_features, in_routes, route_id_field, radius_or_tolerance, out_table, out_event_properties, {route_locations}, {distance_field}, {zero_length_events}, {in_fields}, {m_direction_offsetting})

        Computes the intersection of input features (point, line, or polygon)
        and route features and writes the route and measure information to a
        new event table.

     INPUTS:
      in_features (Feature Layer):
          The input point, line, or polygon features.
      in_routes (Feature Layer):
          The routes with which the in_features parameter value will intersect.
      route_id_field (Field):
          The field containing values that uniquely identify each route. The
          field can be a numeric, text, or GUID field.
      radius_or_tolerance (Linear Unit):
          If the in_features parameter value is points, the search radius will
          be a numeric value defining how far around each point a search will be
          done to find a target route.If the in_features parameter value is
          lines, the search tolerance will
          be a cluster tolerance, which is a numeric value representing the
          maximum tolerated distance between the input lines and the target
          routes.If the in_features parameter value is polygons, this parameter
          is
          ignored and no search radius will be used.
      out_event_properties (Route Measure Event Properties):
          The route location fields and the type of events that will be written
          to the output event table.

          * Route identifier field-The field that will contain values that
          indicate the route on which each event is located. The field can be a
          numeric, text, or GUID field.

          * Event type-The type of events the output event table will
          contain (POINT or LINE).

          * POINT-Point events occur at a precise location along a route. Only a
          single measure field must be specified.

          * LINE-Line events define a portion of a route. Both from- and to-
          measure fields must be specified.

          * From-measure field-A field that will contain measure values. This
          field is required when the event type is POINT or LINE.

          * To-measure field-A field that will contain measure values. This
          field is required when the event type is LINE.
      route_locations {Boolean}:
          Specifies whether the closest route location or every route location
          within the search radius will be written to the out_table parameter
          value. When locating points along routes, more than one route may be
          within the search radius of any given point. This parameter is ignored
          when locating lines or polygons along routes.

          * FIRST-Only the closest route location will be written to the
          out_table parameter value. This is the default.

          * ALL-Every route location within the search radius will be written to
          the out_table parameter value.
      distance_field {Boolean}:
          Specifies whether a DISTANCE field will be added to the out_table
          parameter value. The values in this field are in the units of the
          specified search radius. This parameter is ignored when locating lines
          or polygons along routes.

          * DISTANCE-A field containing the point-to-route distance will be
          added to the out_table parameter value. This is the default.

          * NO_DISTANCE-A field containing the point-to-route distance will not
          be added to the out_table parameter value.
      zero_length_events {Boolean}:
          Specifies whether zero-length line events will be written to the
          output. When locating polygons along routes, events may be created
          where the from-measure is equal to the to-measure. This parameter is
          ignored when locating points or lines along routes.

          * ZERO-Zero-length line events will be written to the out_table
          parameter value. This is the default.

          * NO_ZERO-Zero-length line events will not be written to the out_table
          parameter value.
      in_fields {Boolean}:
          Specifies whether the out_table parameter value will contain route
          location fields and all the attributes from the in_features parameter
          value.

          * FIELDS-The out_table parameter value will contain route location
          fields and all the attributes from the in_features parameter value.
          This is the default.

          * NO_FIELDS-The out_table parameter value will only contain route
          location fields and the ObjectID field from the in_features parameter
          value.
      m_direction_offsetting {Boolean}:
          Specifies whether the offset distance calculated will be based on the
          m-direction or the digitized direction. Distances are included in the
          out_table parameter value if the distance_field parameter is set to
          DISTANCE.

          * M_DIRECTON-The distance values in the out_table parameter value will
          be calculated based on the m-direction of the route. Input features to
          the left of the m-direction of the route will be assigned a positive
          (+) offset, and features to the right of the m-direction will be
          assigned a negative (-) offset. This is the default.

          * NO_M_DIRECTION-The distance values in the out_table parameter value
          will be calculated based on the digitized direction of the route.
          Input features to the left of the digitized direction of the route
          will be assigned a negative (-) offset, and features to the right of
          the digitized direction will be assigned a positive (+) offset.

     OUTPUTS:
      out_table (Table):
          The table that will be created."""
    ...

@gptooldoc('MakeRouteEventLayer_lr', None)
def MakeRouteEventLayer(in_routes=..., route_id_field=..., in_table=..., in_event_properties=..., out_layer=..., offset_field=..., add_error_field=..., add_angle_field=..., angle_type=..., complement_angle=..., offset_direction=..., point_event_type=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """MakeRouteEventLayer_lr(in_routes, route_id_field, in_table, in_event_properties, out_layer, {offset_field}, {add_error_field}, {add_angle_field}, {angle_type}, {complement_angle}, {offset_direction}, {point_event_type})

        Creates a temporary feature layer using routes and route events.

     INPUTS:
      in_routes (Feature Layer):
          The route features on which events will be located.
      route_id_field (Field):
          The field containing values that uniquely identify each route. The
          field can be a numeric, text, or GUID field.
      in_table (Table View):
          The table whose rows will be located along routes.
      in_event_properties (Route Measure Event Properties):
          The route location fields and the type of events in the input event
          table.

          * Route identifier field-The field containing values that indicate the
          route on which each event is located. This field can be a numeric,
          text, or GUID field.

          * Event type-The type of events in the input event table
          (POINT or LINE).

          * POINT-Point events occur at a precise location along a route. Only a
          from-measure field must be specified.

          * LINE-Line events define a portion of a route. Both from- and to-
          measure fields must be specified.

          * From-measure field-A field containing measure values. This field
          must be numeric and is required when the event type is POINT or LINE

          * To-measure field-A field containing measure values. This field must
          be numeric and is required when the event type is LINE.
      offset_field {Field}:
          The field containing the values that will be used to offset events
          from their underlying route. This field must be numeric.
      add_error_field {Boolean}:
          Specifies whether a LOC_ERROR field will be added to the temporary
          layer that is created.

          * NO_ERROR_FIELD-A field to store locating errors will not be added.
          This is the default.

          * ERROR_FIELD-A field to store locating errors will be added.
      add_angle_field {Boolean}:
          Specifies whether a LOC_ANGLE field will be added to the temporary
          layer that is created. This parameter is only valid when the event
          type is point.

          * NO_ANGLE_FIELD-A field to store locating angles will not be added.
          This is the default.

          * ANGLE_FIELD-A field to store locating angles will be added.
      angle_type {String}:
          Specifies the type of locating angle that will be calculated. This
          parameter is only valid if add_angle_field = "ANGLE_FIELD".

          * NORMAL-The normal (perpendicular) angle will be calculated. This is
          the default.

          * TANGENT-The tangent angle will be calculated.
      complement_angle {Boolean}:
          Specifies whether the complement of the locating angle will be
          written. This parameter is only valid if add_angle_field =
          "ANGLE_FIELD".

          * ANGLE-The complement of the angle will not be written. Only the
          calculated angle will be written. This is the default.

          * COMPLEMENT-The complement of the angle will be written.
      offset_direction {Boolean}:
          Specifies the side on which the route events with a positive offset
          will be displayed. This parameter is only valid if an offset field has
          been specified.

          * LEFT-Events with a positive offset will be displayed to the left of
          the route. The side of the route is determined by the measures and not
          necessarily the digitized direction. This is the default.

          * RIGHT-Events with a positive offset will be displayed to the right
          of the route. The side of the route is determined by the digitized
          direction.
      point_event_type {Boolean}:
          Specifies whether point events will be treated as point features or
          multipoint features.

          * POINT-Point events will be treated as point features. This is the
          default.

          * MULTIPOINT-Point events will be treated as multipoint features.

     OUTPUTS:
      out_layer (Feature Layer):
          The layer that will be created. This layer is stored in memory, so a
          path is not necessary."""
    ...

@gptooldoc('OverlayRouteEvents_lr', None)
def OverlayRouteEvents(in_table=..., in_event_properties=..., overlay_table=..., overlay_event_properties=..., overlay_type=..., out_table=..., out_event_properties=..., zero_length_events=..., in_fields=..., build_index=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """OverlayRouteEvents_lr(in_table, in_event_properties, overlay_table, overlay_event_properties, overlay_type, out_table, out_event_properties, {zero_length_events}, {in_fields}, {build_index})

        Overlays two event tables to create an output event table that
        represents the union or intersection of the input.

     INPUTS:
      in_table (Table View):
          The input event table.
      in_event_properties (Route Measure Event Properties):
          The route location fields and the type of events in the input event
          table.

          * Route identifier field-The field containing values that indicate the
          route on which each event is located. This field can be a numeric,
          text, or GUID field.

          * Event type-The type of events in the input event table
          (POINT or LINE).

          * POINT-Point events occur at a precise location along a route. Only a
          from-measure field must be specified.

          * LINE-Line events define a portion of a route. Both from- and to-
          measure fields must be specified.

          * From-measure field-A field containing measure values. This field
          must be numeric and is required when the event type is POINT or LINE

          * To-measure field-A field containing measure values. This field must
          be numeric and is required when the event type is LINE.
      overlay_table (Table View):
          The overlay event table.
      overlay_event_properties (Route Measure Event Properties):
          The route location fields and the type of events in the overlay event
          table.Route identifier field-The field containing values that indicate
          which
          route each event is along. This field can be a numeric, text, or GUID
          field.Event type-The type of events in the overlay event table (POINT
          or
          LINE).

          * POINT-Point events occur at a precise location along a route. Only a
          from-measure field must be specified.

          * LINE-Line events define a portion of a route. Both from- and to-
          measure fields must be specified.
          From-measure field-A field containing measure values. This field must
          be numeric and is required when the event type is POINT or LINE.To-
          measure field-A field containing measure values. This field must be
          numeric and is required when the event type is LINE.
      overlay_type (String):
          Specifies the type of overlay that will be performed.

          * INTERSECT-Only overlapping events will be written to the output
          event table. This is the default.

          * UNION-All events will be written to the output table. Linear events
          will be split at their intersections.
      out_event_properties (Route Measure Event Properties):
          The route location fields and the type of events that will be written
          to the output event table.

          * Route identifier field-The field that will contain values that
          indicate the route on which each event is located. The field can be a
          numeric, text, or GUID field.

          * Event type-The type of events the output event table will
          contain (POINT or LINE).

          * POINT-Point events occur at a precise location along a route. Only a
          single measure field must be specified.

          * LINE-Line events define a portion of a route. Both from- and to-
          measure fields must be specified.

          * From-measure field-A field that will contain measure values. This
          field is required when the event type is POINT or LINE.

          * To-measure field-A field that will contain measure values. This
          field is required when the event type is LINE.
      zero_length_events {Boolean}:
          Specifies whether zero-length line events will be added to the
          out_table parameter value. This parameter is only valid when the
          output event type is LINE.

          * ZERO-Zero-length line events will be added. This is the default.

          * NO_ZERO-Zero-length line events will not be added.
      in_fields {Boolean}:
          Specifies whether all the fields from the input and overlay event
          tables will be included in the out_table parameter value.

          * FIELDS-All the fields from the input tables will be included in the
          output table. This is the default.

          * NO_FIELDS-All the fields from the input tables will not be included
          in the output table. Only the ObjectID field and the route location
          fields will be included.
      build_index {Boolean}:
          Specifies whether an attribute index will be created for the route
          identifier field that is written to the out_table parameter value.

          * INDEX-An attribute index will be created. This is the default.

          * NO_INDEX-An attribute index will not be created.

     OUTPUTS:
      out_table (Table):
          The table that will be created."""
    ...

@gptooldoc('TransformRouteEvents_lr', None)
def TransformRouteEvents(in_table=..., in_event_properties=..., in_routes=..., route_id_field=..., target_routes=..., target_route_id_field=..., out_table=..., out_event_properties=..., cluster_tolerance=..., in_fields=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """TransformRouteEvents_lr(in_table, in_event_properties, in_routes, route_id_field, target_routes, target_route_id_field, out_table, out_event_properties, cluster_tolerance, {in_fields})

        Transforms the measures of events from one route reference to another
        and writes them to a new event table.

     INPUTS:
      in_table (Table View):
          The input event table.
      in_event_properties (Route Measure Event Properties):
          The route location fields and the type of events in the input event
          table.

          * Route identifier field-The field containing values that indicate the
          route on which each event is located. This field can be a numeric,
          text, or GUID field.

          * Event type-The type of events in the input event table
          (POINT or LINE).

          * POINT-Point events occur at a precise location along a route. Only a
          from-measure field must be specified.

          * LINE-Line events define a portion of a route. Both from- and to-
          measure fields must be specified.

          * From-measure field-A field containing measure values. This field
          must be numeric and is required when the event type is POINT or LINE

          * To-measure field-A field containing measure values. This field must
          be numeric and is required when the event type is LINE.
      in_routes (Feature Layer):
          The input route features.
      route_id_field (Field):
          The field containing values that uniquely identify each input route.
          The field can be a numeric, text, or GUID field.
      target_routes (Feature Layer):
          The route features to which the input events will be transformed.
      target_route_id_field (Field):
          The field containing values that uniquely identify each target route.
          The field can be a numeric, text, or GUID field.
      out_event_properties (Route Measure Event Properties):
          The route location fields and the type of events that will be written
          to the output event table.

          * Route identifier field-The field that will contain values that
          indicate the route on which each event is located. The field can be a
          numeric, text, or GUID field.

          * Event type-The type of events the output event table will
          contain (POINT or LINE).

          * POINT-Point events occur at a precise location along a route. Only a
          single measure field must be specified.

          * LINE-Line events define a portion of a route. Both from- and to-
          measure fields must be specified.

          * From-measure field-A field that will contain measure values. This
          field is required when the event type is POINT or LINE.

          * To-measure field-A field that will contain measure values. This
          field is required when the event type is LINE.
      cluster_tolerance (Linear Unit):
          The maximum tolerated distance between the input events and the target
          routes.
      in_fields {Boolean}:
          Specifies whether the out_table parameter value will contain route
          location fields plus all the attributes from the input events.

          * FIELDS-The out_table parameter value will contain route location
          fields plus all the attributes from the input events. This is the
          default.

          * NO_FIELDS-The out_table parameter value will only contain route
          location fields plus the ObjectID field from the input events.

     OUTPUTS:
      out_table (Table):
          The table that will be created."""
    ...

