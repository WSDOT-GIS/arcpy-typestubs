"""
This type stub file was generated by pyright.
"""

from arcpy.geoprocessing._base import gptooldoc
from arcpy import _wmx
from arcpy._wmx import *

r"""The Workflow Manager toolbox provides tools for working with
distributed Workflow Manager (Classic) repositories as well as tools
that retrieve job-specific information useful for other data
processing tasks. With the tools in this toolbox, you can retrieve job
version, job's data workspace, replicate/synchronize Workflow Manager
(Classic) repositories, and get a job's area of interest."""
__all__ = [
    "ClearJobReplicationInfo",
    "CreateJobDataReplica",
    "CreateJobs",
    "CreateNewJobs",
    "CreateWorkflowDatabase",
    "ExportJobData",
    "GetJobAOI",
    "GetJobDataWorkspace",
    "GetJobParentVersion",
    "GetJobVersion",
    "ImportJobData",
    "PostJobVersion",
    "PublishWorkflowService",
    "SynchronizeJobData",
    "UpgradeWorkflowDatabase",
]
__alias__ = ...
__all__ += _wmx.__all__

@gptooldoc("ClearJobReplicationInfo_wmx", None)
def ClearJobReplicationInfo(
    Input_Repository_URL=..., Input_DatabasePath=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ClearJobReplicationInfo_wmx(Input_Repository_URL, {Input_DatabasePath})

       Deletes the replication information on a parent repository and sends a
       web service call to all the child repositories in the cluster.
       Consequently, the replication information is cleared from all the
       repositories participating in the cluster.

    INPUTS:
     Input_Repository_URL (String):
         The URL for the Workflow Manager (Classic) Server Object as defined on
         the server.For example,
         http://ServerName/arcgis/rest/services/ServerObjectName/WMServer.
     Input_DatabasePath {File}:
         The Workflow Manager (Classic) connection file (.jtc) for the database
         from which to delete the replication information. If no connection
         file is specified, the current default Workflow Manager (Classic)
         database is used."""
    ...

@gptooldoc("CreateJobDataReplica_wmx", None)
def CreateJobDataReplica(
    Input_Parent_Repository_URL=...,
    Input_Parent_Repository_Name=...,
    Input_Multi_Name=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateJobDataReplica_wmx(Input_Parent_Repository_URL, Input_Parent_Repository_Name, Input_Multi_Name;Input_Multi_Name...)

       Replicates the ArcGIS Workflow Manager (Classic) configuration from a
       parent repository to child repositories using ArcGIS Workflow Manager
       (Classic). Each child repository becomes an identical copy (replica)
       of the parent repository.

    INPUTS:
     Input_Parent_Repository_URL (String):
         The URL for the parent repository as the Workflow Manager (Classic)
         service URL, for example,
         http://localhost/arcgis/rest/services/parent/wmserver.
     Input_Parent_Repository_Name (String):
         The name of the parent repository that will distribute the Workflow
         Manager (Classic) jobs and configuration elements.
     Input_Multi_Name (Value Table):
         The child repositories that will be updated with the parent
         repository configuration.

         * child_name-The name of the child repository.

         * connected-Specify "true" if the child is participating in connected
         replication and both parent and child Workflow Manager (Classic)
         services are published and online. Specify "false" if the child is
         participating in disconnected replication. In this case, only the
         parent Workflow Manager (Classic) service is published and online.

         * URL-If connected is "true", specify the URL of the child repository.
         If connected is "false", specify a folder location to contain the
         configuration file exported from the parent repository. This
         configuration file can be used with the Import Job Data tool to
         replicate the parent repository to this disconnected repository."""
    ...

@gptooldoc("CreateWorkflowDatabase_wmx", None)
def CreateWorkflowDatabase(
    Input_Database_Connection=...,
    AOI_Spatial_Reference=...,
    Import_Configuration=...,
    Input_Custom_Configuration=...,
    User_Store=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateWorkflowDatabase_wmx(Input_Database_Connection, AOI_Spatial_Reference, Import_Configuration, {Input_Custom_Configuration}, {User_Store})

       Creates Workflow Manager (Classic) schema and configures an enterprise
       geodatabase as the Workflow Manager (Classic) database.

    INPUTS:
     Input_Database_Connection (Workspace):
         The location of the enterprise geodatabase connection file that will
         host the Workflow Manager (Classic) schema and configuration. The
         connection file must connect directly to the database, and the
         connection should be made as a database owner.
     AOI_Spatial_Reference (Coordinate System):
         The spatial reference of the AOI feature class. You can
         specify the spatial reference in the following ways:

         * Input the path to a .prj file, such as c:/workspace/watershed.prj.

         * Define a spatial reference object-such as AOI_Spatial_Reference =
         arcpy.SpatialReference("c:/data/Africa/Carthage.prj") or
         AOI_Spatial_Reference = arcpy.SpatialReference('WGS 1984')-prior to
         using this tool, which you then use as the spatial reference
         parameter.
     Import_Configuration (String):
         Specifies the Workflow Manager (Classic) elements to be imported into
         the new Workflow Manager (Classic) database. The default is Minimum
         configuration (Minimum Configuration in Python).

         * Minimum Configuration-Imports the basic elements that the Workflow
         Manager (Classic) system requires.

         * Quick Configuration-Includes the Minimum Configuration elements plus
         samples for several elements.

         * Custom Configuration-Specifies a Workflow Manager (Classic)
         configuration file in the Input Custom Configuration parameter,
         exported from a preexisting database.
     Input_Custom_Configuration {File}:
         A custom configuration file that was exported from an existing
         Workflow Manager (Classic) database.
     User_Store {String}:
         Specifies the user store from which the users and roles will be
         retrieved. The users can be imported from a portal and are assigned to
         roles created in the Workflow Manager (Classic) repository. The portal
         user profile information cannot be edited using ArcGIS Workflow
         Manager (Classic) Administrator. The users and roles can be created in
         the Workflow Manager (Classic) repository using the TRADITIONAL
         option. When using the TRADITIONAL option, the users and roles can be
         imported from the Active Directory in ArcGIS Workflow Manager
         (Classic) Administrator.

         * PORTAL-The users will be imported from the portal you are currently
         signed in to.

         * TRADITIONAL-The users and roles will be created in the Workflow
         Manager (Classic) repository using ArcGIS Workflow Manager (Classic)
         Administrator. Users and roles can be imported from the Active
         Directory when this option is used. This is the default."""
    ...

@gptooldoc("ExportJobData_wmx", None)
def ExportJobData(
    Input_Folder=...,
    Input_DatabasePath=...,
    Input_Repository_Name=...,
    Input_Export_Since=...,
    Input_Export_Until=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ExportJobData_wmx(Input_Folder, {Input_DatabasePath}, {Input_Repository_Name}, {Input_Export_Since}, {Input_Export_Until})

       This tool will export the Workflow Manager (Classic) repository to a
       .jxl file in the specified folder location. The .jxl file will contain
       all the configuration information for the repository as well as
       information about all the jobs. The .jxl file can be imported into
       another Workflow Manager (Classic) repository using the Import Job
       Data tool.

    INPUTS:
     Input_Folder (Folder):
         The location of the JXL file output from the tool. This folder can be
         on a local or a network drive.
     Input_DatabasePath {File}:
         The Workflow Manager (Classic) connection file for the database to be
         exported. If no connection file is specified, the current default
         Workflow Manager (Classic) database in the project is used.
     Input_Repository_Name {String}:
         The name of the Workflow Manager (Classic) repository that contains
         the configuration to be shared. If repository name is not specified,
         the current default Workflow Manager (Classic) repository name is
         used.
     Input_Export_Since {Date}:
         By specifying a date, the JXL exported will only contain changes that
         occurred between the specified time and the current date. The input
         should be in UTC time format.
     Input_Export_Until {Date}:
         By specifying a date, the JXL exported will only contain changes that
         occurred between Export Since and the specified time. The input should
         be in UTC time format."""
    ...

@gptooldoc("ImportJobData_wmx", None)
def ImportJobData(
    Input_File=..., Input_Merge=..., Input_DatabasePath=..., Input_Repository_Name=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ImportJobData_wmx(Input_File, Input_Merge, {Input_DatabasePath}, {Input_Repository_Name})

       Imports configuration and job information from a Workflow Manager
       (Classic) repository to a destination repository. This tool is most
       useful for setting up a repository similar to an existing repository,
       disconnected repository replica creation, and changing
       synchronization.

    INPUTS:
     Input_File (File):
         The JXL file that contains the jobs and configuration elements
         generated using the Export Job Data tool.
     Input_Merge (Boolean):
         Specifies whether contents of the destination Workflow Manager
         (Classic) repository should be combined rather than overwritten with
         the contents of the input configuration file.

         * COMBINE-Combines the contents of the destination Workflow Manager
         (Classic) database with the contents of the input configuration file.

         * REPLACE-Replaces the entire contents of the destination Workflow
         Manager (Classic) database with the contents of the input
         configuration file.
     Input_DatabasePath {File}:
         The Workflow Manager (Classic) connection file that contains the
         connection information to the destination repository. If no connection
         file is specified, the current default Workflow Manager (Classic)
         database in the project will be used.
     Input_Repository_Name {String}:
         The name of the repository as specified in the Workflow Manager
         (Classic) system settings. This name should be unique within all the
         repositories in your cluster. If the repository name is not specified,
         the current default Workflow Manager (Classic) repository name will be
         used."""
    ...

@gptooldoc("PublishWorkflowService_wmx", None)
def PublishWorkflowService(
    service_name=...,
    aoi_service_name=...,
    server=...,
    out_service_draft_location=...,
    input_database_path=...,
    server_folder=...,
    description=...,
    overwrite=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """PublishWorkflowService_wmx(service_name, aoi_service_name, server, out_service_draft_location, {input_database_path}, {server_folder}, {description}, {overwrite})

       Uploads and shares a workflow service and a map service of job
       locations for an ArcGIS Workflow Manager (Classic) repository.

    INPUTS:
     service_name (String):
         The name of the workflow service that will be uploaded and shared.
     aoi_service_name (String):
         The name of the map service that will be uploaded and shared.
     server (ServerConnection):
         The ArcGIS Server connection file (.ags) that contains the information
         needed to connect to ArcGIS Server or the URL to the ArcGIS Enterprise
         portal federated server.
     out_service_draft_location (Folder):
         The folder where service definitions will be saved.
     input_database_path {File}:
         The workflow connection file (.jtc) that contains the information
         needed to connect to the Workflow Manager (Classic) repository.The
         workflow connection in your ArcGIS Pro project will be used if a
         workflow connection file is not defined.
     server_folder {String}:
         The folder to which the services will be published on ArcGIS Server.If
         a folder is not specified, the services will be published to the
         root folder of ArcGIS Server.
     description {String}:
         A description of the services that will be published.
     overwrite {Boolean}:
         Specifies whether the service_name and aoi_service_name services will
         be overwritten.

         * OVERWRITE-The services will be overwritten.

         * NO_OVERWRITE-The services will not be overwritten. This is the
         default.
         If the service_name, aoi_service_name, and server_folder doesn't match
         the existing service names and location, new services will be
         published."""
    ...

@gptooldoc("SynchronizeJobData_wmx", None)
def SynchronizeJobData(
    Input_Parent_Repository_URL=...,
    Input_Parent_Repository_Name=...,
    Input_Multi_Name=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """SynchronizeJobData_wmx(Input_Parent_Repository_URL, Input_Parent_Repository_Name, Input_Multi_Name;Input_Multi_Name...)

       Synchronizes multiple Workflow Manager (Classic) repositories
       participating in a Workflow Manager (Classic) cluster. The tool
       performs two-way synchronization; changes from the child repositories
       are sent to the parent repository and changes from the parent are sent
       to all child repositories.

    INPUTS:
     Input_Parent_Repository_URL (String):
         The URL for the parent repository will be the Workflow Manager
         (Classic) server URL, for example,
         http://localhost/arcgis/rest/services/parent/wmserver.
     Input_Parent_Repository_Name (String):
         The parent repository that will distribute the Workflow Manager
         (Classic) jobs and configuration elements.
     Input_Multi_Name (Value Table):
         The child repositories that will be updated with the parent
         repository configuration.

         * child_repository-The name of the child repository. This must be a
         connected repository.

         * connected-The only accepted value is "true". If any other value is
         provided, the child will not be synchronized.

         * URL-The URL of the child repository.

         * last_sync_time-The date and time in the system format. For example,
         if your system data and time format is MM:DD:YY HH:MM:SS, the value
         will be 08/01/2013 11:30:45."""
    ...

@gptooldoc("UpgradeWorkflowDatabase_wmx", None)
def UpgradeWorkflowDatabase(
    Input_Database_Connection=..., User_Store=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """UpgradeWorkflowDatabase_wmx(Input_Database_Connection, {User_Store})

       Upgrades an existing Workflow Manager (Classic) database with the
       latest schema and configuration. The Workflow Manager (Classic)
       database is used to store the job and configuration information for
       your work management system and one feature class that is used to
       store the geometries for the location of interest (LOI) for your jobs.

    INPUTS:
     Input_Database_Connection (Workspace):
         The location of the enterprise geodatabase connection file to the
         Workflow Manager (Classic) database, which contains Workflow Manager
         (Classic) system tables. The connection file must connect directly to
         the database, and the connection should be made as a database owner.
     User_Store {String}:
         Specifies the user store from which the users and roles will be
         retrieved. The users can be imported from a portal and are assigned to
         roles created in the Workflow Manager (Classic) repository. The portal
         user profile information cannot be edited using ArcGIS Workflow
         Manager (Classic) Administrator. The users and roles can be created in
         the Workflow Manager (Classic) repository using the Traditional
         option. When using the Traditional option, the users and roles may be
         imported from the Active Directory in ArcGIS Workflow Manager
         (Classic) Administrator.

         * PORTAL-The users will be imported from the portal you are currently
         signed in to.

         * TRADITIONAL-The users and roles will be created in the Workflow
         Manager (Classic) repository using ArcGIS Workflow Manager (Classic)
         Administrator. Users and roles can be imported from the Active
         Directory when this option is used. This is the default."""
    ...

@gptooldoc("CreateJobs_wmx", None)
def CreateJobs(
    Input_DatabasePath=...,
    Job_Types=...,
    Number_of_Jobs=...,
    Users=...,
    Priority_of_Jobs=...,
    Feature_Layer_AOI=...,
    Union_option=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateJobs_wmx(Input_DatabasePath, Job_Types, Number_of_Jobs, {Users}, {Priority_of_Jobs}, {Feature_Layer_AOI}, {Union_option})

       Creates one or more jobs of the selected job type and assigns the jobs
       to a user. The created jobs can be prioritized and have an area of
       interest (AOI) defined from a feature layer or feature class.

    INPUTS:
     Input_DatabasePath (File):
         The Workflow Manager (Classic) database connection file that contains
         the job type information. If no connection file is specified, the
         current default Workflow Manager (Classic) database is used.
     Job_Types (String):
         The job type to be used for creating the new job.
     Number_of_Jobs (Long):
         The number of new jobs to be created. This input is ignored if the
         Feature_Layer_AOI parameter has a value or if Union_option = "UNION".
     Users {String}:
         The user to whom the new jobs will be assigned. If no value is
         specified, the default value configured in the job type is used.The
         user or group the new jobs will be assigned to. If no value is
         specified, the default value configured in the job type is used.
     Priority_of_Jobs {String}:
         The priority of the jobs that will be created. If no priority is
         specified, the default value configured in the job type is used.
     Feature_Layer_AOI {Feature Layer}:
         The polygon features whose geometry will be used to create the AOI of
         the new jobs. One job will be created for each feature in the layer
         unless Union_option = "UNION".
     Union_option {Boolean}:
         Specifies whether one job will be created with the union of all AOI
         polygons.

         * UNION-One union polygon will be generated from the AOI polygons and
         one job will be created regardless of the input number of jobs.

         * NO_UNION-Each AOI polygon will be used to generate one job. The
         total number of jobs created is equal to the total number of polygons
         in the feature layer. This is the default."""
    ...

@gptooldoc("CreateNewJobs_wmx", None)
def CreateNewJobs(
    Input_DatabasePath=...,
    Job_Type=...,
    Number_of_Jobs=...,
    Assignment_Type=...,
    Assign_To=...,
    Priority=...,
    Feature_Layer_LOI=...,
    Union=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateNewJobs_wmx(Input_DatabasePath, Job_Type, Number_of_Jobs, {Assignment_Type}, {Assign_To}, {Priority}, {Feature_Layer_LOI}, {Union})

       Creates one or more jobs of the selected job type and assigns the jobs
       to a user or user group. The created jobs can be prioritized and
       assigned a polygon or point location of interest (LOI).

    INPUTS:
     Input_DatabasePath (File):
         The Workflow Manager (Classic) database connection file that contains
         the job type information. If no connection file is specified, the
         current default Workflow Manager (Classic) database is used.
     Job_Type (String):
         The job type to be used for creating the new job.
     Number_of_Jobs (Long):
         The number of jobs to be created. This input is ignored if the
         Feature_Layer_LOI parameter has a value or if Union = "UNION".
     Assignment_Type {String}:
         Specifies the assignment type to use to assign new jobs. If no value
         is specified, the default value configured in the job type is used.

         * Groups-The new jobs will be assigned to a group.

         * Users-The new jobs will be assigned to a user.

         * Unassigned-The new jobs will be unassigned.
     Assign_To {String}:
         The user or group to whom the new jobs will be assigned. The value is
         restricted to a user or group based on the selected assignment type.
     Priority {String}:
         The priority of the jobs that will be created. If no priority is
         specified, the default value configured in the job type is used.
     Feature_Layer_LOI {Feature Layer}:
         The polygon, point, or multipoint features whose geometry will be used
         to create the LOI of the new jobs. One job will be created for each
         feature in the layer unless Union = "UNION".
     Union {Boolean}:
         Specifies whether one job will be created with the union of all
         polygons, point, or multipoint in the input feature layer as the LOI
         of the job.

         * UNION-One union polygon or multipont feature will be generated from
         the LOI features and one job will be created regardless of the input
         number of jobs.

         * NO_UNION-Each feature in the input layer will be used to generate
         the LOI of one job. The total number of jobs created is equal to the
         total number of input features. This is the default."""
    ...

@gptooldoc("GetJobAOI_wmx", None)
def GetJobAOI(
    Input_JobID=..., aoi_Layer=..., Input_DatabasePath=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GetJobAOI_wmx(Input_JobID, aoi_Layer, {Input_DatabasePath})

       Gets the job's location of interest (LOI) as a feature layer. The
       output layer has either the polygon representing the area of interest
       (AOI) of the job or point representing the point of interest (POI) of
       the job.

    INPUTS:
     Input_JobID (String):
         The ID of the job whose AOI is to be retrieved.
     Input_DatabasePath {File}:
         The Workflow Manager (Classic) database connection file for the input
         job. If no connection file is specified, the current default Workflow
         Manager (Classic) database in the project is used.

    OUTPUTS:
     aoi_Layer (Feature Layer):
         The layer name for the location of interest retrieved. The output
         layer has either the polygon representing the area of interest (AOI)
         of the job or point representing the point of interest (POI) of the
         job."""
    ...

@gptooldoc("GetJobDataWorkspace_wmx", None)
def GetJobDataWorkspace(
    Input_JobID=..., Input_DatabasePath=..., Input_SDEFileLocation=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GetJobDataWorkspace_wmx(Input_JobID, {Input_DatabasePath}, {Input_SDEFileLocation})

       Gets the job data workspace as an enterprise geodatabase connection
       file. This tool is typically used in ModelBuilder to retrieve the
       connection file for use as an input to other tools such as Reconcile
       Versions in the model.

    INPUTS:
     Input_JobID (String):
         The ID for the job whose data workspace connection is to be retrieved.
     Input_DatabasePath {File}:
         The Workflow Manager (Classic) database connection file that contains
         the job information. If no connection file is specified, the current
         default Workflow Manager (Classic) database in the project is used.
     Input_SDEFileLocation {Folder}:
         The job's data workspace connection file will be written to the
         specified folder."""
    ...

@gptooldoc("GetJobParentVersion_wmx", None)
def GetJobParentVersion(
    Input_JobID=..., Input_DatabasePath=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GetJobParentVersion_wmx(Input_JobID, {Input_DatabasePath})

       Gets the parent version of a job as an enterprise geodatabase
       connection file to be used for posting edits in a geoprocessing model
       to the correct parent version.

    INPUTS:
     Input_JobID (String):
         The ID for the job's parent version to be retrieved.
     Input_DatabasePath {File}:
         The Workflow Manager (Classic) database connection file that contains
         the job information. If no connection file is specified, the current
         default Workflow Manager (Classic) database in the project is used."""
    ...

@gptooldoc("GetJobVersion_wmx", None)
def GetJobVersion(
    Input_JobID=..., Input_DatabasePath=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GetJobVersion_wmx(Input_JobID, {Input_DatabasePath})

       Gets the job version as an enterprise geodatabase connection file to
       process data in a version.

    INPUTS:
     Input_JobID (String):
         The ID for the job whose version is to be retrieved.
     Input_DatabasePath {File}:
         The Workflow Manager (Classic) database connection file that contains
         the job information. If no connection file is specified, the current
         default Workflow Manager (Classic) database in the project is used."""
    ...

@gptooldoc("PostJobVersion_wmx", None)
def PostJobVersion(
    Input_JobID=..., Input_DatabasePath=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """PostJobVersion_wmx(Input_JobID, {Input_DatabasePath})

       Post the current version edits to the parent version of the job.

    INPUTS:
     Input_JobID (String):
         The ID for the job whose edits from the job's version are going to be
         posted to it's parent version.
     Input_DatabasePath {File}:
         The Workflow Manager (Classic) database connection file that contains
         the job information. If no connection file is specified, the current
         default Workflow Manager (Classic) database will be used."""
    ...
