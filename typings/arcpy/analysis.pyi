"""
This type stub file was generated by pyright.
"""

from arcpy.geoprocessing._base import gptooldoc

r"""The Analysis toolbox contains a powerful set of tools that perform the
most fundamental GIS operations. With the tools in this toolbox, you
can perform overlays, create buffers, calculate statistics, perform
proximity analysis, and much more."""
__all__ = ['ApportionPolygon', 'Buffer', 'Clip', 'CountOverlappingFeatures', 'CreateThiessenPolygons', 'Enrich', 'EnrichLayer', 'Erase', 'Frequency', 'GenerateNearTable', 'GenerateOriginDestinationLinks', 'GeographicallyWeightedRegression', 'GraphicBuffer', 'Identity', 'Intersect', 'MultipleRingBuffer', 'Near', 'PairwiseBuffer', 'PairwiseClip', 'PairwiseDissolve', 'PairwiseErase', 'PairwiseIntegrate', 'PairwiseIntersect', 'PointDistance', 'PolygonNeighbors', 'RemoveOverlapMultiple', 'Select', 'SpatialJoin', 'Split', 'SplitByAttributes', 'Statistics', 'SummarizeNearby', 'SummarizeWithin', 'SymDiff', 'TableSelect', 'TabulateIntersection', 'Union', 'Update']
__alias__ = ...
@gptooldoc('GeographicallyWeightedRegression_analysis', None)
def GeographicallyWeightedRegression(in_features=..., dependent_field=..., explanatory_field=..., out_featureclass=..., kernel_type=..., bandwidth_method=..., distance=..., number_of_neighbors=..., weight_field=..., coefficient_raster_workspace=..., cell_size=..., in_prediction_locations=..., prediction_explanatory_field=..., out_prediction_featureclass=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GeographicallyWeightedRegression_analysis(in_features, dependent_field, explanatory_field;explanatory_field..., out_featureclass, kernel_type, bandwidth_method, {distance}, {number_of_neighbors}, {weight_field}, {coefficient_raster_workspace}, {cell_size}, {in_prediction_locations}, {prediction_explanatory_field;prediction_explanatory_field...}, {out_prediction_featureclass})

        Calculates Geographically Weighted Regression.

     INPUTS:
      in_features (Feature Layer):
          Input features
      dependent_field (Field):
          Dependent variable
      explanatory_field (Field):
          Explanatory variable(s)
      kernel_type (String):
          Kernel type
      bandwidth_method (String):
          Bandwidth method
      distance {Double}:
          Distance
      number_of_neighbors {Long}:
          Number of neighbors
      weight_field {Field}:
          Weights
      coefficient_raster_workspace {Workspace}:
          Coefficient raster workspace
      cell_size {Analysis Cell Size}:
          Output cell size
      in_prediction_locations {Feature Layer}:
          Prediction locations
      prediction_explanatory_field {Field}:
          Prediction explanatory variable(s)

     OUTPUTS:
      out_featureclass (Feature Class):
          Output feature class
      out_prediction_featureclass {Feature Class}:
          Output prediction feature class"""
    ...

@gptooldoc('Clip_analysis', None)
def Clip(in_features=..., clip_features=..., out_feature_class=..., cluster_tolerance=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Clip_analysis(in_features, clip_features, out_feature_class, {cluster_tolerance})

        Extracts input features that overlay the clip features.

     INPUTS:
      in_features (Feature Layer / Scene Layer / Building Scene Layer / File):
          The features that will be clipped.
      clip_features (Feature Layer):
          The features that will be used to clip the input features.
      cluster_tolerance {Linear Unit}:
          The minimum distance separating all feature coordinates as well as the
          distance a coordinate can move in x or y (or both). Set the value
          higher for data with less coordinate accuracy and lower for data with
          extremely high accuracy.Changing this parameter's value may cause
          failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used.

     OUTPUTS:
      out_feature_class (Feature Class / File):
          The dataset that will be created."""
    ...

@gptooldoc('Select_analysis', None)
def Select(in_features=..., out_feature_class=..., where_clause=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Select_analysis(in_features, out_feature_class, {where_clause})

        Extracts features from an input feature class or input feature layer,
        typically using a select or Structured Query Language (SQL)
        expression, and stores them in an output feature class.

     INPUTS:
      in_features (Feature Layer):
          The input feature class or layer from which features are selected.
      where_clause {SQL Expression}:
          An SQL expression used to select a subset of features. For more
          information about SQL syntax, see SQL reference for query expressions
          used in ArcGIS.

     OUTPUTS:
      out_feature_class (Feature Class):
          The output feature class to be created. If no expression is used, it
          contains all input features."""
    ...

@gptooldoc('Split_analysis', None)
def Split(in_features=..., split_features=..., split_field=..., out_workspace=..., cluster_tolerance=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Split_analysis(in_features, split_features, split_field, out_workspace, {cluster_tolerance})

        Splits an input with overlaying features to create a subset of output
        feature classes.

     INPUTS:
      in_features (Feature Layer):
          The features to be split.
      split_features (Feature Layer):
          Polygon features containing a tabular field whose unique values are
          used to split the input features and provide the output feature
          classes' names.
      split_field (Field):
          The character field used to split the input features. This field's
          values identify the split features used to create each output feature
          class. The split field's unique values provide the names of the output
          feature classes.
      out_workspace (Workspace / Feature Dataset):
          The existing workspace where the output feature classes are stored.
      cluster_tolerance {Linear Unit}:
          The minimum distance separating all feature coordinates (nodes and
          vertices) as well as the distance a coordinate can move in x or y (or
          both). Set the value higher for data that has less coordinate accuracy
          and lower for datasets with extremely high accuracy.Changing this
          parameter's value may cause failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used."""
    ...

@gptooldoc('SplitByAttributes_analysis', None)
def SplitByAttributes(Input_Table=..., Target_Workspace=..., Split_Fields=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """SplitByAttributes_analysis(Input_Table, Target_Workspace, Split_Fields;Split_Fields...)

        Splits an input dataset by unique attributes.

     INPUTS:
      Input_Table (Table View):
          The input feature class or table containing the data that will be
          split into the target workspace.
      Target_Workspace (Workspace / Feature Dataset):
          The existing workspace where the output feature classes or tables will
          be written.
      Split_Fields (Field):
          The fields on which the input will be split into new feature classes
          or tables."""
    ...

@gptooldoc('TableSelect_analysis', None)
def TableSelect(in_table=..., out_table=..., where_clause=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """TableSelect_analysis(in_table, out_table, {where_clause})

        Selects table records matching a Structured Query Language (SQL)
        expression and writes them to an output table.

     INPUTS:
      in_table (Table View / Raster Layer):
          The table containing records matching the specified expression that
          will be written to the output table.
      where_clause {SQL Expression}:
          An SQL expression used to select a subset of records. For more
          information on SQL syntax, see SQL reference for elements used in
          query expressions.

     OUTPUTS:
      out_table (Table):
          The output table containing records from the input table that match
          the specified expression."""
    ...

@gptooldoc('ApportionPolygon_analysis', None)
def ApportionPolygon(in_features=..., apportion_fields=..., target_features=..., out_features=..., method=..., estimation_features=..., weight_field=..., maintain_geometries=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ApportionPolygon_analysis(in_features, apportion_fields;apportion_fields..., target_features, out_features, method, {estimation_features}, {weight_field}, {maintain_geometries})

        Summarizes the attributes of an input polygon layer based on the
        spatial overlay of a target polygon layer and assigns the summarized
        attributes to the target polygons. The target polygons have summed
        numeric attributes derived from the input polygons that each target
        overlaps. This process is typically known as apportioning or
        apportionment.

     INPUTS:
      in_features (Feature Layer):
          The polygon features with numeric attributes that will be summarized
          into the target polygon geometries.
      apportion_fields (Field):
          The numeric fields from the input polygons that will be summarized by
          each target polygon and recorded in the output feature class.
      target_features (Feature Layer):
          The polygon features and their apportioned fields that will be copied
          to the output feature class.
      method (String):
          Specifies the method that will be used to apportion the fields from
          the input polygons to the target polygons.

          * AREA-The amount that each input polygon contributes to the
          summarized values for each target feature will be determined by the
          area of overlap between the two features. If an input feature overlaps
          two target features by the same amount, the apportioned fields will be
          divided in two and contribute to both target features by half of the
          total value. This is the default.

          * LENGTH-The attributes from the input features will be divided based
          on the percentage of how much of a line is within each target feature.
          Only the line intersecting the input feature is included in the
          calculation. The line outside the input feature is excluded. For
          example, if one target feature covers 750 meters of a line, and
          another target feature covers 250 meters of a line, 75% (750 / 1000)
          of the input feature's attribute values will be aggregated to the
          first target feature, and 25% (250 / 1000) of the input feature's
          attribute values will be aggregated to the second target feature.

          * POINTS-The attributes from the input features will be divided based
          on the number of points inside each target feature overlapping an
          input feature. Points outside of the input feature are excluded.
          Optionally, a weight field can be specified so that the total weight
          of all points within each target feature will be used to determine how
          the input features' attribute values are divided. For example, if two
          target features overlap one input feature, and there are two points
          inside the first target feature and eight points inside the second
          target feature, 20% (2 / 10) of the input feature's attribute values
          will be aggregated to the first target feature, and 80% (8 / 10) of
          the input feature's attribute values will be aggregated to the second
          target feature.
      estimation_features {Feature Layer}:
          The input point or polyline features that will be used to estimate the
          percent of the input polygon apportion fields to apportion to the
          target polygon. This is the amount of the point or line within the
          intersection divided by the amount within the input feature to create
          a percentage.
      weight_field {Field}:
          A numeric field from the target polygon layer that will be used to
          adjust which target polygons receive larger apportioned values from
          the input polygons' fields to apportion. Targets with higher weight
          are apportioned a higher ratio of the field values.If estimation
          features are specified, the weight field will be a
          numeric field from the estimation features that will adjust the values
          apportioned to the target polygons intersecting the estimation
          features.
      maintain_geometries {Boolean}:
          Specifies whether the output feature class will maintain the original
          geometries from the target polygon layer.

          * MAINTAIN_GEOMETRIES-The output feature class will maintain the
          original geometries of the target polygon layer. This is the default.

          * INTERSECT_GEOMETRIES-The output feature class will be a geometric
          intersection of the target polygons and the input polygons. Only areas
          of the target polygons that overlap an input polygon will be included
          in the output.

     OUTPUTS:
      out_features (Feature Class):
          The output feature class containing the attribute and geometries of
          the target polygons as well as the specified apportion fields from the
          input polygons."""
    ...

@gptooldoc('CountOverlappingFeatures_analysis', None)
def CountOverlappingFeatures(in_features=..., out_feature_class=..., min_overlap_count=..., out_overlap_table=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CountOverlappingFeatures_analysis(in_features;in_features..., out_feature_class, {min_overlap_count}, {out_overlap_table})

        Generates planarized overlapping features from the input features. The
        count of overlapping features is written to the output features.

     INPUTS:
      in_features (Feature Layer):
          The input feature classes or layers. The input features can be point,
          multipoint, line, or polygon. If multiple inputs are provided, they
          must all be the same geometry type.
      min_overlap_count {Long}:
          Limits the output to only locations that meet or exceed the specified
          number of overlaps. The default value is 1.

     OUTPUTS:
      out_feature_class (Feature Class):
          The output feature class containing the overlap count.
      out_overlap_table {Table}:
          The output table containing records for each individual overlapping
          geometry."""
    ...

@gptooldoc('Erase_analysis', None)
def Erase(in_features=..., erase_features=..., out_feature_class=..., cluster_tolerance=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Erase_analysis(in_features, erase_features, out_feature_class, {cluster_tolerance})

        Creates a feature class by overlaying the input features with the
        erase features. Only those portions of the input features falling
        outside the erase features are copied to the output feature class.

     INPUTS:
      in_features (Feature Layer):
          The input feature class or layer.
      erase_features (Feature Layer):
          The features that will be used to erase coincident features in the
          input.
      cluster_tolerance {Linear Unit}:
          The minimum distance separating all feature coordinates (nodes and
          vertices) as well as the distance a coordinate can move in x or y (or
          both).Changing this parameter's value may cause failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class that will contain only those input features that are
          not coincident with the erase features."""
    ...

@gptooldoc('Identity_analysis', None)
def Identity(in_features=..., identity_features=..., out_feature_class=..., join_attributes=..., cluster_tolerance=..., relationship=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Identity_analysis(in_features, identity_features, out_feature_class, {join_attributes}, {cluster_tolerance}, {relationship})

        Computes a geometric intersection of the input features and identity
        features. The input features or portions thereof that overlap identity
        features will get the attributes of those identity features.

     INPUTS:
      in_features (Feature Layer):
          The input feature class or layer.
      identity_features (Feature Layer):
          The identity feature class or layer. It must be polygon or the same
          geometry type as the input features.
      join_attributes {String}:
          Specifies how attributes will be transferred to the output feature
          class.

          * ALL-All the attributes (including FIDs) from the input features, as
          well as the identity features, will be transferred to the output
          features. If no intersection is found, the identity feature values
          will not be transferred to the output (their values will be set to
          empty strings or 0) and the identity feature FID will be -1. This is
          the default.

          * NO_FID-All the attributes except the FID from the input features and
          identity features will be transferred to the output features. If no
          intersection is found, the identity feature values will not be
          transferred to the output (their values will be set to empty strings
          or 0).

          * ONLY_FID-All the attributes from the input features and only the FID
          from the identity features will be transferred to the output features.
          If no intersection is found, the identity features' FID attribute
          value in the output will be -1.
      cluster_tolerance {Linear Unit}:
          The minimum distance separating all feature coordinates (nodes and
          vertices) as well as the distance a coordinate can move in x or y (or
          both).Changing this parameter's value may cause failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used.
      relationship {Boolean}:
          Specifies whether additional spatial relationships between the
          in_features and identity_features parameter values will be written to
          the output. This only applies when the geometry type of the
          in_features parameter value is line and the geometry type of the
          identity_features parameter value is polygon.

          * NO_RELATIONSHIPS-No additional spatial relationship will be written
          to the output.

          * KEEP_RELATIONSHIPS-The output line features will contain two
          additional fields, LEFT_poly and RIGHT_poly. These fields contain the
          feature ID of the identity_features parameter value on the left and
          right side of the line feature.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class that will be created and to which the results will
          be written."""
    ...

@gptooldoc('Intersect_analysis', None)
def Intersect(in_features=..., out_feature_class=..., join_attributes=..., cluster_tolerance=..., output_type=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Intersect_analysis(in_features;in_features..., out_feature_class, {join_attributes}, {cluster_tolerance}, {output_type})

        Computes a geometric intersection of the input features. Features or
        portions of features that overlap in all layers or feature classes
        will be written to the output feature class.

     INPUTS:
      in_features (Value Table):
          A list of the input feature classes or layers. When the distance
          between features is less than the cluster tolerance, the features with
          the lower rank will snap to the feature with the higher rank. The
          highest rank is 1. For more information, see Priority ranks and
          geoprocessing tools.
      join_attributes {String}:
          Specifies the attributes from the input features that will be
          transferred to the output feature class.

          * ALL-All the attributes from the input features will be transferred
          to the output feature class. This is the default.

          * NO_FID-All the attributes except the FID attribute from the input
          features will be transferred to the output feature class.

          * ONLY_FID-Only the FID attribute from the input features will be
          transferred to the output feature class.
      cluster_tolerance {Linear Unit}:
          The minimum distance separating all feature coordinates (nodes and
          vertices) as well as the distance a coordinate can move in x or y (or
          both).Changing this parameter's value may cause failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used.
      output_type {String}:
          Specifies the type of intersections that will be returned.

          * INPUT-The intersections returned will be the same geometry type as
          the input features with the lowest dimension geometry. If all inputs
          are polygons, the output feature class will contain polygons. If one
          or more of the inputs are lines and none of the inputs are points, the
          output will be line. If one or more of the inputs are points, the
          output feature class will contain points. This is the default.

          * LINE-The intersections returned will be line. This is only valid if
          none of the inputs are points.

          * POINT-The intersections returned will be point. If the inputs are
          line or polygon, the output will be a multipoint feature class.

     OUTPUTS:
      out_feature_class (Feature Class):
          The output feature class."""
    ...

@gptooldoc('RemoveOverlapMultiple_analysis', None)
def RemoveOverlapMultiple(in_features=..., out_feature_class=..., method=..., join_attributes=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """RemoveOverlapMultiple_analysis(in_features;in_features..., out_feature_class, {method}, {join_attributes})

        Removes overlap between polygons contained in multiple input layers.

     INPUTS:
      in_features (Value Table):
          The input features containing the overlapping polygons.
      method {String}:
          Specifies how the overlap between polygons will be removed.

          * CENTER_LINE-Overlap will be removed by creating a border that evenly
          distributes the area of intersection between polygons. This is the
          default.

          * THIESSEN-Overlap will be removed using straight lines to divide the
          area of intersection.

          * GRID-Overlap will be removed by creating a grid of parallel lines
          used to define a natural division between polygons.
      join_attributes {String}:
          Specifies which attributes of input layers will be copied to the
          output.

          * ALL-All attributes from the input features will be transferred to
          the output feature class. This is the default.

          * NO_FID-All attributes from the input features, except the FID field,
          will be transferred to the output feature class.

          * ONLY_FID-Only the FID field from the input features will be
          transferred to the output feature class.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class containing the new polygon features."""
    ...

@gptooldoc('SpatialJoin_analysis', None)
def SpatialJoin(target_features=..., join_features=..., out_feature_class=..., join_operation=..., join_type=..., field_mapping=..., match_option=..., search_radius=..., distance_field_name=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """SpatialJoin_analysis(target_features, join_features, out_feature_class, {join_operation}, {join_type}, {field_mapping}, {match_option}, {search_radius}, {distance_field_name})

        Joins attributes from one feature to another based on the spatial
        relationship. The target features and the joined attributes from the
        join features are written to the output feature class.

     INPUTS:
      target_features (Feature Layer):
          Attributes of the target features and the attributes from the joined
          features will be transferred to the output feature class. However, a
          subset of attributes can be defined by the field map parameter.
      join_features (Feature Layer):
          The attributes from the join features will be joined to the attributes
          of the target features. See the explanation of the join_operation
          parameter for details on how the aggregation of joined attributes are
          affected by the type of join operation.
      join_operation {String}:
          The operation that will join the target features and join features in
          the output feature class if multiple join features are found that have
          the same spatial relationship with a single target feature.

          * JOIN_ONE_TO_ONE-If multiple join features are found that have the
          same spatial relationship with a single target feature, the attributes
          from the multiple join features will be aggregated using a field map
          merge rule. For example, if a point target feature is found within two
          separate polygon join features, the attributes from the two polygons
          will be aggregated before being transferred to the output point
          feature class. If one polygon has an attribute value of 3 and the
          other has a value of 7, and a Sum merge rule is specified, the
          aggregated value in the output feature class will be 10. This is the
          default.

          * JOIN_ONE_TO_MANY-If multiple join features are found that have the
          same spatial relationship with a single target feature, the output
          feature class will contain multiple copies (records) of the target
          feature. For example, if a single point target feature is found within
          two separate polygon join features, the output feature class will
          contain two copies of the target feature: one record with the
          attributes of one polygon and another record with the attributes of
          the other polygon.
      join_type {Boolean}:
          Specifies whether all target features will be maintained in the output
          feature class (known as an outer join) or only those that have the
          specified spatial relationship with the join features (an inner join).

          * KEEP_ALL-All target features will be maintained in the output (outer
          join). This is the default.

          * KEEP_COMMON-Only those target features that have the specified
          spatial relationship with the join features will be maintained in the
          output feature class (inner join). For example, if a point feature
          class is specified for the target features, and a polygon feature
          class is specified for the join features, with a match_option value of
          WITHIN, the output feature class will only contain those target
          features that are within a polygon join feature. Any target features
          not within a join feature will be excluded from the output.
      field_mapping {Field Mappings}:
          The attribute fields that will be in the output with the corresponding
          field properties and source fields. By default, all fields from the
          inputs will be included.Fields can be added, deleted, renamed, and
          reordered, and you can
          change their properties. Merge rules allow you to specify how
          values from two or more
          input fields will be merged or combined into a single output value.
          The following merge rules can be used to determine how the output
          field will be populated with values:

          * First-Use the input fields' first value.

          * Last-Use the input fields' last value.

          * Join-Concatenate (join) the input field values.

          * Sum-Calculate the total of the input field values.

          * Mean-Calculate the mean (average) of the input field values.

          * Median-Calculate the median (middle) of the input field values.

          * Mode-Use the value with the highest frequency.

          * Min-Use the minimum value of all the input field values.

          * Max-Use the maximum value of all the input field values.

          * Standard deviation-Use the standard deviation classification method
          on all the input field values.

          * Count-Find the number of records included in the calculation.
          In Python, you can use the FieldMappings class to define this
          parameter.
      match_option {String}:
          Specifies the criteria that will be used to match rows.

          * INTERSECT-The features in the join features will be matched if they
          intersect a target feature. This is the default. Specify a distance in
          the search_radius parameter.

          * INTERSECT_3D-The features in the join features will be matched if
          they intersect a target feature in three-dimensional space (x, y, and
          z). Specify a distance in the search_radius parameter.

          * WITHIN_A_DISTANCE-The features in the join features will be matched
          if they are within a specified distance of a target feature. Specify a
          distance in the search_radius parameter.

          * WITHIN_A_DISTANCE_GEODESIC-Same as WITHIN_A_DISTANCE except that
          geodesic distance is used rather than planar distance. Choose this if
          your data covers a large geographic extent or the coordinate system of
          the inputs is unsuitable for distance calculations.

          * WITHIN_A_DISTANCE_3D-The features in the join features will be
          matched if they are within a specified distance of a target feature in
          three-dimensional space. Specify a distance in the search_radius
          parameter.

          * CONTAINS-The features in the join features will be matched if a
          target feature contains them. The target features must be polygons or
          polylines. For this option, the target features cannot be points, and
          the join features can only be polygons when the target features are
          also polygons.

          * COMPLETELY_CONTAINS-The features in the join features will be
          matched if a target feature completely contains them. Polygon can
          completely contain any feature. Point cannot completely contain any
          feature, not even a point. Polyline can completely contain only
          polyline and point.

          * CONTAINS_CLEMENTINI-This spatial relationship yields the same
          results as COMPLETELY_CONTAINS with the exception that if the join
          feature is entirely on the boundary of the target feature (no part is
          properly inside or outside) the feature will not be matched.
          Clementini defines the boundary polygon as the line separating inside
          and outside, the boundary of a line is defined as its end points, and
          the boundary of a point is always empty.

          * WITHIN-The features in the join features will be matched if a target
          feature is within them. It is opposite to CONTAINS. For this option,
          the target features can only be polygons when the join features are
          also polygons. Point can be join feature only if point is target.

          * COMPLETELY_WITHIN-The features in the join features will be matched
          if a target feature is completely within them. This is opposite to
          COMPLETELY_CONTAINS.

          * WITHIN_CLEMENTINI-The result will be identical to WITHIN except if
          the entirety of the feature in the join features is on the boundary of
          the target feature, the feature will not be matched. Clementini
          defines the boundary polygon as the line separating inside and
          outside, the boundary of a line is defined as its end points, and the
          boundary of a point is always empty.

          * ARE_IDENTICAL_TO-The features in the join features will be matched
          if they are identical to a target feature. Both join and target
          feature must be of same shape type-point-to-point, line-to-line, and
          polygon-to-polygon.

          * BOUNDARY_TOUCHES-The features in the join features will be matched
          if they have a boundary that touches a target feature. When the target
          and join features are lines or polygons, the boundary of the join
          feature can only touch the boundary of the target feature and no part
          of the join feature can cross the boundary of the target feature.

          * SHARE_A_LINE_SEGMENT_WITH-The features in the join features will be
          matched if they share a line segment with a target feature. The join
          and target features must be lines or polygons.

          * CROSSED_BY_THE_OUTLINE_OF-The features in the join features will be
          matched if a target feature is crossed by their outline. The join and
          target features must be lines or polygons. If polygons are used for
          the join or target features, the polygon's boundary (line) will be
          used. Lines that cross at a point will be matched, not lines that
          share a line segment.

          * HAVE_THEIR_CENTER_IN-The features in the join features will be
          matched if a target feature's center falls within them. The center of
          the feature is calculated as follows: for polygon and multipoint the
          geometry's centroid is used, and for line input the geometry's
          midpoint is used. Specify a distance in the search_radius parameter.

          * CLOSEST-The feature in the join features that is closest to a target
          feature is matched. See the usage tip for more information. Specify a
          distance in the search_radius parameter.

          * CLOSEST_GEODESIC-Same as CLOSEST except that geodesic distance is
          used rather than planar distance. Choose this if your data covers a
          large geographic extent or the coordinate system of the inputs is
          unsuitable for distance calculations

          * LARGEST_OVERLAP-The feature in the join features will be matched
          with the target feature with the largest overlap.
      search_radius {Linear Unit}:
          Join features within this distance of a target feature will be
          considered for the spatial join. A search radius is only valid when
          the spatial relationship is specified (the match_option parameter is
          set to INTERSECT, WITHIN_A_DISTANCE, WITHIN_A_DISTANCE_GEODESIC,
          HAVE_THEIR_CENTER_IN, CLOSEST, or CLOSEST_GEODESIC). For example,
          using a search radius of 100 meters with the WITHIN_A_DISTANCE spatial
          relationship will join feature within 100 meters of a target feature.
          For the three WITHIN_A_DISTANCE relationships, if no value is
          specified for search_radius, a distance of 0 is used.
      distance_field_name {String}:
          The name of the field that contains the distance between the target
          feature and the closest join feature. This field will be added to the
          output feature class. This parameter is only valid when the spatial
          relationship is specified (match_option is set to CLOSEST or
          CLOSEST_GEODESIC. The value of this field is -1 if no feature is
          matched within a search radius. If no field name is provided, the
          field will not be added to the output feature class.

     OUTPUTS:
      out_feature_class (Feature Class):
          A new feature class containing the attributes of the target and join
          features. By default, all attributes of target features and the
          attributes of the joined features will be written to the output.
          However, the set of attributes to be transferred can be defined by the
          field map parameter."""
    ...

@gptooldoc('SymDiff_analysis', None)
def SymDiff(in_features=..., update_features=..., out_feature_class=..., join_attributes=..., cluster_tolerance=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """SymDiff_analysis(in_features, update_features, out_feature_class, {join_attributes}, {cluster_tolerance})

        Computes a geometric intersection of the input and update features,
        returning the input features and update features that do not overlap.
        Features or portions of features in the input and update features that
        do not overlap will be written to the output feature class.

     INPUTS:
      in_features (Feature Layer):
          The input feature class or layer.
      update_features (Feature Layer):
          The update feature class or layer. The geometry type must be the same
          as that of the input feature class or layer.
      join_attributes {String}:
          Specifies the attributes that will be transferred to the output
          feature class.

          * ALL-All the attributes from the input features will be transferred
          to the output feature class. This is the default.

          * NO_FID-All the attributes except the FID from the input features
          will be transferred to the output feature class.

          * ONLY_FID-Only the FID field from the input features will be
          transferred to the output feature class.
      cluster_tolerance {Linear Unit}:
          The minimum distance separating all feature coordinates (nodes and
          vertices) as well as the distance a coordinate can move in x or y (or
          both).Changing this parameter's value may cause failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class to which the results will be written."""
    ...

@gptooldoc('Union_analysis', None)
def Union(in_features=..., out_feature_class=..., join_attributes=..., cluster_tolerance=..., gaps=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Union_analysis(in_features;in_features..., out_feature_class, {join_attributes}, {cluster_tolerance}, {gaps})

        Computes a geometric union of the input features. All features and
        their attributes will be written to the output feature class.

     INPUTS:
      in_features (Value Table):
          The input feature classes or layers. When the distance between
          features is less than the cluster tolerance, the features with the
          lower rank will snap to the feature with the higher rank. The highest
          rank is one. All of the input features must be polygons.
      join_attributes {String}:
          Specifies which attributes from the input features will be transferred
          to the output feature class.

          * ALL-All the attributes from the input features will be transferred
          to the output feature class. This is the default.

          * NO_FID-All the attributes except the FID from the input features
          will be transferred to the output feature class.

          * ONLY_FID-Only the FID field from the input features will be
          transferred to the output feature class.
      cluster_tolerance {Linear Unit}:
          The minimum distance separating all feature coordinates (nodes and
          vertices) as well as the distance a coordinate can move in x or y (or
          both).Changing this parameter's value may cause failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used.
      gaps {Boolean}:
          Specifies whether a feature will be created for areas in the output
          that are completely enclosed by polygons.Gaps are areas in the output
          feature class that are completely
          enclosed by other polygons (created from the intersection of features
          or from existing holes in the input polygons). These areas are not
          invalid, but you can identify them for analysis. To identify the gaps
          in the output, set this parameter to NO_GAPS, and a feature will be
          created in these areas. To select these features, query the output
          feature class based on all the input feature's FID values being equal
          to -1.

          * GAPS-A feature will not be created for an area in the output that is
          completely enclosed by polygons. This is the default.

          * NO_GAPS-A feature will be created for an area in the output that is
          completely enclosed by polygons. This feature will have no attribute
          values and will have a FID value of -1.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class that will contain the results."""
    ...

@gptooldoc('Update_analysis', None)
def Update(in_features=..., update_features=..., out_feature_class=..., keep_borders=..., cluster_tolerance=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Update_analysis(in_features, update_features, out_feature_class, {keep_borders}, {cluster_tolerance})

        Computes the geometric intersection of the input features and update
        features. The attributes and geometry of the input features are
        updated by the update features in the output feature class.

     INPUTS:
      in_features (Feature Layer):
          The input feature class or layer. The geometry type must be polygon.
      update_features (Feature Layer):
          The features that will be used to update the input features. The
          geometry type must be polygon.
      keep_borders {Boolean}:
          Specifies whether the boundary of the update polygon features will be
          kept.

          * BORDERS-The outside border of the update_features parameter value
          will be kept in the out_feature_class parameter value. This is the
          default.

          * NO_BORDERS-The outside border of the update_features parameter value
          will not be kept after it is inserted into the in_features. Item
          values of the update_features parameter value take precedence over
          in_features parameter value attributes.
      cluster_tolerance {Linear Unit}:
          The minimum distance separating all feature coordinates (nodes and
          vertices) as well as the distance a coordinate can move in x or y (or
          both).Changing this parameter's value may cause failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class that will contain the results."""
    ...

@gptooldoc('PairwiseBuffer_analysis', None)
def PairwiseBuffer(in_features=..., out_feature_class=..., buffer_distance_or_field=..., dissolve_option=..., dissolve_field=..., method=..., max_deviation=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """PairwiseBuffer_analysis(in_features, out_feature_class, buffer_distance_or_field, {dissolve_option}, {dissolve_field;dissolve_field...}, {method}, {max_deviation})

        Creates buffer polygons around input features to a specified distance
        using a parallel processing approach.

     INPUTS:
      in_features (Feature Layer):
          The input point, line, or polygon features to be buffered.
      buffer_distance_or_field (Linear Unit / Field):
          The distance around the input features that will be buffered.
          Distances can be provided as either a value representing a linear
          distance or as a field from the input features that contains the
          distance to buffer each feature.If linear units are not specified or
          are entered as Unknown, the
          linear unit of the input features' spatial reference will be used.When
          specifying a distance, if the desired linear unit has two words,
          such as Decimal Degrees, combine the two words into one (for example,
          20 DecimalDegrees).
      dissolve_option {String}:
          Specifies the type of dissolve operation that will be performed to
          remove buffer overlap.

          * NONE-An individual buffer for each feature will be maintained,
          regardless of overlap. This is the default.

          * ALL-All buffers will be dissolved together into a single feature,
          removing any overlap.

          * LIST-Any buffers sharing attribute values in the listed fields
          (carried over from the input features) will be dissolved.
      dissolve_field {Field}:
          The list of fields from the input features on which the output buffers
          will be dissolved. Any buffers sharing attribute values in the listed
          fields (carried over from the input features) will be dissolved.
      method {String}:
          Specifies whether the planar or geodesic method will be used to create
          the buffers.

          * PLANAR-If the input features are in a projected coordinate system,
          Euclidean buffers will be created. If the input features are in a
          geographic coordinate system and the buffer distance is in linear
          units (meters, feet, and so forth, as opposed to angular units such as
          degrees), geodesic buffers will be created. This is the default. You
          can use the Output Coordinate System environment setting to specify
          the coordinate system to use. For example, if your input features are
          in a projected coordinate system, you can set the environment to a
          geographic coordinate system to create geodesic buffers.

          * GEODESIC-All buffers will be created using a shape-preserving
          geodesic buffer method, regardless of the input coordinate system.
      max_deviation {Linear Unit}:
          The maximum distance the resulting output buffer polygon boundary will
          deviate from the true buffer boundary.The true buffer boundary is a
          curve. However, the resulting polygon
          boundary is a densified polyline. Using this parameter, you can
          control how the output polygon boundary approximates the true buffer
          boundary.If this parameter is not set or is set to 0, the tool will
          identify
          the maximum deviation. It is recommended that you use the default
          value. Performance degradation (in the tool and in subsequent
          analyses) may result from using a maximum offset deviation that is too
          small.See the max_deviation parameter information in the Densify tool
          documentation for details.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class containing the output buffers."""
    ...

@gptooldoc('PairwiseClip_analysis', None)
def PairwiseClip(in_features=..., clip_features=..., out_feature_class=..., cluster_tolerance=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """PairwiseClip_analysis(in_features, clip_features, out_feature_class, {cluster_tolerance})

        Extracts input features that overlay the clip features.

     INPUTS:
      in_features (Feature Layer):
          The features that will be clipped.
      clip_features (Feature Layer):
          The features that will be used to clip the input features.
      cluster_tolerance {Linear Unit}:
          The minimum distance separating all feature coordinates (nodes and
          vertices) as well as the distance a coordinate can move in x or y (or
          both).Changing this parameter's value may cause failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class that will be created."""
    ...

@gptooldoc('PairwiseDissolve_analysis', None)
def PairwiseDissolve(in_features=..., out_feature_class=..., dissolve_field=..., statistics_fields=..., multi_part=..., concatenation_separator=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """PairwiseDissolve_analysis(in_features, out_feature_class, {dissolve_field;dissolve_field...}, {statistics_fields;statistics_fields...}, {multi_part}, {concatenation_separator})

        Aggregates features based on specified attributes using a parallel
        processing approach.

     INPUTS:
      in_features (Feature Layer):
          The features to be aggregated.
      dissolve_field {Field}:
          The field or fields on which features will be aggregated.
      statistics_fields {Value Table}:
          Specifies the numeric field or fields containing the attribute values
          that will be used to calculate the specified statistic. Multiple
          statistic and field combinations can be specified. Null values are
          excluded from all calculations.Text attribute fields can be summarized
          using first and last
          statistics. Numeric attribute fields can be summarized using any
          statistic.Available statistics types are as follows:

          * SUM-The values for the specified field will be added together.

          * MEAN-The average for the specified field will be calculated.

          * MIN-The smallest value for all records of the specified field will
          be found.

          * MAX-The largest value for all records of the specified field will be
          found.

          * RANGE-The range of values (maximum minus minimum) for the specified
          field will be calculated.

          * STD-The standard deviation of values in the specified field will be
          calculated.

          * COUNT-The number of values included in the calculations will be
          found. Each value will be counted except null values. To determine the
          number of null values in a field, create a count on the field in
          question, create a count on a different field that does not contain
          null values (for example, the OID if present), and subtract the two
          values.

          * FIRST-The specified field value of the first record in the input
          will be used.

          * LAST-The specified field value of the last record in the input will
          be used.

          * MEDIAN-The median for all records of the specified field will be
          calculated.

          * VARIANCE-The variance for all records of the specified field will be
          calculated.

          * UNIQUE-The number of unique values of the specified field will be
          counted.

          * CONCATENATE-The values for the specified field will be concatenated.
          The values can be separated using the concatenation_separator
          parameter.
      multi_part {Boolean}:
          Specifies whether multipart features will be included in the output.

          * MULTI_PART-Multipart features will be included in the output. This
          is the default.

          * SINGLE_PART-Multipart features will not be included in the output.
          Individual features will be created for each part.
      concatenation_separator {String}:
          A character or characters that will be used to concatenate values when
          the CONCATENATION option is used for the statistics_fields parameter.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class to be created that will contain the aggregated
          features."""
    ...

@gptooldoc('PairwiseErase_analysis', None)
def PairwiseErase(in_features=..., erase_features=..., out_feature_class=..., cluster_tolerance=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """PairwiseErase_analysis(in_features, erase_features, out_feature_class, {cluster_tolerance})

        Computes a pairwise intersection of the input and erase features. Only
        those portions of the input features falling outside the erase
        features will be copied to the output feature class.

     INPUTS:
      in_features (Feature Layer):
          The input feature class or layer.
      erase_features (Feature Layer):
          The features that will be used to erase coincident features in the
          input.
      cluster_tolerance {Linear Unit}:
          The minimum distance separating all feature coordinates (nodes and
          vertices) as well as the distance a coordinate can move in x or y (or
          both).Changing this parameter's value may cause failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used.

     OUTPUTS:
      out_feature_class (Feature Class):
          The output feature class."""
    ...

@gptooldoc('PairwiseIntegrate_analysis', None)
def PairwiseIntegrate(in_features=..., cluster_tolerance=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """PairwiseIntegrate_analysis(in_features;in_features..., {cluster_tolerance})

        Analyzes the coordinate locations of feature vertices among features
        in one or more feature classes. Those that fall within a specified
        distance of one another are assumed to represent the same location and
        are assigned a common coordinate value (in other words, they are
        colocated). The tool also adds vertices where feature vertices are
        within the x,y tolerance of an edge and where line segments intersect.

     INPUTS:
      in_features (Value Table):
          The feature classes to be integrated. When the distance between
          features is small in comparison to the tolerance, the vertices or
          points will be clustered (moved to be coincident).
      cluster_tolerance {Linear Unit}:
          The distance that determines the range in which feature vertices are
          made coincident. To minimize undesired movement of vertices, the x,y
          tolerance should be fairly small. If no value is specified, the xy
          tolerance from the first dataset in the list of inputs will be
          used.Changing this parameter's value may cause failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used."""
    ...

@gptooldoc('PairwiseIntersect_analysis', None)
def PairwiseIntersect(in_features=..., out_feature_class=..., join_attributes=..., cluster_tolerance=..., output_type=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """PairwiseIntersect_analysis(in_features;in_features..., out_feature_class, {join_attributes}, {cluster_tolerance}, {output_type})

        Computes a pairwise intersection of the input features. Features or
        portions of features that overlap between the input feature layers or
        feature classes are written to the output feature class. Pairwise
        intersection refers to selecting one feature from the first input and
        intersecting it with the features in the second input that it
        overlaps.

     INPUTS:
      in_features (Value Table):
          The input feature classes or layers to intersect. Only two inputs are
          allowed.
      join_attributes {String}:
          Specifies which attributes from the input features will be transferred
          to the output feature class.

          * ALL-All the attributes from the input features will be transferred
          to the output feature class. This is the default.

          * NO_FID-All the attributes except the FID from the input features
          will be transferred to the output feature class.

          * ONLY_FID-Only the FID field from the input features will be
          transferred to the output feature class.
      cluster_tolerance {Linear Unit}:
          The minimum distance separating all feature coordinates (nodes and
          vertices) as well as the distance a coordinate can move in x or y (or
          both).Changing this parameter's value may cause failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used.
      output_type {String}:
          Specifies the type of intersections that will be returned.

          * INPUT-The intersections returned will be the same geometry type as
          the input features with the lowest dimension geometry. If all inputs
          are polygons, the output feature class will contain polygons. If one
          or more of the inputs are lines and none of the inputs are points, the
          output will be lines. If one or more of the inputs are points, the
          output feature class will contain points. This is the default.

          * LINE-The intersections returned will be line. This is only valid if
          none of the inputs are points.

          * POINT-The intersections returned will be point. If the inputs are
          line or polygon, the output will be a multipoint feature class.

     OUTPUTS:
      out_feature_class (Feature Class):
          The output feature class."""
    ...

@gptooldoc('Buffer_analysis', None)
def Buffer(in_features=..., out_feature_class=..., buffer_distance_or_field=..., line_side=..., line_end_type=..., dissolve_option=..., dissolve_field=..., method=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Buffer_analysis(in_features, out_feature_class, buffer_distance_or_field, {line_side}, {line_end_type}, {dissolve_option}, {dissolve_field;dissolve_field...}, {method})

        Creates buffer polygons around input features to a specified distance.

     INPUTS:
      in_features (Feature Layer):
          The input point, line, or polygon features to be buffered.
      buffer_distance_or_field (Linear Unit / Field):
          The distance around the input features that will be buffered.
          Distances can be provided as either a value representing a linear
          distance or as a field from the input features that contains the
          distance to buffer each feature.If linear units are not specified or
          are entered as Unknown, the
          linear unit of the input features' spatial reference will be used.When
          specifying a distance, if the desired linear unit has two words,
          such as Decimal Degrees, combine the two words into one (for example,
          20 DecimalDegrees).
      line_side {String}:
          Specifies the sides of the input features that will be buffered. This
          parameter is only supported for polygon and line features.

          * FULL-For lines, buffers will be generated on both sides of the line.
          For polygons, buffers will be generated around the polygon and will
          contain and overlap the area of the input features. This is the
          default.

          * LEFT-For lines, buffers will be generated on the topological left of
          the line. This option is not supported for polygon input features.

          * RIGHT-For lines, buffers will be generated on the topological right
          of the line. This option is not supported for polygon input features.

          * OUTSIDE_ONLY-For polygons, buffers will be generated outside the
          input polygon only (the area inside the input polygon will be erased
          from the output buffer). This option is not supported for line input
          features.
          This optional parameter is not available with a Desktop Basic or
          Desktop Standard license.
      line_end_type {String}:
          Specifies the shape of the buffer at the end of line input features.
          This parameter is not valid for polygon input features.

          * ROUND-The ends of the buffer will be round, in the shape of a half
          circle. This is the default.

          * FLAT-The ends of the buffer will be flat or squared and will end at
          the endpoint of the input line feature.
          This optional parameter is not available with a Desktop Basic or
          Desktop Standard license.
      dissolve_option {String}:
          Specifies the type of dissolve that will be performed to remove buffer
          overlap.

          * NONE-An individual buffer for each feature will be maintained,
          regardless of overlap. This is the default.

          * ALL-All buffers will be dissolved together into a single feature,
          removing any overlap.

          * LIST-Any buffers sharing attribute values in the listed fields
          (carried over from the input features) will be dissolved.
      dissolve_field {Field}:
          The list of fields from the input features on which the output buffers
          will be dissolved. Any buffers sharing attribute values in the listed
          fields (carried over from the input features) will be dissolved.
      method {String}:
          Specifies whether the planar or geodesic method will be used to create
          the buffers.

          * PLANAR-If the input features are in a projected coordinate system,
          Euclidean buffers will be created. If the input features are in a
          geographic coordinate system and the buffer distance is in linear
          units (meters, feet, and so forth, as opposed to angular units such as
          degrees), geodesic buffers will be created. This is the default. You
          can use the Output Coordinate System environment setting to specify
          the coordinate system to use. For example, if your input features are
          in a projected coordinate system, you can set the environment to a
          geographic coordinate system to create geodesic buffers.

          * GEODESIC-All buffers will be created using a shape-preserving
          geodesic buffer method, regardless of the input coordinate system.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class containing the output buffers."""
    ...

@gptooldoc('CreateThiessenPolygons_analysis', None)
def CreateThiessenPolygons(in_features=..., out_feature_class=..., fields_to_copy=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateThiessenPolygons_analysis(in_features, out_feature_class, {fields_to_copy})

        Creates Thiessen polygons from point features.

     INPUTS:
      in_features (Feature Layer):
          The point input features from which Thiessen polygons will be
          generated.
      fields_to_copy {String}:
          Specifies which fields from the input features will be transferred to
          the output feature class.

          * ONLY_FID-Only the FID field from the input features will be
          transferred to the output feature class. This is the default.

          * ALL-All fields from the input features will be transferred to the
          output feature class.

     OUTPUTS:
      out_feature_class (Feature Class):
          The output feature class containing the Thiessen polygons that are
          generated from the point input features."""
    ...

@gptooldoc('GenerateNearTable_analysis', None)
def GenerateNearTable(in_features=..., near_features=..., out_table=..., search_radius=..., location=..., angle=..., closest=..., closest_count=..., method=..., distance_unit=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateNearTable_analysis(in_features, near_features;near_features..., out_table, {search_radius}, {location}, {angle}, {closest}, {closest_count}, {method}, {distance_unit})

        Calculates distances and other proximity information between features
        in one or more feature classes or layers. Unlike the Near tool, which
        modifies the input, Generate Near Table writes results to a new stand-
        alone table and supports finding more than one near feature.

     INPUTS:
      in_features (Feature Layer):
          The input features, which can be point, polyline, polygon, or
          multipoint type.
      near_features (Feature Layer):
          The input feature layers or feature classes containing near feature
          candidates. The near features can be point, polyline, polygon, or
          multipoint. If multiple layers or feature classes are specified, a
          NEAR_FC field will be added to the input table and will store the
          paths of the source feature class containing the nearest feature
          found. The same feature class or layer can be used as both input
          features and near features.
      search_radius {Linear Unit}:
          The radius that will be used to search for near features. If no value
          is specified, all near features will be considered. If a distance but
          no unit or unknown is specified, the units of the coordinate system of
          the input features will be used. If the GEODESIC option is used for
          the method parameter, use a linear unit such as kilometers or miles.
      location {Boolean}:
          Specifies whether x- and y-coordinates of the input feature's location
          and closest location of the near feature will be written to the
          FROM_X, FROM_Y, NEAR_X, and NEAR_Y fields.

          * NO_LOCATION-Locations will not be written to the output table. This
          is the default.

          * LOCATION-Locations will be written to the output table.
      angle {Boolean}:
          Specifies whether the near angle will be calculated and written to the
          NEAR_ANGLE field in the output table. A near angle measures direction
          of the line connecting an input feature to its nearest feature at
          their closest locations. When the PLANAR method is used for the method
          parameter, the angle will be within the range of -180° to 180°, with
          0° to the east, 90° to the north, 180° (or -180°) to the west, and
          -90° to the south. When the GEODESIC method is used for the method
          parameter, the angle will be within the range of -180° to 180°, with
          0° to the north, 90° to the east, 180° (or -180°) to the south, and
          -90° to the west.

          * NO_ANGLE-The near angle will not be calculated and the NEAR_ANGLE
          field will not be added to the output table. This is the default.

          * ANGLE-The near angle will be calculated and the NEAR_ANGLE field
          will be added to the output table.
      closest {Boolean}:
          Specifies whether only the closest near feature will be written to the
          output table.

          * CLOSEST-Only the closest near feature will be written to the output
          table. This is the default.

          * ALL-Multiple near features will be written to the output table (a
          limit can be specified in the closest_count parameter).
      closest_count {Long}:
          Limits the number of near features reported for each input feature.
          This parameter is ignored if the closest parameter is set to CLOSEST.
      method {String}:
          Specifies whether a shortest path on a spheroid (geodesic) or a flat
          earth (planar) distance method will be used. It is recommended that
          you use the GEODESIC method for data stored in a coordinate system
          that is not appropriate for distance measurements (for example, Web
          Mercator or any geographic coordinate system) and for a dataset that
          spans a large geographic area.

          * PLANAR-Planar distance will be used between features. This is the
          default.

          * GEODESIC-Geodesic distance will be used between features. This
          method takes into account the curvature of the spheroid and correctly
          deals with data near the international date line and the poles.
      distance_unit {String}:
          Specifies the unit of measurement for the NEAR_DIST filed. When no
          unit of measurement is specified, the values in the NEAR_DIST field
          will be in the linear unit of the input feature's coordinate system.
          If the input is in a geographic coordinate system and the geodesic
          method is used, the units of the NEAR_DIST field will be meters.

          * Kilometers-The unit will be kilometers.

          * Meters-The unit will be meters.

          * NauticalMilesInt-The unit will be international nautical miles.

          * MilesInt-The unit will be statute miles.

          * YardsInt-The unit will be international yards.

          * FeetInt-The unit will be international feet.

          * NauticalMiles-The unit will be U.S. survey nautical miles.

          * Miles-The unit will be U.S. survey miles.

          * Yards-The unit will be U.S. survey yards.

          * Feet-The unit will be U.S. survey feet.

     OUTPUTS:
      out_table (Table):
          The output table containing the result of the analysis."""
    ...

@gptooldoc('GenerateOriginDestinationLinks_analysis', None)
def GenerateOriginDestinationLinks(origin_features=..., destination_features=..., out_feature_class=..., origin_group_field=..., destination_group_field=..., line_type=..., num_nearest=..., search_distance=..., distance_unit=..., aggregate_links=..., sum_fields=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateOriginDestinationLinks_analysis(origin_features, destination_features, out_feature_class, {origin_group_field}, {destination_group_field}, {line_type}, {num_nearest}, {search_distance}, {distance_unit}, {aggregate_links}, {sum_fields;sum_fields...})

        Generates connecting lines from origin features to destination
        features. This is often referred to as a spider diagram.

     INPUTS:
      origin_features (Feature Layer):
          The input features from which links will be generated.
      destination_features (Feature Layer):
          The destination features to which links will be generated.
      origin_group_field {Field}:
          The attribute field from the input origin features that will be used
          for grouping. Features that have the same group field value between
          origins and destinations will be connected with a link.
      destination_group_field {Field}:
          The attribute field from the input destination features that will be
          used for grouping. Features that have the same group field value
          between origins and destinations will be connected with a link.
      line_type {String}:
          Specifies whether a shortest path on a spheroid (geodesic) or a
          Cartesian projected earth (planar) will be used when generating the
          output links. Geodesic lines will have a slight curve when their
          length exceeds approximately 50 kilometers, as the curvature of the
          Earth makes the shortest distance between two points appear curved
          when viewed on a 2D map.It is recommended that you use the GEODESIC
          line type with data stored
          in a coordinate system that is not appropriate for distance
          measurements (for example, Web Mercator and any geographic coordinate
          system) or any dataset that spans a large geographic area.

          * PLANAR-Planar distance will be used between features. This is the
          default.

          * GEODESIC-Geodesic distances will be used between features. This line
          type takes into account the curvature of the spheroid and correctly
          deals with data near the dateline and poles.
      num_nearest {Double}:
          The maximum number of links that will be generated per origin feature
          to the nearest destination features. If no number is specified, the
          tool will generate links between all origin and destination
          features.For example, using a value of 1 will generate links between
          each
          origin feature and its closest destination feature.
      search_distance {Double}:
          The maximum distance between an origin and destination feature that
          will produce a link feature in the output. The unit of the search
          distance is specified in the distance unit parameter. If no search
          distance is specified, the tool will generate links between all origin
          and destination features regardless of their distance apart.
      distance_unit {String}:
          Specifies the units used to measure the length of the links. Distances
          for each link will appear in the LINK_DIST field. If a distance unit
          is not specified, the distance unit of the origin features' coordinate
          system will be used.

          * KILOMETERS-The distance between origin and destination will be
          calculated in kilometers.

          * METERS-The distance between origin and destination will be
          calculated in meters.

          * MILES-The distance between origin and destination will be calculated
          in miles.

          * NAUTICALMILES-The distance between origin and destination will be
          calculated in nautical miles.

          * YARDS-The distance between origin and destination will be calculated
          in yards.

          * FEET-The distance between origin and destination will be calculated
          in feet.
      aggregate_links {Boolean}:
          Specifies whether overlapping links will be aggregated.

          * AGGREGATE_OVERLAPPING-Overlapping links will be aggregated if the
          starting point coordinates are the same.

          * NO_AGGREGATE-Overlapping links will not be aggregated. This is the
          default.
      sum_fields {Value Table}:
          Specifies the numeric field or fields containing the attribute values
          that will be used to calculate the specified statistic. Multiple
          statistic and field combinations can be specified. Null values are
          excluded from all calculations.Text attribute fields can be summarized
          using first and last
          statistics. Numeric attribute fields can be summarized using any
          statistic.Available statistics types are as follows:

          * SUM-The values for the specified field will be added together.

          * MEAN-The average for the specified field will be calculated.

          * MIN-The smallest value for all records of the specified field will
          be found.

          * MAX-The largest value for all records of the specified field will be
          found.

          * RANGE-The range of values (maximum minus minimum) for the specified
          field will be calculated.

          * STD-The standard deviation of values in the specified field will be
          calculated.

          * COUNT-The number of values included in the statistical calculations
          will be found. Each value will be counted except null values. To
          determine the number of null values in a field, create a count on the
          field in question, create a count on a different field that does not
          contain null values (for example, the OID if present), and subtract
          the two values.

          * FIRST-The specified field value of the first record in the input
          will be used.

          * LAST-The specified field value of thee last record in the input will
          be used.

          * MEDIAN-The median for all records of the specified field will be
          calculated.

          * VARIANCE-The variance for all records of the specified field will be
          calculated.

          * UNIQUE-The number of unique values of the specified field will be
          counted.

     OUTPUTS:
      out_feature_class (Feature Class):
          The output polyline feature class that will contain the output links."""
    ...

@gptooldoc('GraphicBuffer_analysis', None)
def GraphicBuffer(in_features=..., out_feature_class=..., buffer_distance_or_field=..., line_caps=..., line_joins=..., miter_limit=..., max_deviation=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GraphicBuffer_analysis(in_features, out_feature_class, buffer_distance_or_field, {line_caps}, {line_joins}, {miter_limit}, {max_deviation})

        Creates buffer polygons around input features to a specified distance.
        A number of cartographic shapes are available for buffer ends (caps)
        and corners (joins) when the buffer is generated around the feature.

     INPUTS:
      in_features (Feature Layer):
          The input point, line, or polygon features to be buffered.
      buffer_distance_or_field (Linear Unit / Field):
          The distance around the input features that will be buffered.
          Distances can be provided as either a value representing a linear
          distance or as a field from the input features that contains the
          distance to buffer each feature.If linear units are not specified or
          are entered as Unknown, the
          linear unit of the input features' spatial reference will be used.When
          specifying a distance, if the desired linear unit has two words,
          such as Decimal Degrees, combine the two words into one (for example,
          20 DecimalDegrees).
      line_caps {String}:
          Specifies the type of caps (ends) of the input features that will be
          buffered. This parameter is only supported for point and polygon
          features.

          * SQUARE-The output buffer will have a square cap around the end of
          the input segment. This is the default.

          * BUTT-The output buffer will have a cap perpendicular to the end of
          the input segment.

          * ROUND-The output buffer will have a cap that is round at the end of
          the input segment.
      line_joins {String}:
          The shape of the buffer at corners where two segments join. This
          parameter is only supported for line and polygon features.

          * MITER-Results in an output buffer feature that is a square or sharp
          shape around corners. For example, a square input polygon feature will
          have a square buffer feature. This is the default.

          * BEVEL-The output buffer feature for inner corners will be squared
          while the outer corner will be cut perpendicular to the furthest point
          of the corner.

          * ROUND-The output buffer feature for inner corners will be squared
          while the outer corner will be round.
      miter_limit {Double}:
          Where line segments meet at a sharp angle and a line_joins of MITER
          has been specified, this parameter can be used to control how sharp
          corners in buffer output come to a point. In some cases, the outer
          angle where two lines join is quite large when using the MITER
          line_joins. This could cause the point of the corner to extend further
          than intended.
      max_deviation {Linear Unit}:
          The maximum distance the output buffer polygon boundary will deviate
          from the true ideal buffer boundary. The true buffer boundary is a
          curve, and the output polygon boundary is a densified polyline. Using
          this parameter, you can control how well the output polygon boundary
          approximates the true buffer boundary.If the parameter is not set or
          is set to 0, the tool will identify the
          maximum deviation. It is recommended that you use the default value.
          Performance degradation in the tool or in subsequent analysis can
          result from using a maximum offset deviation value that is too
          small.See the max_deviation parameter information in the Densify tool
          documentation for more details.

     OUTPUTS:
      out_feature_class (Feature Class):
          The feature class containing the output buffers."""
    ...

@gptooldoc('MultipleRingBuffer_analysis', None)
def MultipleRingBuffer(Input_Features=..., Output_Feature_class=..., Distances=..., Buffer_Unit=..., Field_Name=..., Dissolve_Option=..., Outside_Polygons_Only=..., Method=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """MultipleRingBuffer_analysis(Input_Features, Output_Feature_class, Distances;Distances..., {Buffer_Unit}, {Field_Name}, {Dissolve_Option}, {Outside_Polygons_Only}, {Method})

        Creates multiple buffers at specified distances around the input
        features. These buffers can be merged and dissolved using the buffer
        distance values to create nonoverlapping buffers.

     INPUTS:
      Input_Features (Feature Layer):
          The input point, line, or polygon features to be buffered.
      Distances (Double):
          The list of buffer distances.
      Buffer_Unit {String}:
          Specifies the linear unit that will be used with the distance values.

          * Default-The linear unit of the input features' spatial reference
          will be used. If the Output Coordinate System geoprocessing
          environment has been set, the linear unit of the environment will be
          used. The linear unit is ignored if the input features have an unknown
          or undefined spatial reference. This is the default.

          * Inches-The unit will be inches.

          * Feet-The unit will be feet.

          * Yards-The unit will be yards.

          * Miles-The unit will be miles.

          * NauticalMiles-The unit will be nautical miles.

          * Millimeters-The unit will be millimeters.

          * Centimeters-The unit will be centimeters.

          * Decimeters-The unit will be decimeters.

          * Meters-The unit will be meters.

          * Kilometers-The unit will be kilometers.

          * DecimalDegrees-The unit will be decimal degrees.

          * Points-The unit will be points.
      Field_Name {String}:
          The name of the field in the output feature class that will store the
          buffer distance used to create each buffer feature. The default is
          distance. The field will be of type Double.
      Dissolve_Option {String}:
          Specifies whether buffers will be dissolved to resemble rings around
          the input features.

          * ALL-Buffers will be dissolved to resemble rings around the input
          features that do not overlap (think of these as rings or donuts around
          the input features). The smallest buffer will cover the area of its
          input feature plus the buffer distance, and subsequent buffers will be
          rings around the smallest buffer that do not cover the area of the
          input feature or smaller buffers. All buffers of the same distance
          will be dissolved into a single feature. This is the default.

          * NONE-Buffers will not be dissolved. All buffer areas will be
          maintained regardless of overlap. Each buffer will cover its input
          feature plus the area of any smaller buffers.
      Outside_Polygons_Only {Boolean}:
          Specifies whether the buffers will cover the input features. This
          parameter is valid only for polygon input features.

          * FULL-Buffers will overlap or cover the input features. This is the
          default.

          * OUTSIDE_ONLY-Buffers will be rings around the input features, and
          will not overlap or cover the input features (the area inside the
          input polygon will be erased from the buffer).
      Method {String}:
          Specifies the method used to create the buffer.

          * PLANAR-Buffers will be created using a Euclidean buffer method. This
          is the default when the input has a projected coordinate system.

          * GEODESIC-Buffers will be created using a shape-preserving geodesic
          buffer method. This is the default when the input has a geographic
          coordinate system.

     OUTPUTS:
      Output_Feature_class (Feature Class):
          The output feature class that will contain multiple buffers."""
    ...

@gptooldoc('Near_analysis', None)
def Near(in_features=..., near_features=..., search_radius=..., location=..., angle=..., method=..., field_names=..., distance_unit=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Near_analysis(in_features, near_features;near_features..., {search_radius}, {location}, {angle}, {method}, {field_names;field_names...}, {distance_unit})

        Calculates distance and additional proximity information between the
        input features and the closest feature in another layer or feature
        class.

     INPUTS:
      in_features (Feature Layer):
          The input features, which can be point, polyline, polygon, or
          multipoint type.
      near_features (Feature Layer):
          One or more feature layers or feature classes containing near feature
          candidates. The near features can be point, polyline, polygon, or
          multipoint. If multiple layers or feature classes are specified, the
          NEAR_FC field will be added to the input table and will store the
          paths of the source feature class containing the nearest feature
          found. The same feature class or layer can be used as both input
          features and near features.
      search_radius {Linear Unit}:
          The radius that will be used to search for near features. If no value
          is specified, all near features will be considered. If a distance but
          no unit or unknown is specified, the units of the coordinate system of
          the input features will be used. If the GEODESIC option is used for
          the method parameter, use a linear unit such as kilometers or miles.
      location {Boolean}:
          Specifies whether x- and y-coordinates of the closest location of the
          near feature will be written to the NEAR_X and NEAR_Y fields.

          * NO_LOCATION-Location information will not be written. This is the
          default.

          * LOCATION-Location information will be written.
      angle {Boolean}:
          Specifies whether the near angle will be calculated and written to the
          NEAR_ANGLE field in the output table. A near angle measures direction
          of the line connecting an input feature to its nearest feature at
          their closest locations. When the PLANAR method is used for the method
          parameter, the angle will be within the range of -180° to 180°, with
          0° to the east, 90° to the north, 180° (or -180°) to the west, and
          -90° to the south. When the GEODESIC method is used, the angle will be
          within the range of -180° to 180°, with 0° to the north, 90° to the
          east, 180° (or -180°) to the south, and -90° to the west.

          * NO_ANGLE-The near angle value will not be calculated or written.
          This is the default.

          * ANGLE-The near angle value will be calculated and written to the
          NEAR_ANGLE field.
      method {String}:
          Specifies whether a shortest path on a spheroid (geodesic) or a flat
          earth (planar) distance method will be used. It is recommended that
          you use the GEODESIC method for data stored in a coordinate system
          that is not appropriate for distance measurements (for example, Web
          Mercator or any geographic coordinate system) and for a dataset that
          spans a large geographic area.

          * PLANAR-Planar distance will be used between features. This is the
          default.

          * GEODESIC-Geodesic distance will be used between features. This
          method takes into account the curvature of the spheroid and correctly
          deals with data near the international date line and the poles.
      field_names {Value Table}:
          The names of the attribute fields that will be added during
          processing.If this parameter is not used or any fields that will be
          added are
          excluded from this parameter, the default field names will be used.By
          default, NEAR_FID and NEAR_DIST fields will be added, NEAR_X and
          NEAR_Y fields will be added when the location parameter is set to
          LOCATION, the NEAR_ANGLE field will be added when the angle parameter
          is set to ANGLE, and the NEAR_FC field will be added when multiple
          inputs are used.
      distance_unit {String}:
          Specifies the unit of measurement for the NEAR_DIST filed. When no
          unit of measurement is specified, the values in the NEAR_DIST field
          will be in the linear unit of the input feature's coordinate system.
          If the input is in a geographic coordinate system and the geodesic
          method is used, the units of the NEAR_DIST field will be meters.

          * Kilometers-The unit will be kilometers.

          * Meters-The unit will be meters.

          * NauticalMilesInt-The unit will be international nautical miles.

          * MilesInt-The unit will be statute miles.

          * YardsInt-The unit will be international yards.

          * FeetInt-The unit will be international feet.

          * NauticalMiles-The unit will be U.S. survey nautical miles.

          * Miles-The unit will be U.S. survey miles.

          * Yards-The unit will be U.S. survey yards.

          * Feet-The unit will be U.S. survey feet."""
    ...

@gptooldoc('PointDistance_analysis', None)
def PointDistance(in_features=..., near_features=..., out_table=..., search_radius=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """PointDistance_analysis(in_features, near_features, out_table, {search_radius})

        Determines the distances from input point features to all points in
        the near features within a specified search radius.

     INPUTS:
      in_features (Feature Layer):
          The point features from which distances to the near features will be
          calculated.
      near_features (Feature Layer):
          The points to which distances from the input features will be
          calculated. Distances between points within the same feature class or
          layer can be determined by specifying the same feature class or layer
          for the input and near features.
      search_radius {Linear Unit}:
          Specifies the radius used to search for candidate near features. The
          near features within this radius are considered for calculating the
          nearest feature. If no value is specified (that is, the default
          (empty) radius is used) all near features are considered for
          calculation. The unit of search radius defaults to units of the input
          features. The units can be changed to any other unit. However, this
          has no impact on the units of the output DISTANCE field which is based
          on the units of the coordinate system of the input features.

     OUTPUTS:
      out_table (Table):
          The table containing the list of input features and information about
          all near features within the search radius. If a search radius is not
          specified, distances from all input features to all near features are
          calculated."""
    ...

@gptooldoc('PolygonNeighbors_analysis', None)
def PolygonNeighbors(in_features=..., out_table=..., in_fields=..., area_overlap=..., both_sides=..., cluster_tolerance=..., out_linear_units=..., out_area_units=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """PolygonNeighbors_analysis(in_features, out_table, {in_fields;in_fields...}, {area_overlap}, {both_sides}, {cluster_tolerance}, {out_linear_units}, {out_area_units})

        Creates a table with statistics based on polygon contiguity (overlaps,
        coincident edges, or nodes).

     INPUTS:
      in_features (Feature Layer):
          The input polygon features.
      in_fields {Field}:
          The input attribute field or fields that will be used to identify
          unique polygons or polygon groups and represent them in the output.
      area_overlap {Boolean}:
          Specifies whether overlapping relationships will be analyzed and
          included in the output.

          * NO_AREA_OVERLAP-Overlapping relationships will not be analyzed or
          included in the output. This is the default.

          * AREA_OVERLAP-Overlapping relationships will be analyzed and included
          in the output.
      both_sides {Boolean}:
          Specifies whether both sides of neighbor relationships will be
          included in the output.

          * BOTH_SIDES-For a pair of neighboring polygons, both neighboring
          information of one polygon being the source and the other being the
          neighbor and vice versa will be included. This is the default.

          * NO_BOTH_SIDES-For a pair of neighboring polygons, only neighboring
          information of one polygon being the source and the other being the
          neighbor will be included. The reciprocal relationship will not be
          included.
      cluster_tolerance {Linear Unit}:
          The minimum distance between coordinates before they will be
          considered equal. By default, this is the x,y tolerance of the input
          features.Changing this parameter's value may cause failure or
          unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used.
      out_linear_units {String}:
          Specifies the units that will be used to report the total length of
          the coincident edge between neighboring polygons. The default is the
          input feature units.

          * UNKNOWN-The units will be unknown.

          * INCHES-The units will be inches.

          * FEET-The units will be feet.

          * YARDS-The units will be yards.

          * MILES-The units will be miles.

          * NAUTICAL_MILES-The units will be nautical miles.

          * MILLIMETERS-The units will be millimeters.

          * CENTIMETERS-The units will be centimeters.

          * DECIMETERS-The units will be decimeters.

          * METERS-The units will be meters.

          * KILOMETERS-The units will be kilometers.

          * DECIMAL_DEGREES-The units will be decimal degrees.

          * POINTS-The units will be points.
      out_area_units {String}:
          Specifies the units that will be used to report the area overlap of
          neighboring polygons. The default is the input feature units. This
          parameter is only enabled when the area_overlap parameter is set to
          AREA_OVERLAP.

          * UNKNOWN-The units will be unknown.

          * ARES-The units will be ares.

          * ACRES-The units will be acres.

          * HECTARES-The units will be hectares.

          * SQUARE_INCHES-The units will be square inches.

          * SQUARE_FEET-The units will be square feet.

          * SQUARE_YARDS-The units will be square yards.

          * SQUARE_MILES-The units will be square miles.

          * SQUARE_MILLIMETERS-The units will be square millimeters.

          * SQUARE_CENTIMETERS-The units will be square centimeters.

          * SQUARE_DECIMETERS-The units will be square decimeters.

          * SQUARE_METERS-The units will be square meters.

          * SQUARE_KILOMETERS-The units will be square kilometers.

     OUTPUTS:
      out_table (Table):
          The output table."""
    ...

@gptooldoc('Enrich_analysis', None)
def Enrich(in_features=..., out_feature_class=..., variables=..., buffer_type=..., distance=..., unit=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Enrich_analysis(in_features, out_feature_class, {variables;variables...}, {buffer_type}, {distance}, {unit})

        Enriches data by adding demographic and landscape facts about the
        people and places that surround or are inside data locations. The
        output is a duplicate of your input with additional attribute fields.
        This tool requires an ArcGIS Online organizational account or a
        locally installed Business Analyst dataset.

     INPUTS:
      in_features (Feature Layer):
          The features to be enriched.
      variables {String}:
          The variables to be summarized and added to the output feature class.
      buffer_type {String}:
          Input point features must have an associated boundary polygon to
          enrich. When connected to ArcGIS Online, travel mode options are
          dynamically populated. Input line features can only use Straight Line
          distance. The default value is Straight Line.
      distance {Double}:
          Determines the distance or size of an area to enrich (for example, a
          1-mile buffer or 5-minute walk time). Units correspond to the buffer
          type. The default value is 1.
      unit {String}:
          The units associated with the distance or time parameter.

          * Miles-Miles

          * Yards-Yards

          * Feet-Feet

          * Kilometers-Kilometers

          * Meters-Meters

          * Hours-Hours

          * Minutes-Minutes

          * Seconds-Seconds

     OUTPUTS:
      out_feature_class (Feature Class):
          A new layer containing both the input attributes and user-selected
          attributes. User-selected attributes are summarized from underlying
          demographic boundaries. Only the area inside the input boundary is
          considered."""
    ...

@gptooldoc('EnrichLayer_analysis', None)
def EnrichLayer(in_features=..., out_feature_class=..., country=..., data_collection=..., variables=..., buffer_type=..., distance=..., unit=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """EnrichLayer_analysis(in_features, out_feature_class, country, data_collection, {variables;variables...}, {buffer_type}, {distance}, {unit})

        Enriches your data by adding demographic and landscape facts about the
        people and places that surround or are inside your data locations. The
        output is a duplicate of your input with new attribute fields added to
        the table. This tool requires an ArcGIS Online organizational account
        and consumes credits.

     INPUTS:
      in_features (Feature Layer):
          The features to enrich with new data.
      country (String):
          The country whose data collections and variables are used to enrich
          the input. You can use the Global country code to obtain enriched data
          from anywhere in the world. Global can also be used when you have
          input features that are in more than one country.You can specify the
          value that is used in the tool dialog box, such as
          Canada (CA), or you can use the two-character country code, such as
          CA.
      data_collection (String):
          The collection of data used to enrich the input. You can specify a
          data collection without selecting any variables to enrich your data
          with all variables included in that collection. The Global country
          code only includes one data collection, KeyGlobalFacts.You can use a
          value such as Health & Personal Care
          (HealthPersonalCare), or you can use the collection name
          HealthPersonalCare. See the Esri Demographics site for more
          information on data collections and their variables.
      variables {String}:
          The specific variables used to enrich the input. Variables can be from
          one or multiple data collections.Variables should be entered in a
          Python list. You can use a value such
          as 2013 Total$: Health care (HealthPersonalCare.THS148), or you can
          use the collection name and variable name HealthPersonalCare.THS148.
          See the Esri Demographics site for more information on data
          collections and their variables.
      buffer_type {String}:
          If the input features are points, you must define an area around them
          to enrich from one of the following seven types. If the input features
          are lines, STRAIGHT_LINE is the only valid option.

          * STRAIGHT_LINE-Straight-line or Euclidean distance is used as the
          distance measure.

          * DRIVE_TIME-Driving time is used as the distance measure. Current
          posted speed limits, one-way streets, and turn restrictions affect
          driving time.

          * DRIVING_DISTANCE-Driving distance is used as the distance measure.
          One-way streets and turn restrictions affect driving distance.

          * TRUCKING_TIME-Trucking time is used as the distance measure. Current
          posted speed limits, one-way streets, and turn restrictions affect
          trucking time. This option is similar to Driving time, but travel can
          only occur on roads that are suitable for trucks.

          * TRUCKING_DISTANCE-Trucking distance is used as the distance measure.
          One-way streets and turn restrictions affect trucking distance. This
          option is similar to Driving distance, but travel can only occur on
          roads that are suitable for trucks.

          * WALKING_TIME-Walking time is used as the distance measure.
          Measurements are made using a walking speed of 5 KPH (3.1 MPH). Travel
          is allowed where pedestrians are allowed, such as trails, but not on
          limited-access highways.

          * WALKING_DISTANCE-Walking distance is used as the distance measure.
          Travel is allowed where pedestrians are allowed, such as trails, but
          not on limited-access highways.
      distance {Double}:
          The value that determines the straight-line distance or drive time
          around the input features for areas to enrich. The unit of the
          distance or time should be supplied in the unit parameter.
      unit {String}:
          Specifies the unit for distance parameter value.

          * MILES-Miles

          * YARDS-Yards

          * FEET-Feet

          * KILOMETERS-Kilometers

          * METERS-Meters

          * HOURS-Hours

          * MINUTES-Minutes

          * SECONDS-Seconds

     OUTPUTS:
      out_feature_class (Feature Class):
          The output feature class, which is a copy of the input features with
          new attribute fields added."""
    ...

@gptooldoc('Frequency_analysis', None)
def Frequency(in_table=..., out_table=..., frequency_fields=..., summary_fields=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Frequency_analysis(in_table, out_table, frequency_fields;frequency_fields..., {summary_fields;summary_fields...})

        Reads a table and a set of fields and creates a new table containing
        unique field values and the number of occurrences of each unique field
        value.

     INPUTS:
      in_table (Table View / Raster Layer):
          The table containing the field(s) that will be used to calculate
          frequency statistics.
      frequency_fields (Field):
          The field(s) used to calculate frequency statistics. Each unique
          combination of field values will be included as a new row in the
          output table.
      summary_fields {Field}:
          The attribute field(s) to sum and add to the output table. Values will
          be summed for each unique combination of frequency fields. Null values
          are excluded from this calculation.

     OUTPUTS:
      out_table (Table):
          The output table that will store the frequency statistics."""
    ...

@gptooldoc('Statistics_analysis', None)
def Statistics(in_table=..., out_table=..., statistics_fields=..., case_field=..., concatenation_separator=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Statistics_analysis(in_table, out_table, statistics_fields;statistics_fields..., {case_field;case_field...}, {concatenation_separator})

        Calculates summary statistics for fields in a table.

     INPUTS:
      in_table (Table View / Raster Layer):
          The input table containing the fields that will be used to calculate
          statistics.
      statistics_fields (Value Table):
          Specifies the numeric field or fields containing the attribute values
          that will be used to calculate the specified statistic. Multiple
          statistic and field combinations can be specified. Null values are
          excluded from all calculations.Text attribute fields can be summarized
          using first and last
          statistics. Numeric attribute fields can be summarized using any
          statistic.Available statistics types are as follows:

          * SUM-The values for the specified field will be added together.

          * MEAN-The average for the specified field will be calculated.

          * MIN-The smallest value for all records of the specified field will
          be found.

          * MAX-The largest value for all records of the specified field will be
          found.

          * RANGE-The range of values (maximum minus minimum) for the specified
          field will be calculated.

          * STD-The standard deviation of values in the specified field will be
          calculated.

          * COUNT-The number of values included in the calculations will be
          found. Each value will be counted except null values. To determine the
          number of null values in a field, create a count on the field in
          question, create a count on a different field that does not contain
          null values (for example, the OID if present), and subtract the two
          values.

          * FIRST-The specified field value of the first record in the input
          will be used.

          * LAST-The specified field value of the last record in the input will
          be used.

          * MEDIAN-The median for all records of the specified field will be
          calculated.

          * VARIANCE-The variance for all records of the specified field will be
          calculated.

          * UNIQUE-The number of unique values of the specified field will be
          counted.

          * CONCATENATE-The values for the specified field will be concatenated.
          The values can be separated using the concatenation_separator
          parameter.
      case_field {Field}:
          The field or fields in the input that will be used to calculate
          statistics separately for each unique attribute value (or combination
          of attribute values when multiple fields are specified).
      concatenation_separator {String}:
          A character or characters that will be used to concatenate values when
          the CONCATENATION option is used for the statistics_fields parameter.

     OUTPUTS:
      out_table (Table):
          The output table that will store the calculated statistics."""
    ...

@gptooldoc('SummarizeNearby_analysis', None)
def SummarizeNearby(in_features=..., in_sum_features=..., out_feature_class=..., distance_type=..., distances=..., distance_units=..., time_of_day=..., time_zone=..., keep_all_polygons=..., sum_fields=..., sum_shape=..., shape_unit=..., group_field=..., add_min_maj=..., add_group_percent=..., Output_Grouped_Table=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """SummarizeNearby_analysis(in_features, in_sum_features, out_feature_class, distance_type, distances;distances..., distance_units, {time_of_day}, {time_zone}, {keep_all_polygons}, {sum_fields;sum_fields...}, {sum_shape}, {shape_unit}, {group_field}, {add_min_maj}, {add_group_percent}, {Output_Grouped_Table})

        Finds features that are within a specified distance of features in the
        input layer and calculates statistics for the nearby features.
        Distance can be measured as a straight-line distance, a drive-time
        distance (for example, within 10 minutes), or a drive distance (for
        example, within 5 kilometers). For drive-time and drive distance
        measurements, you must be signed in to an ArcGIS Online organizational
        account with Network Analysis privileges. Both measurement options
        consume credits.

     INPUTS:
      in_features (Feature Layer):
          The point, line, or polygon features that will be buffered and those
          buffers will be used to summarize the input summary features.
      in_sum_features (Feature Layer):
          The point, line, or polygon features that will be summarized.
      distance_type (String):
          Specifies the distance measurement type that will be used to generate
          buffer areas. Both driving distance and driving time will use the road
          network and honor restrictions such as one-way streets. Driving time
          honors the current posted speed limits.To use the drive-time and drive
          distance measurement options, you must
          be signed in to an ArcGIS Online organizational account with Network
          Analysis privileges. Each time the tool runs successfully, credits are
          debited from your subscription based on the service used and the
          results returned from the service. The Credits page provides details
          about credits.All distance types except straight-line distance use
          ArcGIS Online
          routing and network services.

          * DRIVING_DISTANCE-The distance will be covered in a car or other
          similar small automobiles, such as pickup trucks. Travel follows all
          rules that are specific to cars.

          * DRIVING_TIME-The distance will be covered within a specified time in
          a car or other similar small automobiles, such as pickup trucks.
          Dynamic travel speeds based on traffic are used where it is available
          when you specify a time of day. Travel follows all rules that are
          specific to cars.

          * STRAIGHT_LINE-A Euclidean or straight-line distance will be used.

          * TRUCKING_DISTANCE-The distance will be covered along designated
          truck routes. Travel follows all rules for cars as well as rules
          specific to trucking.

          * TRUCKING_TIME-The distance will be covered within a specified time
          when traveling along designated truck routes. Dynamic travel speeds
          based on traffic are used where it is available when you specify a
          time of day. Travel follows all rules for cars as well as rules
          specific to trucking.

          * WALKING_DISTANCE-The distance will be covered along paths and roads
          that allow pedestrian traffic.

          * WALKING_TIME-The distance will be covered within a specified time
          when walking along paths and roads that allow pedestrian traffic.
      distances (Double):
          Distance values that will define a search distance (for straight-line,
          driving, trucking, or walking distance) or travel time (for driving,
          trucking, or walking time). Features that are within (or equal to) the
          distances you provide will be summarized.Multiple values can be
          specified. One area around each input feature
          will be generated for each distance.
      distance_units (String):
          Specifies the units of the distance values.

          * MILES-The units will be miles.

          * KILOMETERS-The units will be kilometers.

          * FEET-The units will be feet.

          * YARDS-The units will be yards.

          * METERS-The units will be meters.

          * HOURS-The units will be hours.

          * MINUTES-The units will be minutes.

          * SECONDS-The units will be seconds.
      time_of_day {Date}:
          The date or time when traffic conditions will be considered during
          travel time. Traffic conditions, especially in urbanized areas, can
          significantly impact the area covered within a specified travel time.
          If no date or time is specified, the distance covered during a
          specified travel time will not be impacted by traffic.Traffic
          conditions may be live or typical (historical) based on the
          date and time specified for this parameter. Esri saves live traffic
          data for 12 hours and references predictive data extending 12 hours
          into the future. If the time and date you specify is within the
          24-hour time window, live traffic is used. If it is outside the time
          window, typical or historic traffic is used.
      time_zone {String}:
          Specifies the time zone that will be used for the specified time of
          day. Time zones can be specified in local time or coordinated
          universal time (UTC).

          * GEOLOCAL-The time of day refers to the local time zone or zones in
          which the input features are located. This option can cause the
          analysis to have rolling start times across time zones. This is the
          default.For example, setting a geolocal time of day to 9:00 a.m.
          causes the drive times for points in the eastern time zone to start at
          9:00 a.m. eastern time, and 9:00 a.m. central time for points in the
          central time zone. (The start times are offset by an hour in real or
          UTC time.)

          * UTC-The time of day refers to coordinated universal time (UTC). The
          start times for all points are simultaneous, regardless of time
          zones.For example, setting a UTC time of day to 9:00 a.m. causes the
          drive times for points in the eastern time zone to start at 4:00 a.m.
          eastern time, and 3:00 a.m. central time for points in the central
          time zone. (The start times are simultaneous.)
      keep_all_polygons {Boolean}:
          Specifies whether all buffers of the input features or only those
          intersecting or containing at least one input summary feature will be
          copied to the output feature class.

          * KEEP_ALL-All buffers will be copied to the output feature class.
          This is the default.

          * ONLY_INTERSECTING-Only buffers that intersect or contain at least
          one input summary feature will be copied to the output feature class.
      sum_fields {Value Table}:
          A list of attribute field names from the input summary features and
          statistical summary types that will be calculated for those attribute
          fields for all points within each input feature buffer.Summary fields
          must be numeric. Text and other attribute field types
          are not supported. The following statistic types are supported:

          * Sum-Add the total value of all the points in each buffer.

          * Mean-Calculate the average of all the points in each buffer.

          * Min-Find the smallest value of all the points in each buffer.

          * Max-Find the largest value of all the points in each buffer.

          * Stddev-Find the standard deviation of all the points in each buffer.
      sum_shape {Boolean}:
          Specifies whether attributes for the number of points, length of
          lines, and area of polygon features summarized in each input feature
          buffer (shape summary attributes) will be added to the output feature
          class.

          * ADD_SHAPE_SUM-Shape summary attributes will be added to the output
          feature class. This is the default.

          * NO_SHAPE_SUM-Shape summary attributes will not be added to the
          output feature class.
      shape_unit {String}:
          The unit in which shape summary attributes will be calculated. If the
          input summary features are points, no shape unit is used, since only
          the count of points within each input feature buffer is added.If the
          input summary features are lines, specify a linear unit. If the
          input summary features are polygons, specify an areal unit.

          * METERS-The units will be meters.

          * KILOMETERS-The units will be kilometers.

          * FEET-The units will be feet.

          * YARDS-The units will be yards.

          * MILES-The units will be miles.

          * ACRES-The units will be acres.

          * HECTARES-The units will be hectares.

          * SQUAREMETERS-The units will be square meters.

          * SQUAREKILOMETERS-The units will be square kilometers.

          * SQUAREFEET-The units will be square feet.

          * SQUAREYARDS-The units will be square yards.

          * SQUAREMILES-The units will be square miles.
      group_field {Field}:
          The attribute field from the input summary features that will be used
          for grouping. Features that have the same group field value will be
          combined and summarized with other features with the same group field
          value.When you choose a group field, an additional output grouped
          table will
          be created and its location must be specified in the out_grouped_table
          parameter.
      add_min_maj {Boolean}:
          Specifies whether minority (least dominant) and majority (most
          dominant) group field values within each input feature buffer will be
          added to the output. This parameter is only enabled if you selected a
          group field.

          * NO_MIN_MAJ-Minority and majority fields will not be added to the
          output. This is the default.

          * ADD_MIN_MAJ-Minority and majority fields will be added to the
          output.
      add_group_percent {Boolean}:
          Specifies whether the percentage of each attribute value within each
          group will be added to the output. This parameter is only enabled if
          you selected a group field.

          * NO_PERCENT-A percentage attribute field will not be added to the
          output. This is the default.

          * ADD_PERCENT-A percentage attribute field will be added to the
          output.

     OUTPUTS:
      out_feature_class (Feature Class):
          The output polygon feature class containing the buffered input
          features, the attributes of the input features, and new attributes
          about the number points, length of lines, and area of polygons inside
          each buffer and statistics about those features.
      Output_Grouped_Table {Table}:
          An output table that includes summary fields for each group of summary
          features for each input feature buffer. If a group field is specified,
          the output grouped table is required. The table will have the
          following attribute fields:

          * Join_ID-An ID corresponding to an ID field added to the output
          feature class

          * The group field

          * A shape summary field such as count of points or length of lines

          * One field for each summary field

          * Percentage field"""
    ...

@gptooldoc('SummarizeWithin_analysis', None)
def SummarizeWithin(in_polygons=..., in_sum_features=..., out_feature_class=..., keep_all_polygons=..., sum_fields=..., sum_shape=..., shape_unit=..., group_field=..., add_min_maj=..., add_group_percent=..., out_group_table=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """SummarizeWithin_analysis(in_polygons, in_sum_features, out_feature_class, {keep_all_polygons}, {sum_fields;sum_fields...}, {sum_shape}, {shape_unit}, {group_field}, {add_min_maj}, {add_group_percent}, {out_group_table})

        Overlays a polygon layer with another layer to summarize the number of
        points, length of the lines, or area of the polygons within each
        polygon, and calculate attribute field statistics about the features
        within the polygons.

     INPUTS:
      in_polygons (Feature Layer):
          The polygons used to summarize the features, or portions of features,
          in the input summary layer.
      in_sum_features (Feature Layer):
          The point, line, or polygon features that will be summarized for each
          polygon in the input polygons.
      keep_all_polygons {Boolean}:
          Specifies whether all input polygons or only those containing at least
          one input point will be copied to the output feature class.

          * KEEP_ALL-All input polygons will be copied to the output feature
          class. This is the default.

          * ONLY_INTERSECTING-Only input polygons that intersect or contain at
          least one input summary feature will be copied to the output feature
          class.
      sum_fields {Value Table}:
          A list of attribute field names from the input summary features, as
          well as statistical summary types that will be calculated for those
          attribute fields for all points in each polygon.Summary fields must be
          numeric. Text and other attribute field types
          are not supported. The following are the statistic types:

          * Sum-The total value of all the points in each polygon will be
          calculated.

          * Mean-The average of all the points in each polygon will be
          calculated.

          * Min-The smallest value of all the points in each polygon will be
          identified.

          * Max-The largest value of all the points in each polygon will be
          identified.

          * Stddev-The standard deviation of all the points in each polygon will
          be calculated.
      sum_shape {Boolean}:
          Specifies whether attributes for the number of points, length of
          lines, and area of polygon features summarized in each input polygon
          will be added to the output.

          * ADD_SHAPE_SUM-Shape summary attributes will be added to the output
          feature class. This is the default.

          * NO_SHAPE_SUM-Shape summary attributes will not be added to the
          output feature class.
      shape_unit {String}:
          The unit that will be used when calculating shape summary attributes.
          If the input summary features are points, no shape unit is necessary,
          since only the count of points in each input polygon is added.If the
          input summary features are lines, specify a linear unit. If the
          input summary features are polygons, specify an areal unit.

          * METERS-The unit will be meters.

          * KILOMETERS-The unit will be kilometers.

          * FEET-The unit will be feet.

          * YARDS-The unit will be yards.

          * MILES-The unit will be miles.

          * ACRES-The unit will be acres.

          * HECTARES-The unit will be hectares.

          * SQUAREMETERS-The unit will be square meters.

          * SQUAREKILOMETERS-The unit will be square kilometers.

          * SQUAREFEET-The unit will be square feet.

          * SQUAREYARDS-The unit will be square yards.

          * SQUAREMILES-The unit will be square miles.
      group_field {Field}:
          An attribute field from the input summary features that is used for
          grouping. Features that have the same group field value will be
          combined and summarized with other features with the same group field
          value.When a group field is specified, the out_grouped_table parameter
          is
          required.
      add_min_maj {Boolean}:
          Specifies whether minority and majority fields will be added to the
          output. This parameter allows you to determine which group field value
          is the minority (least dominant) and the majority (most dominant)
          within each input polygon.This parameter is enabled if you specified a
          group_field parameter
          value.

          * NO_MIN_MAJ-Minority and majority fields will not be added to the
          output. This is the default.

          * ADD_MIN_MAJ-Minority and majority fields will be added to the
          output.
      add_group_percent {Boolean}:
          Specifies whether a percentage attribute field will be added to the
          output. This parameter allows you to determine the percentage of each
          attribute value n each group.This parameter is enabled if you
          specified a group_field parameter
          value.

          * NO_PERCENT-A percentage attribute field will not be added to the
          output. This is the default.

          * ADD_PERCENT-A percentage attribute field will be added to the
          output.

     OUTPUTS:
      out_feature_class (Feature Class):
          The output polygon feature class containing the same geometries and
          attributes as the input polygons with additional new attributes for
          the number points, length of lines, and area of polygons inside each
          input polygon and statistics about those features.
      out_group_table {Table}:
          An output table that includes summary fields for each group of summary
          features for each input polygon. The table will have the
          following attribute fields:

          * Join_ID-An ID corresponding to an ID field added to the output
          feature class

          * The group field

          * A shape summary field

          * One field for each of the summary fields

          * Percentage field
          This parameter is required when the group_field parameter value is
          specified."""
    ...

@gptooldoc('TabulateIntersection_analysis', None)
def TabulateIntersection(in_zone_features=..., zone_fields=..., in_class_features=..., out_table=..., class_fields=..., sum_fields=..., xy_tolerance=..., out_units=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """TabulateIntersection_analysis(in_zone_features, zone_fields;zone_fields..., in_class_features, out_table, {class_fields;class_fields...}, {sum_fields;sum_fields...}, {xy_tolerance}, {out_units})

        Computes the intersection between two feature classes and cross
        tabulates the area, length, or count of the intersecting features.

     INPUTS:
      in_zone_features (Feature Layer):
          The features used to identify zones.
      zone_fields (Field):
          The attribute field or fields that will be used to define zones.
      in_class_features (Feature Layer):
          The features used to identify classes.
      class_fields {Field}:
          The attribute field or fields used to define classes.
      sum_fields {Field}:
          The fields that will be summed from the in_class_features parameter.
      xy_tolerance {Linear Unit}:
          The distance that determines the range in which features or their
          vertices are considered equal. By default, this is the x,y tolerance
          of the in_zone_features parameter value.Changing this parameter's
          value may cause failure or unexpected
          results. It is recommended that you do not modify this parameter. It
          has been removed from view on the tool dialog box. By default, the
          input feature class's spatial reference x,y tolerance property is
          used.
      out_units {String}:
          Specifies the units that will be used to calculate area or length
          measurements. Setting output units when the input class features are
          points is not supported.

          * UNKNOWN-The units will be unknown.

          * INCHES-The units will be inches.

          * FEET-The units will be feet.

          * YARDS-The units will be yards.

          * MILES-The units will be miles.

          * NAUTICAL_MILES-The units will be nautical miles.

          * MILLIMETERS-The units will be millimeters.

          * CENTIMETERS-The units will be centimeters.

          * DECIMETERS-The units will be decimeters.

          * METERS-The units will be meters.

          * KILOMETERS-The units will be kilometers.

          * DECIMAL_DEGREES-The units will be decimal degrees.

          * POINTS-The units will be points.

          * ARES-The units will be ares.

          * ACRES-The units will be acres.

          * HECTARES-The units will be hectares.

          * SQUARE_INCHES-The units will be square inches.

          * SQUARE_FEET-The units will be square feet.

          * SQUARE_YARDS-The units will be square yards.

          * SQUARE_MILES-The units will be square miles.

          * SQUARE_MILLIMETERS-The units will be square millimeters.

          * SQUARE_CENTIMETERS-The units will be square centimeters.

          * SQUARE_DECIMETERS-The units will be square decimeters.

          * SQUARE_METERS-The units will be square meters.

          * SQUARE_KILOMETERS-The units will be square kilometers.

     OUTPUTS:
      out_table (Table):
          The table that will contain the cross tabulation of intersections
          between zones and classes."""
    ...

