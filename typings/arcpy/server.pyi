"""
This type stub file was generated by pyright.
"""

from arcpy.geoprocessing._base import gptooldoc

r"""The Server toolbox contains tools to manage web layers and web maps.
It also contains tools that simplify data extraction through the
server."""
__all__ = ['AnalyzeRasterAnalysisDataLocation', 'ConvertMapServerCacheStorageFormat', 'CreateMapServerCache', 'DeleteMapServerCache', 'ExportMapServerCache', 'ExportWebMap', 'ExtractData', 'ExtractDataAndEmailTask', 'ExtractDataTask', 'GenerateMapServerCacheTilingScheme', 'GetLayoutTemplatesInfo', 'ImportMapServerCache', 'ManageMapServerCacheScales', 'ManageMapServerCacheStatus', 'ManageMapServerCacheTiles', 'ReplaceWebLayer', 'SendEmailWithZipFileAttachment', 'StageService', 'UploadServiceDefinition']
__alias__ = ...
@gptooldoc('ConvertMapServerCacheStorageFormat_server', None)
def ConvertMapServerCacheStorageFormat(input_service=..., num_of_caching_service_instances=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ConvertMapServerCacheStorageFormat_server(input_service, {num_of_caching_service_instances})

        Converts the storage of a map image layer or a map or image service
        cache between the exploded format and the compactV2 format.

     INPUTS:
      input_service (Image Service / Map Server):
          The map or image service whose cache format will be converted. In
          ArcGIS Enterprise, this is a string containing the REST endpoint of
          the map image layer. In a stand-alone ArcGIS Server deployment, this
          is a string containing both the server and the service information.
      num_of_caching_service_instances {Long}:
          The total number of instances of the System/CachingTools service that
          will be dedicated to running this tool. When the default value of -1
          is used, all the caching tool instances of the ArcGIS Enterprise setup
          will be used. Use a lower value to use fewer caching tool
          instances.You can increase the Maximum number of instances per machine
          setting
          of the System/CachingTools service using the Service Editor window
          available through an administrative connection to ArcGIS Server.
          Ensure that the server machines can support the chosen number of
          instances.When connecting to a stand-alone server, the default number
          of
          instances is equal to the value of the Maximum number of instances
          setting of the caching tool service."""
    ...

@gptooldoc('CreateMapServerCache_server', None)
def CreateMapServerCache(input_service=..., service_cache_directory=..., tiling_scheme_type=..., scales_type=..., num_of_scales=..., dots_per_inch=..., tile_size=..., predefined_tiling_scheme=..., tile_origin=..., scales=..., cache_tile_format=..., tile_compression_quality=..., storage_format=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CreateMapServerCache_server(input_service, service_cache_directory, tiling_scheme_type, scales_type, num_of_scales, dots_per_inch, tile_size, {predefined_tiling_scheme}, {tile_origin}, {scales;scales...}, {cache_tile_format}, {tile_compression_quality}, {storage_format})

        Creates the tiling scheme and preparatory folders for a map or image
        service cache. After running this tool, use the Manage Map Server
        Cache Tiles tool to add tiles to the cache.

     INPUTS:
      input_service (Image Service / Map Server):
          The map or image layer to be cached.
      service_cache_directory (String):
          The parent directory for the cache. This must be a registered ArcGIS
          Server cache directory.
      tiling_scheme_type (String):
          Specifies how the tiling scheme will be defined. You can define a new
          tiling scheme with this tool or browse to a predefined tiling scheme
          file (.xml). A predefined scheme can be created by running the
          Generate Map Server Cache Tiling Scheme tool.

          * NEW-The tiling scheme will be defined using other parameters in this
          tool to define scale levels, image format, storage format, and so on.
          This is the default.

          * PREDEFINED-The tiling scheme will be defined using an .xml file. You
          can create a tiling scheme file using the Generate Map Server Cache
          Tiling Scheme tool.
      scales_type (String):
          Specifies how the tiles will be scaled.

          * STANDARD-The scales will be automatically generated based on the
          number specified in the Number of Scales (num_of_scales in Python)
          parameter. It will use levels that increase or decrease by half from
          1:1,000,000 and will start with a level closest to the extent of the
          source map document. For example, if the source map document has an
          extent of 1:121,000,000 and three scale levels are defined, the map
          service will create a cache with scale levels at 1:128,000,000;
          1:64,000,000; and 1:32,000,000. This is the default.

          * CUSTOM-The cache designer will determine the scales.
      num_of_scales (Long):
          The number of scale levels to create in the cache. This option is
          disabled if you create a custom list of scales.
      dots_per_inch (Long):
          The dots per inch (DPI) of the intended output device. If a DPI is
          chosen that does not match the resolution of the output device, the
          scale of the map tile will appear incorrect. The default value is 96.
      tile_size (String):
          Specifies the width and height of the cache tiles in pixels. For the
          best balance between performance and manageability, avoid deviating
          from standard widths of 256 by 256 or 512 by 512.

          * 128 x 128-128 by 128 pixels.

          * 256 x 256-256 by 256 pixels. This is the default.

          * 512 x 512-512 by 512 pixels.

          * 1024 x 1024-1024 by 1024 pixels.
      predefined_tiling_scheme {File}:
          The path to a predefined tiling scheme file (usually named conf.xml).
      tile_origin {Point}:
          The origin (upper left corner) of the tiling scheme in the coordinates
          of the spatial reference of the source map document. The extent of the
          source map document must be within (but does not need to coincide
          with) this region.
      scales {Value Table}:
          The scale levels available for the cache. These are not represented as
          fractions. Instead, use 500 to represent a scale of 1:500, for
          example.
      cache_tile_format {String}:
          Specifies the cache tile format.

          * PNG-A PNG format with varying bit depths. The bit depths are
          optimized according to the color variation and transparency values in
          a tile. This is the default.

          * PNG8-A lossless, 8-bit color, image format that uses an indexed
          color palette and an alpha table. Each pixel stores a value (0-255)
          that is used to look up the color in the color palette and the
          transparency in the alpha table. 8-bit PNG images are similar to GIF
          images, and most web browsers support transparent backgrounds in PNG
          images.

          * PNG24-A lossless, three-channel image format that supports large
          color variations (16 million colors) and has limited support for
          transparency. Each pixel contains three 8-bit color channels, and the
          file header contains the single color that represents the transparent
          background. Versions of Internet Explorer earlier than version 7 do
          not support this type of transparency. Caches using PNG24 are
          significantly larger than those using PNG8 or JPEG and will use more
          disk space and require greater bandwidth to serve clients.

          * PNG32-A lossless, four-channel image format that supports large
          color variations (16 million colors) and transparency. Each pixel
          contains three 8-bit color channels and one 8-bit alpha channel that
          represents the level of transparency for each pixel. While the PNG32
          format allows for partially transparent pixels in the range from 0 to
          255, the ArcGIS Server cache generation tool only writes fully
          transparent (0) or fully opaque (255) values in the transparency
          channel. Caches using PNG32 are significantly larger than the other
          supported formats and will use more disk space and require greater
          bandwidth to serve clients.

          * JPEG-A lossy, three-channel image format that supports large color
          variations (16 million colors) but does not support transparency. Each
          pixel contains three 8-bit color channels. Caches using JPEG provide
          control over output quality and size.

          * MIXED-The PNG32 format will be created anywhere that transparency is
          detected (that is, anywhere that the data frame background is
          visible). The JPEG format will be created for the remaining tiles.
          This keeps the average file size down while providing a clean overlay
          on top of other caches.
      tile_compression_quality {Long}:
          The JPEG compression quality (1-100). The default value is 75 for the
          JPEG tile format and 0 for other formats.Compression is supported only
          for the JPEG format. Choosing a higher
          value will result in a larger file size with a higher-quality image.
          Choosing a lower value will result in a smaller file size with a
          lower-quality image.
      storage_format {String}:
          Specifies the storage format of tiles.

          * COMPACT-Tiles will be grouped into large files called bundles. This
          storage format is efficient in terms of storage and mobility. This is
          the default.

          * EXPLODED-Each tile will be stored as a separate file."""
    ...

@gptooldoc('DeleteMapServerCache_server', None)
def DeleteMapServerCache(input_service=..., num_of_caching_service_instances=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """DeleteMapServerCache_server(input_service, {num_of_caching_service_instances})

        Deletes an existing map image layer cache, including all associated
        files on disk.

     INPUTS:
      input_service (Image Service / Map Server):
          The map image layer whose cache tiles you want to delete.
      num_of_caching_service_instances {Long}:
          Defines the number of instances that will be used to update/generate
          the tiles. The value for this parameter is set to unlimited (-1) and
          cannot be modified."""
    ...

@gptooldoc('ExportMapServerCache_server', None)
def ExportMapServerCache(input_service=..., target_cache_path=..., export_cache_type=..., copy_data_from_server=..., storage_format_type=..., scales=..., num_of_caching_service_instances=..., area_of_interest=..., export_extent=..., overwrite=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ExportMapServerCache_server(input_service, target_cache_path, export_cache_type, copy_data_from_server, storage_format_type, scales;scales..., {num_of_caching_service_instances}, {area_of_interest}, {export_extent}, {overwrite})

        Exports tiles from a map image layer cache as a cache dataset or tile
        package to a folder on disk. The tiles can be imported into other
        caches, or they can be accessed from ArcGIS Desktop or mobile devices
        as a raster dataset, independent from their parent service.

     INPUTS:
      input_service (Image Service / Map Server):
          The map image layer with the cache tiles to be exported.
      target_cache_path (Folder):
          The folder into which the cache will be exported. This folder does not
          have to be a registered server cache directory. The ArcGIS Server
          account must have write access to the target cache folder. If the
          server account cannot be granted write access to the destination
          folder but the ArcGIS Desktop or ArcGIS Pro client has write access to
          it, choose the Copy data from server parameter.
      export_cache_type (String):
          Exports a cache as a cache dataset or a tile package. Tile packages
          are suitable for ArcGIS Runtime and ArcGIS Mobile deployments.

          * CACHE_DATASET-A map or image service cache that is generated using
          ArcGIS Server. It can be used in ArcGIS Desktop and by ArcGIS Server
          map or image services. This is the default.

          * TILE_PACKAGE-A single compressed file where the cache dataset is
          added as a layer and consolidated so that it can be shared. In can be
          used in ArcGIS Desktop, ArcGIS Runtime, and mobile apps.
      copy_data_from_server (Boolean):
          Set this parameter to COPY_DATA if the ArcGIS Server account cannot be
          granted write access to the target folder and the ArcGIS Desktop or
          ArcGIS Pro client has write access to it. The software exports the
          tiles in the server output directory before moving them to the target
          folder.

          * COPY_DATA-Tiles are placed in the server output directory and are
          then moved to the target folder. The ArcGIS Desktop or ArcGIS Pro
          client must have write access to the target folder.

          * DO_NOT_COPY-Tiles are exported directly into the target folder. The
          ArcGIS Server account must have write access to the target folder.
          This is the default.
      storage_format_type (String):
          The storage format of the exported cache.

          * COMPACT-Tiles are grouped in bundle and bundlex files to save space
          on disk and allow for faster copying of caches. If the
          export_cache_type parameter is set to Tile package, this is the
          default.

          * COMPACT_V2-Tiles are grouped in bundle files only. This format
          provides better performance on network shares and cloudstore
          directories. If the export_cache_type parameter is set to Tile package
          then the extension of the tile package is (.tpkx),which is supported
          by newer versions of the ArcGIS Platform such as ArcGIS Online, ArcGIS
          Enterprise 11.1 and ArcGIS Runtime 100.5.

          * EXPLODED-Each tile is stored as an individual file (the way caches
          were stored prior to ArcGIS Server).
      scales (Double):
          A list of scale levels at which tiles will be exported.
      num_of_caching_service_instances {Long}:
          Specifies the number of instances that will be used to update or
          generate the tiles. The value for this parameter is set to unlimited
          (-1) and cannot be modified.
      area_of_interest {Feature Set}:
          An area of interest that spatially constrains where tiles are exported
          from the cache. This parameter is useful if you want to export
          irregularly shaped areas, as the tool clips the cache dataset at pixel
          resolution.If you do not specify an area of interest, the full extent
          of the map
          is exported.
      export_extent {Extent}:
          A rectangular extent defining the tiles to be exported. By default,
          the extent is set to the full extent of the map service into which you
          are importing. Note that the optional parameter on this tool, Area Of
          Interest, allows you to alternatively import using a polygon. It is
          recommended that you not provide values for both parameters for a job.
          If values are provided for both parameters, the Area Of Interest
          parameter takes precedence over Import Extent.

          * MAXOF-The maximum extent of all inputs will be used.

          * MINOF-The minimum area common to all inputs will be used.

          * DISPLAY-The extent is equal to the visible display.

          * Layer name-The extent of the specified layer will be used.

          * Extent object-The extent of the specified object will be used.

          * Space delimited string of coordinates-The extent of the specified
          string will be used. Coordinates are expressed in the order of x-min,
          y-min, x-max, y-max.
      overwrite {Boolean}:
          Specifies whether the images in the receiving cache will be merged
          with the tiles from the originating cache or overwritten by them.

          * OVERWRITE-The export replaces all pixels in the area of interest,
          effectively overwriting tiles in the destination cache with tiles from
          the originating cache.

          * MERGE-When the tiles are imported, transparent pixels in the
          originating cache are ignored by default. This results in a merged or
          blended image in the destination cache. This is the default."""
    ...

@gptooldoc('GenerateMapServerCacheTilingScheme_server', None)
def GenerateMapServerCacheTilingScheme(in_map=..., tile_origin=..., output_tiling_scheme=..., num_of_scales=..., scales=..., dots_per_inch=..., tile_size=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateMapServerCacheTilingScheme_server(in_map, tile_origin, output_tiling_scheme, num_of_scales, scales;scales..., dots_per_inch, tile_size)

        Generates a custom tiling scheme file that defines the scale levels,
        tile dimensions, and other properties for a web tile layer.

     INPUTS:
      in_map (Map):
          The current map or an existing .mxd document to be used for the tiling
          scheme.
      tile_origin (Point):
          The upper left corner of the tiling scheme, in coordinates of the
          spatial reference of the source data frame.
      num_of_scales (Long):
          Number of scale levels in the tiling scheme.
      scales (Value Table):
          Scale levels to include in the tiling scheme. These are not
          represented as fractions. Instead, use 500 to represent a scale of
          1:500, and so on.
      dots_per_inch (Long):
          The dots per inch of the intended output device. If a DPI is chosen
          that does not match the resolution of the output device, the scale of
          the map tile will appear incorrect. The default value is 96.
      tile_size (String):
          The width and height of the cache tiles in pixels. The default is 256
          by 256. For the best balance between performance and manageability,
          avoid deviating from standard dimensions of 256 by 256 or 512 by 512.

          * 128 x 128-128 by 128 pixels

          * 256 x 256-256 by 256 pixels

          * 512 x 512-512 by 512 pixels

          * 1024 x 1024-1024 by 1024 pixels

     OUTPUTS:
      output_tiling_scheme (File):
          Path and file name of the tiling scheme file to create."""
    ...

@gptooldoc('ImportMapServerCache_server', None)
def ImportMapServerCache(input_service=..., source_cache_type=..., source_cache_dataset=..., source_tile_package=..., upload_data_to_server=..., scales=..., num_of_caching_service_instances=..., area_of_interest=..., import_extent=..., overwrite=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ImportMapServerCache_server(input_service, source_cache_type, {source_cache_dataset}, {source_tile_package}, {upload_data_to_server}, {scales;scales...}, {num_of_caching_service_instances}, {area_of_interest}, {import_extent}, {overwrite})

        Imports tiles from a folder on disk into a map image layer cache.

     INPUTS:
      input_service (Image Service / Map Server):
          The map image layer with the cache tiles to be imported.
      source_cache_type (String):
          Imports a cache from a cache dataset or tile package to a cached map
          or image service running on the server.

          * CACHE_DATASET-A map or image service cache that is generated using
          ArcGIS Server. It can be used in ArcGIS Desktop and by ArcGIS Server
          map or image services.

          * TILE_PACKAGE-A single compressed file where the cache dataset is
          added as a layer and consolidated so that it can be shared. It can be
          used in ArcGIS Desktop, ArcGIS Runtime, and mobile apps.
      source_cache_dataset {Raster Dataset}:
          The path to the cache folder matching the data frame name. You do not
          have to specify a registered server cache directory; most of the time
          you'll specify a location on disk where tiles have been previously
          exported. This location should be accessible to the ArcGIS Server
          account. If the ArcGIS Server account cannot be granted access to this
          location, set the upload_data_to_server parameter to UPLOAD_DATA.
      source_tile_package {File}:
          The path to the tile package (.tpk) that will be imported. This
          location should be accessible to the ArcGIS Server account. When
          importing a tile package file to a cached map or image service, the
          upload_data_to_server parameter is ignored as it is automatically set
          to UPLOAD_DATA.
      upload_data_to_server {Boolean}:
          Set this parameter to UPLOAD_DATA if the ArcGIS Server account does
          not have read access to the source cache. The tool will upload the
          source cache to the ArcGIS Server uploads directory before moving it
          to the ArcGIS Server cache directory.

          * UPLOAD_DATA-Tiles are placed in the server uploads directory and are
          then moved to the server cache directory. This is enabled by default
          when source_cache_type is TILE_PACKAGE.

          * DO_NOT_UPLOAD-Tiles are imported directly into the server cache
          directory. The ArcGIS Server account must have read access to the
          source cache.
      scales {Double}:
          A list of scale levels at which tiles will be imported.
      num_of_caching_service_instances {Long}:
          Specifies the number of instances that will be used to update or
          generate the tiles. The value for this parameter is set to unlimited
          (-1) and cannot be modified.
      area_of_interest {Feature Set}:
          An area of interest polygon that spatially constrains where tiles are
          imported into the cache. This parameter is useful if you want to
          import tiles for irregularly shaped areas, as the tool clips the cache
          dataset, which intersects the polygon at pixel resolution and imports
          it to the service cache directory.If you do not provide a value for
          this parameter, the value of the
          Import Extent parameter will be used. The default is to use the full
          extent of the map.
      import_extent {Extent}:
          A rectangular extent defining the tiles to be imported into the cache.
          By default, the extent is set to the full extent of the map service
          into which you are importing. Note that the optional parameter on this
          tool, Area Of Interest, allows you to spatially constrain the imported
          tiles using an irregular shape. If values are provided for both
          parameters, the Area Of Interest parameter takes precedence over
          Import Extent.

          * MAXOF-The maximum extent of all inputs will be used.

          * MINOF-The minimum area common to all inputs will be used.

          * DISPLAY-The extent is equal to the visible display.

          * Layer name-The extent of the specified layer will be used.

          * Extent object-The extent of the specified object will be used.

          * Space delimited string of coordinates-The extent of the specified
          string will be used. Coordinates are expressed in the order of x-min,
          y-min, x-max, y-max.
      overwrite {Boolean}:
          Specifies whether the images in the destination cache will be merged
          with the tiles from the originating cache or overwritten by them.

          * OVERWRITE-The import replaces all pixels in the area of interest,
          effectively overwriting tiles in the destination cache with tiles from
          the originating cache.

          * MERGE-When the tiles are imported, transparent pixels in the
          originating cache are ignored by default. This results in a merged or
          blended image in the destination cache. This is the default."""
    ...

@gptooldoc('ManageMapServerCacheScales_server', None)
def ManageMapServerCacheScales(input_service=..., scales=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ManageMapServerCacheScales_server(input_service, scales;scales...)

        Updates the scale levels in an existing map image layer in ArcGIS
        Enterprise or in a cached map or image service on a stand-alone
        server. Use this tool to add new scales or delete existing scales from
        a cache.

     INPUTS:
      input_service (Image Service / Map Server):
          The map image layer or map or image service where cache scales will be
          added or removed. In ArcGIS Enterprise, this is a string containing
          the REST endpoint of the web map image layer. In a stand-alone ArcGIS
          Server, this is a string containing both the server and the service
          information.
      scales (Value Table):
          The scale values that will be included in the updated tiling scheme."""
    ...

@gptooldoc('ManageMapServerCacheStatus_server', None)
def ManageMapServerCacheStatus(input_service=..., manage_mode=..., scales=..., num_of_caching_service_instances=..., report_folder=..., area_of_interest=..., report_extent=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ManageMapServerCacheStatus_server(input_service, manage_mode, {scales;scales...}, {num_of_caching_service_instances}, {report_folder}, {area_of_interest}, {report_extent})

        Manages internal data kept by the server about the built tiles in a
        map or image service cache.

     INPUTS:
      input_service (Image Service / Map Server):
          The map image layer for which the cache status will be modified.. You
          can choose it by browsing to the desired service in Portal or you can
          drag and drop a web tile layer from the Catalog pane Portal tab to
          supply this parameter.
      manage_mode (String):
          * DELETE_CACHE_STATUS-Deletes the status information used by the
          server.

          * REBUILD_CACHE_STATUS-Deletes, then rebuilds the status information
          used by the server.

          * REPORT_BUNDLE_STATUS-Creates status information in a new file
          geodatabase named Status.gdb in a folder you specify in the Output
          Folder parameter. This option is used when you want to create a custom
          status report for a particular area of interest or set of scales.
      scales {Double}:
          The scale levels for which the status will be modified. This parameter
          is only applicable when building a custom status using the
          REPORT_BUNDLE_STATUS option for the manage_mode parameter.
      num_of_caching_service_instances {Long}:
          Defines the number of instances that will be used to update/generate
          the tiles. The value for this parameter is set to unlimited (-1) and
          cannot be modified.
      report_folder {Folder}:
          Output folder for the Status.gdb. This parameter is only applicable
          when building a custom status using the REPORT_BUNDLE_STATUS option.
      area_of_interest {Feature Set}:
          An area of interest (polygon) that determines what geography the
          status report will cover. This parameter is only applicable when
          building a custom status using the REPORT_BUNDLE_STATUS option.
      report_extent {Extent}:
          A rectangular extent defining the area for which the status will be
          built. This parameter is only applicable when building a custom status
          using the REPORT_BUNDLE_STATUS option.Note that the area_of_interest
          parameter allows you to specify an area
          of interest that is nonrectangular.

          * MAXOF-The maximum extent of all inputs will be used.

          * MINOF-The minimum area common to all inputs will be used.

          * DISPLAY-The extent is equal to the visible display.

          * Layer name-The extent of the specified layer will be used.

          * Extent object-The extent of the specified object will be used.

          * Space delimited string of coordinates-The extent of the specified
          string will be used. Coordinates are expressed in the order of x-min,
          y-min, x-max, y-max."""
    ...

@gptooldoc('ManageMapServerCacheTiles_server', None)
def ManageMapServerCacheTiles(input_service=..., scales=..., update_mode=..., num_of_caching_service_instances=..., area_of_interest=..., update_extent=..., wait_for_job_completion=..., portal_url=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ManageMapServerCacheTiles_server(input_service, scales;scales..., update_mode, {num_of_caching_service_instances}, {area_of_interest}, {update_extent}, {wait_for_job_completion}, {portal_url})

        Creates and updates tiles in an existing web tile layer cache (in
        ArcGIS Enterprise or ArcGIS Online), map image layers in ArcGIS
        Enterprise, and cached map or image services in a stand-alone server.
        This tool is used to create new tiles, replace missing tiles,
        overwrite outdated tiles, and delete tiles.

     INPUTS:
      input_service (Image Service / Map Server):
          The web tile layer, web imagery layer, or map image layer whose cache
          tiles will be updated.
      scales (Double):
          A list of scale levels at which tiles will be created.
      update_mode (String):
          Specifies the mode that will be used to update the cache.

          * RECREATE_EMPTY_TILES-Only tiles that are empty will be created.
          Existing tiles will be left unchanged. This option is not available
          for web tile layers published to ArcGIS Online.

          * RECREATE_ALL_TILES-Existing tiles will be replaced and new tiles
          will be added if the extent has changed.

          * DELETE_TILES-Tiles will be deleted from the cache. The cache folder
          structure will not be deleted.
      num_of_caching_service_instances {Long}:
          The total number of instances of the System/CachingTools service that
          will be dedicated to running this tool. If the default value of -1 is
          used, all the caching tool instances of the ArcGIS Enterprise setup
          will be used. Use a lower value to use fewer caching tool
          instances.You can increase the Maximum number of instances per machine
          setting
          of the System/CachingTools service using the Service Editor window
          available through an administrative connection to ArcGIS Server.
          Ensure that the server machines can support the chosen number of
          instances.When connecting to a stand-alone server, the default number
          of
          instances is equal to the value of the Maximum number of instances
          setting of the caching tool service.
      area_of_interest {Feature Set}:
          An area of interest that will constrain where tiles will be created or
          deleted. This parameter is useful for managing tiles for irregularly
          shaped areas. It is also useful when precaching some areas and leaving
          less-visited areas uncached.If you do not provide a value for this
          parameter, the default value
          uses the full extent of the map.
      update_extent {Extent}:
          A rectangular extent used to create or delete tiles, depending on the
          value of the update_mode parameter. If both the update_extent and
          area_of_interest parameter values are specified, the area_of_interest
          value will be used.

          * MAXOF-The maximum extent of all inputs will be used.

          * MINOF-The minimum area common to all inputs will be used.

          * DISPLAY-The extent is equal to the visible display.

          * Layer name-The extent of the specified layer will be used.

          * Extent object-The extent of the specified object will be used.

          * Space delimited string of coordinates-The extent of the specified
          string will be used. Coordinates are expressed in the order of x-min,
          y-min, x-max, y-max.
      wait_for_job_completion {Boolean}:
          Specifies whether the tool will continue to run while the cache job
          runs on ArcGIS Online or Portal for ArcGIS.

          * WAIT-The tool will continue to run while the cache job runs on
          ArcGIS Online or Portal for ArcGIS. Using this option, you can request
          detailed progress reports at any time and view the geoprocessing
          messages as they appear. This is the default. It is recommended that
          you use this option in Python scripts.

          * DO_NOT_WAIT-A job will be submitted to the server, allowing you to
          perform other geoprocessing tasks. Use this option when you are
          building a cache automatically at the time you publish the service.
          You can also set this option on any other cache that you build.
      portal_url {String}:
          The URL of the portal."""
    ...

@gptooldoc('ExtractData_server', None)
def ExtractData(Layers_to_Clip=..., Area_of_Interest=..., Feature_Format=..., Raster_Format=..., Spatial_Reference=..., Custom_Spatial_Reference_Folder=..., Output_Zip_File=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ExtractData_server(Layers_to_Clip;Layers_to_Clip..., Area_of_Interest, Feature_Format, Raster_Format, Spatial_Reference, {Custom_Spatial_Reference_Folder}, Output_Zip_File)

        Extracts selected layers in the specified area of interest to a
        specific format and spatial reference. The extracted data is then
        written to a zip file.

     INPUTS:
      Layers_to_Clip (Layer):
          The layers to be clipped. Layers must be feature or raster; layer
          files are not supported.
      Area_of_Interest (Feature Set):
          One or more polygons by which the layers will be clipped.
      Feature_Format (String):
          Specifies the format of the output features. The format should
          be specified as follows:

          * Name or format - Short Name - extension (if any)
          The hyphens are required and there must be one space before and after
          the hyphen. For example:

          * File Geodatabase - GDB - .gdb

          * Shapefile - SHP - .shp

          * Autodesk AutoCAD - DXF_R2007 - .dxf

          * Autodesk AutoCAD - DWG_R2007 - .dwg

          * Bentley Microstation Design (V8) - DGN_V8 - .dgn
          The list of short names supported includes DGN_V8, DWG_R14, DWG_R2000,
          DWG_R2004, DWG_R2005, DWG_R2007, DWG_R2010, DXF_R14, DXF_R2000,
          DXF_R2004, DXF_R2005, DXF_R2007, and DXF_R2010.
      Raster_Format (String):
          Specifies the format of the output raster datasets. The format
          should be specified as follows:

          * Name of format - Short Name - extension (if any)
          The hyphens are required and there must be one space before and after
          the hyphen. For example:

          * Esri GRID - GRID

          * File Geodatabase - GDB - .gdb

          * ERDAS IMAGINE - IMG - .img

          * Tagged Image File Format - TIFF - .tif

          * Portable Network Graphics - PNG - .png

          * Graphic Interchange Format - GIF - .gif

          * Joint Photographics Experts Group - JPEG - .jpg

          * Joint Photographics Experts Group - JPEG - .jp2

          * Bitmap - BMP - .bmp
          Some of the above raster formats have limitations and not all data can
          be converted to the format. For a list of formats and their
          limitations, refer to List of supported sensors.
      Spatial_Reference (String):
          The spatial reference of the output data delivered by the tool.For
          standard Esri spatial references, the name you provide here should
          be the name of the desired coordinate system. This name corresponds to
          the name of the spatial reference's projection file. Alternatively,
          you can use the Well Known ID (WKID) of the coordinate system.
          For example:

          * Sinusoidal (world)

          * WGS 1984 World Mercator

          * NAD 1983 HARN StatePlane Oregon North FIPS 3601 (Meters)

          * WGS 1984 UTM Zone 11N

          * 102003

          * 54001

          * If you want the output to have the same coordinate system as the
          input, then use the string Same As Input.
          For any custom projection, the name specified should be the name of
          the custom projection file (without extension). The location of the
          custom projection files should be specified in the
          Custom_Spatial_Reference_Folder parameter.
      Custom_Spatial_Reference_Folder {Folder}:
          The location of any custom projection file or files referenced in the
          Spatial Reference parameter. This is only necessary if the custom
          projection file is not in the default installation Coordinate System
          folder.

     OUTPUTS:
      Output_Zip_File (File):
          The zip file that will contain the extracted data."""
    ...

@gptooldoc('ExtractDataAndEmailTask_server', None)
def ExtractDataAndEmailTask(Layers_to_Clip=..., Area_of_Interest=..., Feature_Format=..., Raster_Format=..., To=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ExtractDataAndEmailTask_server(Layers_to_Clip;Layers_to_Clip..., Area_of_Interest, Feature_Format, Raster_Format, To)

        Extracts the data in the specified layers and area of interest to the
        selected format and spatial reference, zips the data, and emails it to
        the specified address. This tool can be used to create a Data
        Extraction geoprocessing service.

     INPUTS:
      Layers_to_Clip (Layer):
          The layers to be clipped. Layers must be feature or raster; layer
          files are not supported.
      Area_of_Interest (Feature Set):
          One or more polygons by which the layers will be clipped.
      Feature_Format (String):
          Specifies the format of the output features. The format should
          be specified as follows:

          * Name or format - Short Name - extension (if any)
          The hyphens are required and there must be one space before and after
          the hyphen. For example:

          * File Geodatabase - GDB - .gdb

          * Shapefile - SHP - .shp

          * Autodesk AutoCAD - DXF_R2007 - .dxf

          * Autodesk AutoCAD - DWG_R2007 - .dwg

          * Bentley Microstation Design (V8) - DGN_V8 - .dgn
          The list of short names supported includes DGN_V8, DWG_R14, DWG_R2000,
          DWG_R2004, DWG_R2005, DWG_R2007, DWG_R2010, DXF_R14, DXF_R2000,
          DXF_R2004, DXF_R2005, DXF_R2007, and DXF_R2010.
      Raster_Format (String):
          Specifies the format of the output raster datasets. The format
          should be specified as follows:

          * Name of format - Short Name - extension (if any)
          The hyphens are required and there must be one space before and after
          the hyphen. For example:

          * Esri GRID - GRID

          * File Geodatabase - GDB - .gdb

          * ERDAS IMAGINE - IMG - .img

          * Tagged Image File Format - TIFF - .tif

          * Portable Network Graphics - PNG - .png

          * Graphic Interchange Format - GIF - .gif

          * Joint Photographics Experts Group - JPEG - .jpg

          * Joint Photographics Experts Group - JPEG - .jp2

          * Bitmap - BMP - .bmp
          Some of the above raster formats have limitations and not all data can
          be converted to the format. For a list of formats and their
          limitations, refer to List of supported sensors.
      To (String):
          The email address of the recipient.This tool will be able to email to
          this address if and only if the
          SMTP server has been configured within this model."""
    ...

@gptooldoc('ExtractDataTask_server', None)
def ExtractDataTask(Layers_to_Clip=..., Area_of_Interest=..., Feature_Format=..., Raster_Format=..., Output_Zip_File=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ExtractDataTask_server(Layers_to_Clip;Layers_to_Clip..., Area_of_Interest, Feature_Format, Raster_Format, Output_Zip_File)

        Extracts the selected layers in the specified area of interest to the
        selected formats and spatial reference, and returns the data in a .zip
        file.

     INPUTS:
      Layers_to_Clip (Layer):
          The layers to be clipped. Layers must be feature or raster; layer
          files are not supported.
      Area_of_Interest (Feature Set):
          One or more polygons by which the layers will be clipped.
      Feature_Format (String):
          Specifies the format of the output features. The format should
          be specified as follows:

          * Name or format - Short Name - extension (if any)
          The hyphens are required and there must be one space before and after
          the hyphen. For example:

          * File Geodatabase - GDB - .gdb

          * Shapefile - SHP - .shp

          * Autodesk AutoCAD - DXF_R2007 - .dxf

          * Autodesk AutoCAD - DWG_R2007 - .dwg

          * Bentley Microstation Design (V8) - DGN_V8 - .dgn
          The list of short names supported includes DGN_V8, DWG_R14, DWG_R2000,
          DWG_R2004, DWG_R2005, DWG_R2007, DWG_R2010, DXF_R14, DXF_R2000,
          DXF_R2004, DXF_R2005, DXF_R2007, and DXF_R2010.
      Raster_Format (String):
          Specifies the format of the output raster datasets. The format
          should be specified as follows:

          * Name of format - Short Name - extension (if any)
          The hyphens are required and there must be one space before and after
          the hyphen. For example:

          * Esri GRID - GRID

          * File Geodatabase - GDB - .gdb

          * ERDAS IMAGINE - IMG - .img

          * Tagged Image File Format - TIFF - .tif

          * Portable Network Graphics - PNG - .png

          * Graphic Interchange Format - GIF - .gif

          * Joint Photographics Experts Group - JPEG - .jpg

          * Joint Photographics Experts Group - JPEG - .jp2

          * Bitmap - BMP - .bmp
          Some of the above raster formats have limitations and not all data can
          be converted to the format. For a list of formats and their
          limitations, refer to List of supported sensors.

     OUTPUTS:
      Output_Zip_File (File):
          The zip file that will contain the extracted data."""
    ...

@gptooldoc('SendEmailWithZipFileAttachment_server', None)
def SendEmailWithZipFileAttachment(To=..., From=..., Subject=..., Text=..., Zip_File=..., Max_File_Size__MB_=..., SMTP_Email_Server=..., User=..., Password=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """SendEmailWithZipFileAttachment_server(To, From, Subject, Text, Zip_File, Max_File_Size__MB_, SMTP_Email_Server, {User}, {Password})

        Emails a file to an email address using an SMTP email server.

     INPUTS:
      To (String):
          The email address of the recipient.
      From (String):
          The email address of the sender.
      Subject (String):
          The text in the subject line of the email.
      Text (String):
          The body text of the email.
      Zip_File (File):
          The file to be attached to the email.
      Max_File_Size__MB_ (Long):
          The maximum allowable size of an attachment.If you don't know what to
          use for Max File Size, check the attachment
          size limit of your SMTP mail server and the recipient email provider.
      SMTP_Email_Server (String):
          The SMTP email server that will deliver the email.
      User {String}:
          The user which will log in to the SMTP email server.
      Password {String}:
          The user password used to connect to the SMTP email server (if
          necessary)."""
    ...

@gptooldoc('ExportWebMap_server', None)
def ExportWebMap(Web_Map_as_JSON=..., Output_File=..., Format=..., Layout_Templates_Folder=..., Layout_Template=..., Layout_Item_ID=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ExportWebMap_server(Web_Map_as_JSON, Output_File, {Format}, {Layout_Templates_Folder}, {Layout_Template}, {Layout_Item_ID})

        Returns a printable page layout or basic map of a specified area of
        interest based on the state of a web app (for example, included
        services, layer visibility settings, and client-side graphics).

     INPUTS:
      Web_Map_as_JSON (String):
          A JSON representation of the state of the map to be exported as it
          appears in the web app. See the ExportWebMap specification to
          understand how to format this text. The ArcGIS Maps SDK for JavaScript
          allows you to get this JSON string from the map.
      Format {String}:
          Specifies the format in which the map image for printing will be
          delivered.

          * PNG8-8-bit Portable Network Graphics (PNG8) will be used. This is
          the default.

          * PDF-Portable Document Format (PDF) will be used.

          * PNG32-32-bit Portable Network Graphics (PNG32) will be used.

          * JPG-Joint Photographic Experts Group (JPG) will be used.

          * GIF-Graphics Interchange Format (GIF) will be used.

          * EPS-Encapsulated PostScript (EPS) will be used.

          * SVG-Scalable Vector Graphics (SVG) will be used.

          * SVGZ-Compressed Scalable Vector Graphics (SVGZ) will be used.

          * AIX-Adobe Illustrator Exchange (AIX) will be used.

          * TIFF-Tag Image File Format (TIFF) will be used.
          The background of the output file is always opaque.
      Layout_Templates_Folder {Folder}:
          The full path to the folder containing layout pages (.pagx files ) to
          be used as layout templates. The default location is <install_director
          y>\\Resources\\ArcToolBox\\Templates\\ExportWebMapTemplates.
      Layout_Template {String}:
          The name of a template from the list or the keyword MAP_ONLY. When
          MAP_ONLY is used or an empty string is passed in, the output map will
          not contain any page layout elements such as title, legend, or scale
          bar.
      Layout_Item_ID {String}:
          The portal ID (in JSON format) of the layout item that will be used
          for templates. Use the format: {"id": "<portal-id>"}. When specified,
          this parameter takes precedence over the Layout_Template parameter.

     OUTPUTS:
      Output_File (File):
          The output file name. The extension of the file depends on the Format
          parameter value."""
    ...

@gptooldoc('GetLayoutTemplatesInfo_server', None)
def GetLayoutTemplatesInfo(Layout_Templates_Folder=..., Layout_Item_ID=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GetLayoutTemplatesInfo_server({Layout_Templates_Folder}, {Layout_Item_ID})

        Returns the content of layout templates in JSON format. Layout files
        (.pagx files) located in a folder are used as layout templates.

     INPUTS:
      Layout_Templates_Folder {Folder}:
          The full path to the folder where the layout files (.pagx files) that
          will be used as layout templates are located. The default location is
          <install_directory>\\Resources\\ArcToolBox\\Templates\\ExportWebMapTemplat
          es.
      Layout_Item_ID {String}:
          The portal ID (in JSON format) of the layout item that will be used
          for templates. Use the format: {"id": "<portal-id>"}."""
    ...

@gptooldoc('ReplaceWebLayer_server', None)
def ReplaceWebLayer(target_layer=..., archive_layer_name=..., update_layer=..., replace_item_info=..., create_new_item=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ReplaceWebLayer_server(target_layer, archive_layer_name, update_layer, {replace_item_info}, {create_new_item})

        Replaces the content of a web layer in a portal with the content of
        another web layer.

     INPUTS:
      target_layer (Vector Tile Layer / Internet Tiled Layer / Scene Layer):
          The web layer that will be replaced. In addition to a layer or
          catalog path, it can also be specified using the item ID or service
          URL of one of the following:

          * Vector tile

          * Tile layer

          * Scene layer published from one of the following sources:

          * Scene layer package

          * Referenced scene cache in folder or cloud data stores
      archive_layer_name (String):
          A unique name for the archive layer. The web layer that is replaced
          remains in the portal as an archive layer.
      update_layer (Vector Tile Layer / Internet Tiled Layer / Scene Layer):
          The replacement web layer. In addition to a layer or catalog
          path, it can also be specified using the item ID or service URL of one
          of the following:

          * Vector tile

          * Tile layer

          * Scene layer published from one of the following sources:

          * Scene layer package

          * Referenced scene cache in folder or cloud data stores
      replace_item_info {Boolean}:
          Specifies whether the thumbnail image, summary, description, and tags
          will be replaced. In either case, the item's credits (attribution),
          terms of use, and created from information are not replaced.

          * KEEP-The target layer's item information will not be replaced when
          the layer is updated. This is the default.

          * REPLACE-The target layer's item information will be replaced by the
          update layer's item information.
      create_new_item {Boolean}:
          Specifies whether an item will be created for the archive layer. This
          parameter is supported on portals in ArcGIS Online and ArcGIS
          Enterprise 10.8 or later.

          * TRUE-An item ID will be created for the archive layer. This is the
          default for scene layers.

          * FALSE-The item ID of the update layer will be used for the archive
          layer. This is the default for vector tile layers and tile layers."""
    ...

@gptooldoc('StageService_server', None)
def StageService(in_service_definition_draft=..., out_service_definition=..., staging_version=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """StageService_server(in_service_definition_draft, out_service_definition, {staging_version})

        Stages a service definition. A staged service definition file (.sd)
        contains all the necessary information to share a web layer, locator,
        web tool, or service.

     INPUTS:
      in_service_definition_draft (File):
          The input draft service definition. Service definition drafts can be
          created using the arcpy.sharing module or the CreateGeocodeSDDraft,
          CreateGPSDDraft, or CreateImageSDDraft ArcPy functions.
      staging_version {Long}:
          The version of the published service definition.When sharing a
          feature, a tile, or an imagery layer to ArcGIS
          Enterprise, use 5 for the value. When sharing a map image layer or web
          tool to ArcGIS Enterprise, and any layer type to ArcGIS Online, use
          102. This is the default.When sharing a web tool or geoprocessing
          service to a 10.9.1 or
          earlier server using the CreateGPSDDraft ArcPy function, use the value
          corresponding to the version number from the following list:

          * 10.9.1-209

          * 10.9-208

          * 10.8.1-206

          * 10.8-205

          * 10.7.1-204

          * 10.7-203

          * 10.6.1-202

          * 10.6-201

          * 10.5.1-200

     OUTPUTS:
      out_service_definition (File):
          The resulting service definition. The default is to write the service
          definition to the same directory as the draft service definition."""
    ...

@gptooldoc('UploadServiceDefinition_server', None)
def UploadServiceDefinition(in_sd_file=..., in_server=..., in_service_name=..., in_cluster=..., in_folder_type=..., in_folder=..., in_startupType=..., in_override=..., in_my_contents=..., in_public=..., in_organization=..., in_groups=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """UploadServiceDefinition_server(in_sd_file, in_server, {in_service_name}, {in_cluster}, {in_folder_type}, {in_folder}, {in_startupType}, {in_override}, {in_my_contents}, {in_public}, {in_organization}, {in_groups;in_groups...})

        Uploads and shares a web layer, locator, web tool, or service to
        ArcGIS Online, ArcGIS Enterprise, or ArcGIS Server.

     INPUTS:
      in_sd_file (File):
          The service definition file (.sd) that contains all the information
          needed to share a web layer, web tool, or service.
      in_server (ServerConnection):
          The server type. The following server types are supported:

          * My Hosted Services-Use when sharing a hosted web layer to ArcGIS
          Online or ArcGIS Enterprise. Enter My Hosted Services for the server
          connection. Capitalize the first letter of each word and include a
          space between each word.

          * HOSTING_SERVER-Use when sharing a hosted web layer to ArcGIS Online
          or ArcGIS Enterprise.

          * URL to the ArcGIS Enterprise portal federated server-Use when
          sharing a web tool or map image layer to an ArcGIS Enterprise portal
          federated server.

          * ArcGIS Server connection-Use when sharing a map or geoprocessing
          service to ArcGIS Server. You can use ArcGIS Server connections listed
          under the Servers node in the Project window, or you can browse to a
          folder where server connection files are stored.

          * URL to ArcGIS Server-Use when sharing a map or geoprocessing service
          to ArcGIS Server. You can specify the URL to ArcGIS Server provided a
          publisher connection to ArcGIS Server has been added to the ArcGIS Pro
          project, and you're opening the project in the script or you're
          running the tool in ArcGIS Pro.
      in_service_name {String}:
          The service name that will override the current service name specified
          in the service definition.
      in_cluster {String}:
          The cluster name that will override the current cluster to which the
          service has been assigned. You must choose from clusters on the
          specified server.Clusters are deprecated at ArcGIS Enterprise 10.5.1.
          This parameter
          will be ignored for servers that do not support multiple clusters.
      in_folder_type {String}:
          Specifies the folder type that will be used to determine the source
          for the folder. The default is to get a folder from the service
          definition. You can also get a list of existing folders on the
          specified online server, or you can specify that a new folder be
          created once you share the web layer or service.

          * NEW-A new folder will be created.

          * EXISTING-An existing folder on the server will be used.

          * FROM_SERVICE_DEFINITION-The folder in the service definition will be
          used. This is the default.
      in_folder {String}:
          The folder that will be used for the web layer or service. If no
          folder is provided, the folder specified in the service definition
          will be used. If you specified NEW for in_folder_type, use this
          parameter to provide a folder name. If you specified EXISTING for
          in_folder_type, you can choose from the existing folders on the
          server.
      in_startupType {Boolean}:
          Specifies whether the service will be started after sharing.

          * STARTED-The service will be started after sharing. This is the
          default.

          * STOPPED-The service will not be started after sharing.
      in_override {Boolean}:
          Specifies whether the sharing properties set in the service definition
          will be overridden. These properties define if, and how, you are
          sharing the web layer or web tool with ArcGIS Online or ArcGIS
          Enterprise. Sharing the web layer or web tool exposes it for others to
          use.

          * OVERRIDE_DEFINITION-The sharing properties set in the service
          definition will be overridden.

          * USE_DEFINITION-The sharing properties set in the service definition
          will not be overridden; they will be used. This is the default.
          You must be signed in to ArcGIS Online or ArcGIS Enterprise to
          override sharing properties.This parameter is not honored when sharing
          to ArcGIS Server.
      in_my_contents {Boolean}:
          Specifies whether web layers and web tools will be shared.All shared
          web layers and web tools are available through My Content.
          Even if you only want to share with a specific group in your
          organization, the web layer or web tool will also be shared through My
          Content.

          * SHARE_ONLINE-The web layer or web tool will be shared on ArcGIS
          Online or ArcGIS Enterprise. The web layer or web tool will be listed
          under My Content.

          * NO_SHARE_ONLINE-The web layer or web tool will not be shared on
          ArcGIS Online or ArcGIS Enterprise and will be inaccessible to other
          ArcGIS Online or ArcGIS Enterprise users and clients on the web. This
          is the default.
          You must be signed in to a portal to override sharing properties.This
          parameter is not honored when sharing to ArcGIS Server.
      in_public {Boolean}:
          Specifies whether the web layer or web tool will be available to the
          public.

          * PUBLIC-The web layer or web tool will be available to the public.

          * PRIVATE-The web layer or web tool will not be available to the
          public. This is the default.
          You must be signed in to ArcGIS Online or ArcGIS Enterprise to
          override sharing properties.This parameter is not honored when sharing
          to ArcGIS Server.
      in_organization {Boolean}:
          Specifies whether the web layer or web tool will be shared with your
          organization.

          * SHARE_ORGANIZATION-The web layer or web tool will be shared with
          your organization.

          * NO_SHARE_ORGANIZATION-The web layer or web tool will not be shared
          with your organization. This is the default.
          You must be signed in to ArcGIS Online or ArcGIS Enterprise to
          override sharing properties.This parameter is not honored when sharing
          to ArcGIS Server.
      in_groups {String}:
          A list of group names with which the web layer or web tool will be
          shared.You must be signed in to ArcGIS Online or ArcGIS Enterprise to
          override sharing properties.This parameter is not honored when sharing
          to ArcGIS Server."""
    ...

@gptooldoc('AnalyzeRasterAnalysisDataLocation_server', None)
def AnalyzeRasterAnalysisDataLocation(in_task=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """AnalyzeRasterAnalysisDataLocation_server(in_task)

        Analyze input data locations in a Raster Analysis task.

     INPUTS:
      in_task (File / String):
          Input Raster Analysis Task"""
    ...

