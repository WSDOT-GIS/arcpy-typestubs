"""
This type stub file was generated by pyright.
"""

from arcpy.geoprocessing._base import gptooldoc

r"""The Editing tools allow you to apply bulk editing to all (or selected)
features in a feature class."""
__all__ = [
    "AlignFeatures",
    "CalculateTransformationErrors",
    "Densify",
    "EdgematchFeatures",
    "ErasePoint",
    "ExtendLine",
    "FlipLine",
    "Generalize",
    "GenerateEdgematchLinks",
    "GenerateRubbersheetLinks",
    "RubbersheetFeatures",
    "SimplifyByStraightLinesAndCircularArcs",
    "Snap",
    "SplitLineByMatch",
    "TransferAttributes",
    "TransformFeatures",
    "TrimLine",
    "UpdateCOGO",
]
__alias__ = ...

@gptooldoc("Densify_edit", None)
def Densify(
    in_features=...,
    densification_method=...,
    distance=...,
    max_deviation=...,
    max_angle=...,
    max_vertex_per_segment=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Densify_edit(in_features, {densification_method}, {distance}, {max_deviation}, {max_angle}, {max_vertex_per_segment})

       Adds vertices along line or polygon features and replaces curve
       segments (Bezier, circular arcs, and elliptical arcs) with line
       segments.

    INPUTS:
     in_features (Feature Layer):
         The polygon or line feature class to be densified.
     densification_method {String}:
         Specifies the feature densification method to be used.

         * DISTANCE-Straight lines and curves will be densified using the
         specified distance. This is the default.

         * OFFSET-Curves will be densified using the specified maximum offset
         deviation.

         * ANGLE-Curves will be densified using the specified maximum
         deflection angle.
     distance {Linear Unit}:
         The maximum distance between vertices. This distance will always be
         applied to line segments and to simplify curves. The default value is
         a function of the data's x,y tolerance.New vertices may not be
         inserted at this exact interval along the
         line, rather they will be inserted within this distance of the
         previous vertex. There is no way to ensure that a vertex is added
         exactly at the specified interval along the line segment.
     max_deviation {Linear Unit}:
         The maximum distance the output segment will be from the original.
         This parameter only affects curves. The default value is a function of
         the data's x,y tolerance.
     max_angle {Double}:
         The maximum angle the output geometry can be from the input geometry.
         The valid range is 0 to 90. The default value is 10. This parameter
         only affects curves.
     max_vertex_per_segment {Long}:
         The maximum vertex count allowed per segment. If no value or an
         invalid value (0 or less) is entered, there will be no vertex limit
         for linear segments, and curve segments will have a default of 12000."""
    ...

@gptooldoc("ErasePoint_edit", None)
def ErasePoint(
    in_features=..., remove_features=..., operation_type=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ErasePoint_edit(in_features, remove_features, {operation_type})

       Deletes points from the input that are either inside or outside the
       remove features, depending on the operation type.

    INPUTS:
     in_features (Feature Layer):
         The input point features.
     remove_features (Feature Layer):
         The polygon features that will be used to determine which features
         from the in_features value will be deleted.
     operation_type {String}:
         Specifies whether points inside or outside the remove features will be
         deleted.

         * INSIDE-Input point features inside or on the boundary of the remove
         features will be deleted.

         * OUTSIDE-Input point features outside the remove features will be
         deleted."""
    ...

@gptooldoc("ExtendLine_edit", None)
def ExtendLine(
    in_features=..., length=..., extend_to=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """ExtendLine_edit(in_features, {length}, {extend_to})

       Extends line segments to the first intersecting feature within a
       specified distance. If no intersecting feature is within the specified
       distance, the line segment will not be extended. Tool use is intended
       for quality control tasks such as cleaning up topology errors in
       features that were digitized without having set proper snapping
       environments.

    INPUTS:
     in_features (Feature Layer):
         The line input features to be extended.
     length {Linear Unit}:
         The maximum distance a line segment can be extended to an intersecting
         feature.
     extend_to {Boolean}:
         Specifies whether line segments can be extended to other extended line
         segments within the specified extend length.

         * EXTENSION-Line segments can be extended to other extended line
         segments as well as existing line features. This is the default.

         * FEATURE-Line segments can only be extended to existing line
         features."""
    ...

@gptooldoc("FlipLine_edit", None)
def FlipLine(
    in_features=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """FlipLine_edit(in_features)

       Reverses the from-to direction of line features.

    INPUTS:
     in_features (Feature Layer):
         The input line feature class or layer."""
    ...

@gptooldoc("Generalize_edit", None)
def Generalize(
    in_features=..., tolerance=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Generalize_edit(in_features, {tolerance})

       Simplifies the input features using a specified maximum offset
       tolerance. The output features will contain a subset of the original
       input vertices.

    INPUTS:
     in_features (Feature Layer):
         The polygon or line features to be generalized.
     tolerance {Linear Unit}:
         The tolerance sets the maximum allowable offset, which will determine
         the degree of simplification. This value limits the distance the
         output geometry can differ from the input geometry. You can specify a
         preferred unit of measurement. The default is the feature unit."""
    ...

@gptooldoc("SimplifyByStraightLinesAndCircularArcs_edit", None)
def SimplifyByStraightLinesAndCircularArcs(
    in_features=...,
    max_offset=...,
    fitting_type=...,
    circular_arcs=...,
    max_arc_angle_step=...,
    min_vertex_count=...,
    min_radius=...,
    max_radius=...,
    min_arc_angle=...,
    closed_ends=...,
    anchor_points=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """SimplifyByStraightLinesAndCircularArcs_edit(in_features;in_features..., max_offset, {fitting_type}, {circular_arcs}, {max_arc_angle_step}, {min_vertex_count}, {min_radius}, {max_radius}, {min_arc_angle}, {closed_ends}, {anchor_points})

       Simplifies polygon and line features by replacing consecutive line
       segments or edges with fewer line segments or edges. Lines segments
       and polygon edges are simplified based on a specified maximum
       allowable offset. Additionally, circular arcs can be created from
       consecutive line segments or polygon edges.

    INPUTS:
     in_features (Feature Layer):
         The features to be simplified. Features can be lines or polygons. If
         using multiple inputs, the features must have the same spatial
         reference.
     max_offset (Linear Unit):
         The maximum distance the output feature edges can deviate from the
         input feature shapes. When the Fit to vertices option is specified for
         the Fitting Type parameter, the distance is measured between the input
         vertices and the output feature edges. When the Fit to segments option
         is specified, the distance is measured between the input feature edges
         and the output feature edges.
     fitting_type {String}:
         Specifies how the output feature edges and circular arcs will be
         fitted to the input feature shapes.If Fit to segments is specified,
         the Maximum Arc Angle Step and
         Minimum Number Of Vertices parameters are not available.

         * FIT_TO_VERTICES-The offset gap between the output feature edges and
         the input feature vertices will be minimized. Output feature edges and
         curves will be fitted approximately to the input feature vertex
         positions. This is the default.

         * FIT_TO_SEGMENTS-The offset gap between the output feature edges and
         input feature edges will be minimized. Output edges and curves will be
         fitted approximately to the positions of the input feature shapes.
     circular_arcs {Boolean}:
         Specifies whether circular arcs will be created.

         * CREATE-Circular arcs will be created. This is the default.

         * NOT_CREATE-Circular arcs will not be created.
     max_arc_angle_step {Double}:
         The maximum arc angle step (decimal degrees) that will be used to
         construct circular arcs. The arc angle defines how wide the visual
         field can be, for each step, when locating vertices to construct
         circular curves. The arc angle is the central angle of the candidate
         curve (the curve that is being constructed). If vertices are found
         within each maximum arc angle step, a circular arc is constructed. For
         example, if vertices and edges are sparse, use a large arc angle step.
         The valid value range is from 2 through 95 decimal degrees. The
         default is 20 decimal degrees. This parameter is not available if the
         Fit to segments option is specified for the Fitting Type parameter.
     min_vertex_count {Long}:
         The minimum number of vertices required for a circular arc to be
         created. The value must be greater than 3. The default is 4. This
         parameter is not available if the Fit to segments option is specified
         for the Fitting Type parameter.
     min_radius {Linear Unit}:
         The smallest allowable radius for output circular arcs. The value must
         be greater than 0 and smaller than the value provided for Maximum
         Radius. If no value is provided, the radius of the output circular
         arcs will not be checked (default).
     max_radius {Linear Unit}:
         The largest allowable radius for output circular arcs. The value must
         be greater than the value provided for Minimum Radius. If no value is
         provided, the radius of the output circular arcs will not checked
         (default).
     min_arc_angle {Double}:
         The minimum arc angle (decimal degrees) that will be used to construct
         circular arcs. The minimum arc angle is the smallest allowable central
         angle in the output circular arcs. If the central angle of any output
         circular arc is less than this value, it will not be created. The
         valid value range is from 2 through 360 decimal degrees. The default
         is 2 decimal degrees.
     closed_ends {Boolean}:
         Specifies whether the endpoints of a closed line will be preserved. A
         closed line is a line that has coincident end points (loop).

         * PRESERVE-The endpoints of closed lines will be preserved. This is
         the default.

         * NOT_PRESERVE-The endpoints of closed lines will not be preserved;
         they can be moved or deleted.
     anchor_points {Feature Layer}:
         The path and name of the feature class that contains anchor points.
         Anchor points overlay vertices on the input features and indicate that
         they should not be moved or deleted in the simplify process."""
    ...

@gptooldoc("Snap_edit", None)
def Snap(
    in_features=..., snap_environment=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Snap_edit(in_features, snap_environment;snap_environment...)

       Moves points or vertices to coincide exactly with the vertices, edges,
       or end points of other features. Snapping rules can be specified to
       control whether the input vertices are snapped to the nearest vertex,
       edge, or endpoint within a specified distance.

    INPUTS:
     in_features (Feature Layer):
         The input features with the vertices that will be snapped to the
         vertices, edges, or end points of other features. The input features
         can be points, multipoints, lines, or polygons.
     snap_environment (Value Table):
         The feature classes or feature layers containing the features to snap
         to.The snapping environment components are as follows:

         * Features-The features that the input features' vertices will be
         snapped to. These features can be points, multipoints, lines, or
         polygons.

         * Type-The type of feature part that the input features' vertices can
         be snapped to.

         * Distance-The distance within which the input features' vertices will
         be snapped to the nearest end point, vertex, or edge.
         Available snapping types are as follows:

         * END-Input feature vertices will be snapped to feature ends.

         * VERTEX-Input feature vertices will be snapped to feature vertices.

         * EDGE-Input feature vertices will be snapped to feature edges.
         If a distance is used without a unit (for example, 10 instead of 10
         meters), the linear or angular unit from the input feature's
         coordinate system will be used as the default. If the input features
         have a projected coordinate system, its linear unit will be used."""
    ...

@gptooldoc("TrimLine_edit", None)
def TrimLine(
    in_features=..., dangle_length=..., delete_shorts=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """TrimLine_edit(in_features, {dangle_length}, {delete_shorts})

       Removes portions of a line that extend a specified distance past a
       line intersection (dangles). Any line that does not touch another line
       at both endpoints can be trimmed, but only the portion of the line
       that extends past the intersection by the specified distance will be
       removed.

    INPUTS:
     in_features (Feature Layer):
         The line input features to be trimmed.
     dangle_length {Linear Unit}:
         Line segments that are shorter than the specified dangle length and do
         not touch another line at both endpoints (dangles) will be trimmed.If
         a dangle length is not specified, all dangling lines (line segments
         that do not touch another line at both endpoints), regardless of
         length, will be trimmed back to the point of intersection.
     delete_shorts {Boolean}:
         Specifies whether line segments which are less than the dangle length
         and are free-standing will be deleted.

         * DELETE_SHORT-Delete short free-standing features. This is the
         default.

         * KEEP_SHORT-Do not delete short free-standing features."""
    ...

@gptooldoc("UpdateCOGO_edit", None)
def UpdateCOGO(
    in_line_features=...,
    distances_type=...,
    distance_tolerance=...,
    direction_type=...,
    minimum_direction_difference=...,
    minimum_direction_lateral_offset=...,
    combined_scale_factor=...,
    direction_offset=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """UpdateCOGO_edit(in_line_features, {distances_type}, {distance_tolerance}, {direction_type}, {minimum_direction_difference}, {minimum_direction_lateral_offset}, {combined_scale_factor}, {direction_offset})

       Updates the COGO attributes of COGO-enabled line features to match
       their line shape geometries.

    INPUTS:
     in_line_features (Feature Layer):
         The COGO-enabled line features that will be updated.
     distances_type {String}:
         Specifies how the input line's Distance, Radius, and Arc Length COGO
         attributes will be updated.

         * OVERWRITE-All values (including NULL values) will be updated to
         match the shape length. This is the default.

         * UPDATE_NULL_ONLY-Only NULL values will be updated to match the shape
         length.

         * USE_MINIMUM_DIFFERENCE-Values that differ from the shape length by
         more than the specified tolerance will be updated to match the shape
         length.

         * DO_NOT_UPDATE-Values will not be updated.
     distance_tolerance {Linear Unit}:
         The minimum distance difference between the line shape length and the
         value in the Distance, Radius, and Arc Length fields. If the
         difference in the distances is larger than the specified tolerance,
         the attribute value in the Distance, Radius, or Arc Length fields will
         be updated to match the line shape length. The default value is 0
         meters.
     direction_type {String}:
         Specifies how the input's Direction COGO attributes will be updated.

         * OVERWRITE-All values (including NULL values) will be updated to
         match shape direction. This is the default.

         * UPDATE_NULL_ONLY-Only NULL values will be updated to match the shape
         direction.

         * USE_MINIMUM_DIFFERENCE-Values that differ from the shape direction
         by more than the specified tolerance will be updated to match the
         shape direction.

         * DO_NOT_UPDATE-Values will not be updated.
     minimum_direction_difference {Double}:
         The minimum direction difference (in seconds) between the line shape
         direction and the value in the Direction field. If the difference in
         the directions is larger than the specified tolerance, the attribute
         value in the Direction field will be updated to match the line shape
         direction. The default value is 0.
     minimum_direction_lateral_offset {Linear Unit}:
         The minimum allowable distance between the endpoint of the line shape
         and the endpoint of the line drawn using the value in the Direction
         field. A lateral offset tolerance can be used for very long lines in
         which small changes in direction can result in large differences in
         line endpoints. The default value is 0 meters.
     combined_scale_factor {Calculator Expression}:
         A scale factor based on a ground to grid correction that will be
         applied to the line's shape length. The scale factor can be provided
         as a number or derived from an Arcade expression using the line's
         attribute fields. The updated distance populated in the Distance,
         Radius, and Arc Length fields is a result of the shape length
         multiplied by the scale factor.
     direction_offset {Calculator Expression}:
         A rotation based on a ground to grid correction that will be applied
         to the line's shape direction. The rotation offset can be provided as
         a value in seconds or derived from an Arcade expression using the
         line's attribute fields. The updated direction populated in the line's
         Direction field is the line shape direction rotated by the specified
         direction offset."""
    ...

@gptooldoc("AlignFeatures_edit", None)
def AlignFeatures(
    in_features=..., target_features=..., search_distance=..., match_fields=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """AlignFeatures_edit(in_features, target_features, search_distance, {match_fields;match_fields...})

       Identifies inconsistent portions of the input features against target
       features within a search distance and aligns them with the target
       features.

    INPUTS:
     in_features (Feature Layer):
         Input line or polygon features to be adjusted.
     target_features (Feature Layer):
         Input lines or polygons as target features.
     search_distance (Linear Unit):
         The distance used to search for match candidates. A distance must be
         specified and it must be greater than zero. You can choose a preferred
         unit; the default is the feature unit.
     match_fields {Value Table}:
         Fields from input and target features. If specified, each pair of
         fields are checked for match candidates to help determine the right
         match."""
    ...

@gptooldoc("CalculateTransformationErrors_edit", None)
def CalculateTransformationErrors(
    in_link_features=..., out_link_table=..., method=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """CalculateTransformationErrors_edit(in_link_features, out_link_table, {method})

       Calculates residue errors and root mean square error (RMSE) based on
       the coordinates of the input links between known control points to be
       used for spatial data transformation.

    INPUTS:
     in_link_features (Feature Layer):
         Input link features that link known control points for spatial
         transformation.
     method {String}:
         Transformation method to use to convert input feature coordinates.

         * AFFINE-Affine transformation requires a minimum of three
         transformation links. This is the default.

         * PROJECTIVE-Projective transformation requires a minimum of four
         transformation links.

         * SIMILARITY-Similarity transformation requires a minimum of two
         transformation links.

    OUTPUTS:
     out_link_table (Table):
         The output table containing input links feature IDs and their residual
         errors. The residual errors for input links are written to the
         specified output table that contains the following fields:

         * Orig_FID-The input link feature ID

         * X_Source-The x coordinate of the source or from end location of the
         link

         * Y_Source-The y coordinate of the source or from end location of the
         link

         * X_Destination-The x coordinate of the destination or to end location
         of the link

         * Y_Destination-The y coordinate of the destination or to end location
         of the link

         * Residual_Error-The residual error of the transformed location"""
    ...

@gptooldoc("EdgematchFeatures_edit", None)
def EdgematchFeatures(
    in_features=...,
    in_link_features=...,
    method=...,
    adjacent_features=...,
    border_features=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """EdgematchFeatures_edit(in_features, in_link_features, {method}, {adjacent_features}, {border_features})

       Modifies input line features by spatially adjusting their shapes,
       guided by the specified edgematch links, so they become connected with
       the lines in the adjacent dataset.

    INPUTS:
     in_features (Feature Layer):
         Input line features to be adjusted.
     in_link_features (Feature Layer):
         Input line features representing edgematch links.
     method {String}:
         Edgematch method to be used to adjust either input features only or
         both input features and adjacent features to new connecting locations.

         * MOVE_ENDPOINT-Moves the endpoint of a line to the new connecting
         location. This is the default.

         * ADD_SEGMENT-Adds a straight segment at the end of a line so it ends
         at the new connecting location.

         * ADJUST_VERTICES-Adjusts the endpoint of a line to the new connecting
         location. The remaining vertices are also adjusted so its positional
         changes are gradually reduced toward the opposite end of the line.
     adjacent_features {Feature Layer}:
         Line features that are adjacent to input features. If specified, both
         the input and adjacent features are adjusted to meet at new connecting
         locations, either the midpoints of the edgematch links or locations
         nearest to the midpoints of the links on the border features (if
         specified).
     border_features {Feature Layer}:
         Line or polygon features representing borders between the input and
         adjacent features. When you specify border features, both input and
         adjacent features are adjusted to meet at new connecting locations
         nearest to the midpoints of the links on the border features."""
    ...

@gptooldoc("GenerateEdgematchLinks_edit", None)
def GenerateEdgematchLinks(
    source_features=...,
    adjacent_features=...,
    out_feature_class=...,
    search_distance=...,
    match_fields=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateEdgematchLinks_edit(source_features, adjacent_features, out_feature_class, search_distance, {match_fields;match_fields...})

       Finds matching but disconnected line features along the edges of the
       source data's area and its adjacent data's area, and generates
       edgematch links from the source lines to the matched adjacent lines.

    INPUTS:
     source_features (Feature Layer):
         Line features as edgematching source features. All edgematch links
         start at source features.
     adjacent_features (Feature Layer):
         Line features adjacent to source features. All edgematch links end at
         matched adjacent features.
     search_distance (Linear Unit):
         The distance used to search for match candidates. A distance must be
         specified and it must be greater than zero. You can choose a preferred
         unit; the default is the feature unit.
     match_fields {Value Table}:
         Fields from source and target features, where target fields are from
         the adjacent features. If specified, each pair of fields are checked
         for match candidates to help determine the right match.

    OUTPUTS:
     out_feature_class (Feature Class):
         Output feature class containing lines representing edgematch links."""
    ...

@gptooldoc("GenerateRubbersheetLinks_edit", None)
def GenerateRubbersheetLinks(
    source_features=...,
    target_features=...,
    out_feature_class=...,
    search_distance=...,
    match_fields=...,
    out_match_table=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateRubbersheetLinks_edit(source_features, target_features, out_feature_class, search_distance, {match_fields;match_fields...}, {out_match_table})

       Finds where the source line features spatially match the target line
       features and generates lines representing links from source locations
       to corresponding target locations for rubbersheeting.

    INPUTS:
     source_features (Feature Layer):
         Line features as source features for generating rubbersheet links. All
         links start at source features.
     target_features (Feature Layer):
         Line features as target features for generating rubbersheet links. All
         links end at matched target features.
     search_distance (Linear Unit):
         The distance used to search for match candidates. A distance must be
         specified and it must be greater than zero. You can choose a preferred
         unit; the default is the feature unit.
     match_fields {Value Table}:
         Lists of fields from source and target features. If specified, each
         pair of fields are checked for match candidates to help determine the
         right match.

    OUTPUTS:
     out_feature_class (Feature Class):
         Output feature class containing lines representing regular rubbersheet
         links.
     out_match_table {Table}:
         The output table containing complete feature matching information."""
    ...

@gptooldoc("RubbersheetFeatures_edit", None)
def RubbersheetFeatures(
    in_features=..., in_link_features=..., in_identity_links=..., method=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """RubbersheetFeatures_edit(in_features, in_link_features, {in_identity_links}, {method})

       Modifies input features by spatially adjusting them through
       rubbersheeting, using the specified rubbersheet links, so they are
       better aligned with the intended target features.

    INPUTS:
     in_features (Feature Layer):
         The input features to be adjusted. They can be points, lines,
         polygons, or annotations.
     in_link_features (Feature Layer):
         The input line features representing regular links for rubbersheeting.
     in_identity_links {Feature Layer}:
         The input point features representing identity links for
         rubbersheeting.
     method {String}:
         Specifies the rubbersheeting method to be used to adjust features.

         * LINEAR-This method is slightly faster and produces good results when
         you have many links spread uniformly over the data you are adjusting.
         This is the default.

         * NATURAL_NEIGHBOR-This method should be used when you have few links
         spaced widely apart."""
    ...

@gptooldoc("SplitLineByMatch_edit", None)
def SplitLineByMatch(
    in_features=...,
    matched_features=...,
    in_match_table=...,
    out_feature_class=...,
    search_distance=...,
    in_features_as=...,
    out_point_feature_class=...,
    split_dangle=...,
    min_match_group_length=...,
    min_split_length=...,
    split_fields=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """SplitLineByMatch_edit(in_features, matched_features, in_match_table, out_feature_class, search_distance, {in_features_as}, {out_point_feature_class}, {split_dangle}, {min_match_group_length}, {min_split_length}, {split_fields;split_fields...})

       Splits input features based on matching relationships to obtain better
       corresponding line segmentation.

    INPUTS:
     in_features (Feature Layer):
         The input line features to be split. They must be prematched with the
         matched features.
     matched_features (Feature Layer):
         Matched features are used as reference when splitting the input
         features. They must be prematched with the input features.
     in_match_table (Table View):
         A table that includes matching information between input and matched
         features.
     search_distance (Linear Unit):
         The distance value used to determine split locations. The value must
         be greater than 0. If units are not specified, the units of the input
         will be used.
     in_features_as {String}:
         Specifies whether the input features in the match table are source
         features or target features, so the correct features will be split.

         * AS_SOURCE-The input features are stored as the source features in
         the match table. This is the default.

         * AS_TARGET-The input features are stored as the target features in
         the match table.
     split_dangle {Boolean}:
         Specifies whether dangling lines will be split.

         * SPLIT_DANGLE-Dangling lines will be split following the tool's split
         rules. This is the default.

         * NO_SPLIT_DANGLE-Dangling lines will not be split.
     min_match_group_length {Linear Unit}:
         A given match group will only participate in the splitting process if
         either the total length of the input features or the total length of
         the matched features are greater than the specified value.
     min_split_length {Linear Unit}:
         If a split will result in one or both of the split pieces being
         shorter than the specified value, the split will not occur.
     split_fields {Field}:
         A list of numeric fields from input features. Their field values will
         be based on the proportions of the split lines.

    OUTPUTS:
     out_feature_class (Feature Class):
         The output feature class containing split lines and original lines
         that are not split.
     out_point_feature_class {Feature Class}:
         The output point feature class containing points that represent split
         locations."""
    ...

@gptooldoc("TransferAttributes_edit", None)
def TransferAttributes(
    source_features=...,
    target_features=...,
    transfer_fields=...,
    search_distance=...,
    match_fields=...,
    out_match_table=...,
    transfer_rule_fields=...,
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """TransferAttributes_edit(source_features, target_features, transfer_fields;transfer_fields..., search_distance, {match_fields;match_fields...}, {out_match_table}, {transfer_rule_fields;transfer_rule_fields...})

       Finds where the source line features spatially match the target line
       features and transfers specified attributes from source features to
       matched target features.

    INPUTS:
     source_features (Feature Layer):
         Line features from which to transfer attributes.
     target_features (Feature Layer):
         Line features to which to transfer attributes. The specified transfer
         fields are added to the target features.
     transfer_fields (Field):
         List of source fields to be transferred to target features. At least
         one field must be specified.
     search_distance (Linear Unit):
         The distance used to search for match candidates. A distance must be
         specified and it must be greater than zero. You can choose a preferred
         unit; the default is the feature unit.
     match_fields {Value Table}:
         Lists of fields from source and target features. If specified, each
         pair of fields are checked for match candidates to help determine the
         right match.
     transfer_rule_fields {Value Table}:
         Sets rules to control which source feature will be used to transfer
         attributes from when multiple source features matched target
         feature(s). The source feature to be used for the transfer is
         determined by the specified rule fields and the ruling values, which
         are ranked from high to low priority as they appear in the specified
         list. If no rules are set, the longest of the multiple matched source
         features will be used for the transfer.Available rule types are as
         follows:

         * MIN-The minimum value for integer or date field. If for a date
         field, the most recent date.

         * MAX-The maximum value for integer or date field. If for a date
         field, the oldest date.

         * A text or integer value that may exist in your source features.

    OUTPUTS:
     out_match_table {Table}:
         The output table containing complete feature matching information."""
    ...

@gptooldoc("TransformFeatures_edit", None)
def TransformFeatures(
    in_features=..., in_link_features=..., method=..., out_link_table=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """TransformFeatures_edit(in_features, in_link_features, {method}, {out_link_table})

       Converts the coordinates of input features from one location to
       another through scaling,  shifting, and rotating based on the
       transformation links between known corresponding control points.

    INPUTS:
     in_features (Feature Layer):
         The input features, the coordinates of which are to be transformed.
         They can be points, lines, polygons, or annotations.
     in_link_features (Feature Layer):
         The input link features that link known control points for the
         transformation.
     method {String}:
         Specifies the transformation method to use to convert input feature
         coordinates.

         * AFFINE-Affine transformation requires a minimum of three
         transformation links. This is the default.

         * PROJECTIVE-Projective transformation requires a minimum of four
         transformation links.

         * SIMILARITY-Similarity transformation requires a minimum of two
         transformation links.

    OUTPUTS:
     out_link_table {Table}:
         The output table containing input links and their residual errors."""
    ...
