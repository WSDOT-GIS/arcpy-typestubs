"""
This type stub file was generated by pyright.
"""

class Arc_base:
    def __init__(self, parent) -> None: ...

class Base_renderer(Arc_base): ...

class UniqueValueRenderer(Base_renderer):
    """The UniqueValueRenderer class represents a unique value renderer."""

    colorRamp = ...
    groups = ...
    fields = ...
    defaultSymbol = ...
    useDefaultSymbol = ...
    @property
    def type(self): ...
    def listMissingValues(self): ...
    def removeValues(
        self, values_or_items
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """UniqueValueRenderer.removeValues(values_or_items)


        removeValues provides a mechanism to remove values in a unique value
        renderer.


        values_or_items(Dictionary):
        A dictionary based on a key that matches the group heading name and a
        value that represents a list of values as strings or a list of items to
        be added to the group.
        For example: removeValues({"group name" : ["str1", "str2", "str3"]}) The
        default value is None.
        """
        ...
    def addValues(self, values_or_items): ...
    def __eq__(self, other) -> bool: ...

class SimpleRenderer(Base_renderer):
    """The SimpleRenderer class represents a simple renderer that draws all features in a layer with a common symbol."""

    label = ...
    description = ...
    symbol = ...
    @property
    def type(self): ...
    def __eq__(self, other) -> bool: ...

class Graduated_colors_renderer(Base_renderer):
    """The GraduatedColorsRenderer class represents the graduated color renderer definition that shows qualitative
    differences in feature values using a range of color.
    """

    classificationField = ...
    normalizationField = ...
    normalizationType = ...
    classificationMethod = ...
    breakCount = ...
    classBreaks = ...
    colorRamp = ...
    intervalSize = ...
    deviationInterval = ...
    @property
    def type(self): ...
    def __repr__(self): ...
    def __eq__(self, other) -> bool: ...

class Graduated_symbols_renderer(Base_renderer):
    """The GraduatedSymbolsRenderer class represents the graduated symbols renderer definition that shows qualitative
    differences in feature values using a range of symbol sizes.
    """

    classificationField = ...
    normalizationField = ...
    normalizationType = ...
    classificationMethod = ...
    breakCount = ...
    classBreaks = ...
    minimumSymbolSize = ...
    maximumSymbolSize = ...
    symbolTemplate = ...
    backgroundSymbol = ...
    colorRamp = ...
    intervalSize = ...
    deviationInterval = ...
    def updateSymbolTemplate(
        self, symbol_template
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GraduatedSymbolsRenderer.updateSymbolTemplate ({symbol_template})

        Provides a mechanism to change the renderer's symbol template.
        symbol_template{Object}:
            A reference to a symbol.
            The default value is None.
        """
        ...
    @property
    def type(self): ...
    def __repr__(self): ...
    def __eq__(self, other) -> bool: ...

class Unclassed_colors_renderer(Base_renderer):
    """Unclassed colors symbology is similar to graduated colors symbology
    in that it's used to make choropleth maps. While graduated colors symbology
    distributes data into discrete classes with unique symbols, unclassed colors
    symbology distributes a color scheme evenly across features.
    """

    field = ...
    expression = ...
    normalizationField = ...
    colorRamp = ...
    upperLabel = ...
    lowerLabel = ...
    symbolTemplate = ...
    def updateSymbolTemplate(
        self, symbol_template
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """UnclassedColorsRenderer.updateSymbolTemplate ({symbol_template})

        Provides a mechanism to change the renderer's symbol template.
        symbol_template{Object}:
            A reference to a symbol.
            The default value is None.
        """
        ...
    @property
    def type(self): ...
    def __repr__(self): ...
    def __eq__(self, other) -> bool: ...
