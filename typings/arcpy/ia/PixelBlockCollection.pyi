"""
This type stub file was generated by pyright.
"""

class PixelBlock:
    def __init__(self, data, extent) -> None:
        """
        PixelBlock type that has all the data/information of a pixel block in a raster.

        :param data: numpy array in ({slices}, rows, cols, bands) shape, include {slices} data for multidimensional raster pixel block.
        :param extent: arcpy.Extent
        """
        ...
    
    def getData(self): # -> Any:
        """
        access the pixel block data as a numpy ndarray array

        :return: numpy.ndarray, a copy of the pixel block data with shape ({slices}, height, width, bands).
        """
        ...
    
    cell_size = ...
    spatial_reference = ...
    tlc = ...
    @property
    def extent(self): # -> Extent:
        ...
    


class PixelBlockCollection:
    def __init__(self, rasters, pixel_block_size=..., stride=..., overlay_type=..., nodata_to_values=...) -> None:
        """
        pixel block collection that queries or iterates on a single raster or a list of rasters. The iteration or pixel block
        index origin is the top left corner of the extent. The order of iteration is left to right, top to bottom.

        index a pixel block on (y, x) tuple, i.e., collection[1, 2] will get the pixel block in the 2nd row from top to bottom
        and the 3rd col from left to right.

        each pixel block has the shape (Slice, Height, Width, Band) for multidimensional raster dataset and (Height, Width, Band)
        for normal raster dataset.

        :param rasters: arcpy.Raster or a list of arcpy.Raster
        :param pixel_block_size: tuple, pixel block size in height and width
        :param stride: tuple(tuple_y, tuple_x) or None, default is None and stride will be set as pixel_block_size,
        :param overlay_type: "INTERSECTION" or "UNION", default is "INTERSECTION". The overlay type on the list of rasters.
        :param nodata_to_values, None, numeric or list of numeric or None, the value to convert the nodata in a raster to.
                                If any element is set to None, the default NoData value in the raster will be used.
        """
        ...
    
    def __iter__(self): # -> Self@PixelBlockCollection:
        ...
    
    def __next__(self): # -> list[Unknown]:
        ...
    
    def __getitem__(self, item): # -> list[Unknown]:
        """
        access the pixel block by giving the block height and width index as a tuple. i.e. pixel_block_collection[height_index, width_index]
        :param item: a tuple (pixel_block_height_index, pixel_block_width_index)
        :return: the pixel block at the index specified as a tuple
        """
        ...
    
    def reset(self): # -> None:
        """
        reset the cursor of the pixel block collection
        :return: None
        """
        ...
    
    def shuffle(self): # -> None:
        """
        shuffle the current pixel block collection, everytime you iterate the pixel block collection you get a random
        location for the pixel blocks
        :return: None
        """
        ...
    


