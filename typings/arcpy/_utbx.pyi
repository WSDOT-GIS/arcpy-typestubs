"""
This type stub file was generated by pyright.
"""

"""
toolbox API
"""
__alias__ = ...
__all__ = ['CreateToolbox', 'CreateTool', 'ImportTool', 'Delete', 'Rename', 'GetProps', 'SetProps', 'AuxFiles', 'AuxFileDelete', 'AuxFileCopy']
def CreateToolbox(path, alias=..., props=...):
  '''
    Create toolbox. NOTE: for universal toolbox path should end with '.tbx/'
    props: dictionary,
      'alias'       - string,
      'displayname' - string,
      'description' - string,
      'helpcontext' - int
  '''
  ...

def Delete(path): # -> None:
  '''
    Delete toolbox or tool
  '''
  ...

def Rename(path, new_name): # -> None:
  '''
    Renames toolbox or tool
  '''
  ...

def GetProps(path, names=...):
  '''
    Get toolbox or tool properties.
    path: full path to toolbox or tool
    names: string or collection of strings,
      '*'              - all available properties (ignore empty)
      toolbox:
        'alias'        - string
        'displayname'  - string
        'description'  - string
        'helpcontext'  - int
        'tools'        - dictionary {toolname(string), toolset(string)}
      tool:
        'type'         - string
        'displayname'  - string
        'description'  - string
        'helpcontext'  - int
        'product_code' - int
        'extention_codes' - tuple of (int)
        'params'       - list of [GPParamater]
        'script_file'  - string <Script tool>
        'validate_file'- string <Script tool>
        'guid'         - string <Function tool>
  '''
  ...

def SetProps(path, props): # -> None:
  '''
    Update toolbox or tool properties.
    path: full path to toolbox or tool
    props: dictionary,
      toolbox:
        'alias'       - string,
        'displayname' - string,
        'description' - string,
        'helpcontext' - int,
        'tools'       - dictionary {toolname, category}. allow to add/change/delete 'category'
      tool:
        'displayname'  - string
        'description'  - string
        'helpcontext'  - int
        'product_code' - int
        'extention_codes' - tuple of int
        'params'       - list of [GPParamater]
        'script_file'  - string <Script tool>
        'validate_file'- string <Script tool>
  '''
  ...

def DeleteTool(path): # -> None:
  '''
     Delete tool. path - <fullpath tbx>/<toolname>
  '''
  ...

def CreateTool(path, type=..., toolset=...): # -> None:
  '''
     Create new tool.
     path: full toolbox path with new tool name
     type: 'ScriptTool', 'ModelTool'
     toolset: (optional) tool's category
  '''
  ...

def ImportTool(path, tool_path, name=..., toolset=...): # -> None:
  '''
     Import tool.
     path: full toolbox path
     tool_path: full tool path or function '{GUID}' or factory '{GUID}/name'
     name: (optional) new tool name, if None - use original tool name
     toolset: (optional) tool's category, if None - 'root' category
  '''
  ...

def AuxFiles(path, auxonly=...):
  '''
     returns tuple of toolbox files
     path: full toolbox path
     auxonly: True - returns auxiliary files only, False - all files inside toolbox
  '''
  ...

def AuxFileDelete(file_path): # -> None:
  '''
     Delete auxiliary file.
     file_path: [string or list,tuple of string] full file path
  '''
  ...

def AuxFileCopy(source_path, destination_path, overwrite=...):
  '''
     Copy file from/to toolbox
     source_path: full path
     destination_path: full path
  '''
  ...

