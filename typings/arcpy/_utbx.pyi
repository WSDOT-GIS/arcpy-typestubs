"""
This type stub file was generated by pyright.
"""

from typing import Iterable, Literal, TypedDict

"""
toolbox API
"""
__alias__ = ...
__all__ = [
    "CreateToolbox",
    "CreateTool",
    "ImportTool",
    "Delete",
    "Rename",
    "GetProps",
    "SetProps",
    "AuxFiles",
    "AuxFileDelete",
    "AuxFileCopy",
]

class CreateToolboxPropsDict(TypedDict):
    alias: str | None
    displayname: str | None
    description: str | None
    helpcontext: int | None

def CreateToolbox(
    path: str, alias: str | None = None, props: CreateToolboxPropsDict | None = None
) -> ...:
    """
    Create toolbox. NOTE: for universal toolbox path should end with '.tbx/'
    props: dictionary,
      'alias'       - string,
      'displayname' - string,
      'description' - string,
      'helpcontext' - int
    """
    ...

def Delete(path: str) -> None:
    """
    Delete toolbox or tool
    """
    ...

def Rename(path: str, new_name) -> None:
    """
    Renames toolbox or tool
    """
    ...

def GetProps(path: str, names=...):
    """
    Get toolbox or tool properties.
    path: full path to toolbox or tool
    names: string or collection of strings,
      '*'              - all available properties (ignore empty)
      toolbox:
        'alias'        - string
        'displayname'  - string
        'description'  - string
        'helpcontext'  - int
        'tools'        - dictionary {toolname(string), toolset(string)}
      tool:
        'type'         - string
        'displayname'  - string
        'description'  - string
        'helpcontext'  - int
        'product_code' - int
        'extention_codes' - tuple of (int)
        'params'       - list of [GPParamater]
        'script_file'  - string <Script tool>
        'validate_file'- string <Script tool>
        'guid'         - string <Function tool>
    """
    ...

def SetProps(path: str, props) -> None:
    """
    Update toolbox or tool properties.
    path: full path to toolbox or tool
    props: dictionary,
      toolbox:
        'alias'       - string,
        'displayname' - string,
        'description' - string,
        'helpcontext' - int,
        'tools'       - dictionary {toolname, category}. allow to add/change/delete 'category'
      tool:
        'displayname'  - string
        'description'  - string
        'helpcontext'  - int
        'product_code' - int
        'extention_codes' - tuple of int
        'params'       - list of [GPParamater]
        'script_file'  - string <Script tool>
        'validate_file'- string <Script tool>
    """
    ...

def DeleteTool(path) -> None:
    """
    Delete tool. path - <fullpath tbx>/<toolname>
    """
    ...

def CreateTool(
    path: str,
    type: Literal["ScriptTool", "ModelTool"] | None = ...,
    toolset: str | None = ...,
) -> None:
    """
    Create new tool.
    path: full toolbox path with new tool name
    type: 'ScriptTool', 'ModelTool'
    toolset: (optional) tool's category
    """
    ...

def ImportTool(
    path: str, tool_path: str, name: str | None = ..., toolset: str | None = ...
) -> None:
    """
    Import tool.
    path: full toolbox path
    tool_path: full tool path or function '{GUID}' or factory '{GUID}/name'
    name: (optional) new tool name, if None - use original tool name
    toolset: (optional) tool's category, if None - 'root' category
    """
    ...

def AuxFiles(path: str, auxonly: bool = ...):
    """
    returns tuple of toolbox files
    path: full toolbox path
    auxonly: True - returns auxiliary files only, False - all files inside toolbox
    """
    ...

def AuxFileDelete(file_path: str | Iterable[str]) -> None:
    """
    Delete auxiliary file.
    file_path: [string or list,tuple of string] full file path
    """
    ...

def AuxFileCopy(source_path: str, destination_path: str, overwrite: bool = ...) -> ...:
    """
    Copy file from/to toolbox
    source_path: full path
    destination_path: full path
    """
    ...
