"""
This type stub file was generated by pyright.
"""

__all__ = ['Geoprocessor', 'gp', 'env']
def gp_fixarg(arg, string_results, pass_arc_object): # -> str | list[Unknown] | Result | None:
    ...

def gp_fixargs(args, strip_right_nones=..., string_results=..., pass_arc_object=...): # -> list[Unknown]:
    """Adjusts arguments passed into a function to be arcgisscripting-friendly:
       pass in stringified result objects and unwrapped arc objects"""
    ...

def gp_fixkwargs(kwargs, string_results=..., pass_arc_object=...): # -> dict[Unknown, Unknown]:
    """Adjusts arguments passed into a function to be arcgisscripting-friendly:
       pass in stringified result objects and unwrapped arc objects"""
    ...

def passthrough_attr(prop): # -> property:
    "Basic attribute passthrough for a wrapped Arc object -- allows for early binding."
    ...

class Geoprocessor:
    """Represents a geoprocessing object in ArcGIS"""
    def __init__(self) -> None:
        """Geoprocessor()"""
        ...
    
    addToResults = ...
    autoCancelling = ...
    isCancelled = ...
    messageCount = ...
    maxSeverity = ...
    parameterCount = ...
    toolbox = ...
    overwriteOutput = ...
    logHistory = ...
    logLineage = ...
    scriptVersion = ...
    severityLevel = ...
    def getInstallInfo(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function GetInstallInfo"""
        ...
    
    def listInstallations(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListInstallations"""
        ...
    
    def setProgressor(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function SetProgressor"""
        ...
    
    def resetProgressor(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ResetProgressor"""
        ...
    
    def setProgressorLabel(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function SetProgressorLabel"""
        ...
    
    def setProgressorPosition(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function SetProgressorPosition"""
        ...
    
    def resetEnvironments(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ResetEnvironments"""
        ...
    
    def clearEnvironment(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ClearEnvironment"""
        ...
    
    def getMessage(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """getMessage(index)

           Returns a specific message.

             index(Integer):
           The index position of the message."""
        ...
    
    def getSeverity(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """getSeverity(index)

           Returns the severity of a specific message.

             index(Integer):
           The message index position."""
        ...
    
    def getReturnCode(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function GetReturnCode"""
        ...
    
    def getMessages(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """getMessages({severity})

           Returns messages.

             severity{Integer}:
           The type of messages to be returned: 0=message, 1=warning, 2=error. Not specifying a value returns all message types.

            * 0:   informational message

            * 1:   warning message

            * 2:   error message"""
        ...
    
    def addMessage(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function AddMessage"""
        ...
    
    def addIDMessage(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function AddIDMessage"""
        ...
    
    def getIDMessage(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function GetIDMessage"""
        ...
    
    def addError(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function AddError"""
        ...
    
    def addWarning(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function AddWarning"""
        ...
    
    def addReturnMessage(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function AddReturnMessage"""
        ...
    
    def setProduct(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function SetProduct"""
        ...
    
    def checkProduct(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function CheckProduct"""
        ...
    
    def productInfo(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ProductInfo"""
        ...
    
    def checkOutExtension(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function CheckoutExtension"""
        ...
    
    def checkInExtension(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function CheckinExtension"""
        ...
    
    def checkExtension(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function CheckExtension"""
        ...
    
    def listSpatialReferences(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListSpatialReferences"""
        ...
    
    def listTransformations(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListTransformations"""
        ...
    
    def getParameterAsText(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function GetParameterAsText"""
        ...
    
    def setParameterAsText(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function SetParameterAsText"""
        ...
    
    def getParameter(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function GetParameter"""
        ...
    
    def setParameter(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function SetParameter"""
        ...
    
    def copyParameter(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function CopyParameter"""
        ...
    
    def setParameterSymbology(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function SetParameterSymbology"""
        ...
    
    def listFiles(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListFiles"""
        ...
    
    def listTools(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListTools"""
        ...
    
    def listEnvironments(self, *args): # -> list[Unknown]:
        """GP function ListEnvironments"""
        ...
    
    def listToolboxes(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListToolboxes"""
        ...
    
    def addToolbox(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function AddToolbox"""
        ...
    
    def removeToolbox(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function RemoveToolbox"""
        ...
    
    def getSystemEnvironment(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function GetSystemEnvironment"""
        ...
    
    def command(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function Command"""
        ...
    
    def usage(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function Usage"""
        ...
    
    def exists(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function Exists"""
        ...
    
    def listFeatureClasses(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListFeatureClasses"""
        ...
    
    def listDatasets(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListDatasets"""
        ...
    
    def listTables(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListTables"""
        ...
    
    def listRasters(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListRasters"""
        ...
    
    def listWorkspaces(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListWorkspaces"""
        ...
    
    def listVersions(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListVersions"""
        ...
    
    def listFields(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListFields"""
        ...
    
    def listIndexes(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListIndexes"""
        ...
    
    def listPrinterNames(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListPrinterNames"""
        ...
    
    def searchCursor(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function SearchCursor"""
        ...
    
    def updateCursor(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function UpdateCursor"""
        ...
    
    def insertCursor(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function InsertCursor"""
        ...
    
    def describe(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function Describe"""
        ...
    
    def createObject(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function CreateObject"""
        ...
    
    def validateFieldName(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ValidateFieldName"""
        ...
    
    def validateTableName(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ValidateTableName"""
        ...
    
    def parseFieldName(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ParseFieldName"""
        ...
    
    def parseTableName(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ParseTableName"""
        ...
    
    def createScratchName(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function CreateScratchName"""
        ...
    
    def createUniqueName(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function CreateUniqueName"""
        ...
    
    def testSchemaLock(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function TestSchemaLock"""
        ...
    
    def createRandomValueGenerator(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function CreateRandomValueGenerator"""
        ...
    
    def isSynchronous(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function IsSynchronous"""
        ...
    
    def getParameterCount(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function GetParameterCount"""
        ...
    
    def getParameterValue(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function GetParameterValue"""
        ...
    
    def getParameterInfo(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function GetParameterInfo"""
        ...
    
    def addFieldDelimiters(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function AddFieldDelimiters"""
        ...
    
    def listPrinterNames(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GP function ListPrinterNames"""
        ...
    
    def getSystemToolboxesPath(self):
        ...
    
    def getSystemToolboxesPaths(self):
        ...
    
    def getMyToolboxesPath(self):
        ...
    
    def wildcardMatch(self, wildcard, data):
        ...
    
    def alterAliasName(self, table, alias):
        ...
    
    def acceptConnections(self, sde_workspace, accept_connections):
        ...
    
    def logUsageMetering(self, code, task_name, num_objects=..., units=...):
        ...
    
    def createGPSDDraft(self, result, out_sddraft, service_name, server_type=..., connection_file_path=..., copy_data_to_server=..., folder_name=..., summary=..., tags=..., executionType=..., resultMapServer=..., showMessages=..., maximumRecords=..., minInstances=..., maxInstances=..., maxUsageTime=..., maxWaitTime=..., maxIdleTime=..., capabilities=..., constantValues=..., choiceLists=...):
        ...
    
    def fromEsriJson(self, json):
        ...
    
    def listDataStoreItems(self, connection_file, datastore_type):
        ...
    
    def validateDataStoreItem(self, connection_file, datastore_type, connection_name):
        ...
    
    def removeDataStoreItem(self, connection_file, datastore_type, connection_name):
        ...
    
    def addDataStoreItem(self, connection_file, datastore_type, connection_name, server_path, client_path=..., hostname=...):
        ...
    
    def getSigninToken(self):
        ...
    
    def getActivePortalURL(self):
        ...
    
    def listPortalURLs(self):
        ...
    
    def getPortalDescription(self, portal_URL=...):
        ...
    
    def getPortalInfo(self, portal_URL=...):
        ...
    
    def encryptPYT(self, toolbox, password):
        ...
    
    def decryptPYT(self, toolbox, password):
        ...
    
    def __getattr__(self, attr): # -> list[Unknown] | ((*args: Unknown) -> Any) | conversion | int | float | complex | basestring | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    


def gptooldoc(toolname, toolinfo=...): # -> (fn: Unknown) -> Unknown:
    """Decorator for adding extra documentation strings to GP tool functions to
       help autocomplete."""
    ...

def GPEnvironments(geoprocessor): # -> GPEnvironment:
    class GPEnvironment:
        ...
    
    

gp = ...
env = ...
