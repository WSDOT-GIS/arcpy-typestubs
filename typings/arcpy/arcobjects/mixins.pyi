"""
This type stub file was generated by pyright.
"""

from typing import Optional

wildcardmatch = ...
__all__ = [
    "SupportsPropertyMixin",
    "ArrayMixin",
    "CursorMixin",
    "GeometrySpecializationMixin",
    "LayoutElementSpecializationMixin",
    "LayerSymbologySpecializationMixin",
    "RasterClassifiedExclusionMixin",
    "LayerIterationMixin",
    "LayerMixin",
    "TableViewMixin",
    "ImageFileExportMixin",
    "DataFrameMixin",
    "MapDocumentMixin",
    "PointMixin",
    "ResultMixin",
]
pagesize_tuple = ...
bookmark_tuple = ...
webmap_tuple = ...
excludedvalues_re = ...

class SupportsPropertyMixin:
    def supports(self, attribute):  # -> bool:
        """supports(layer_property)

        Not all layers support the same set of properties.  The supports property can be used to test which properties a layer does support.

          layer_property(String):
        The name of a particular layer property that will be tested.

         * BRIGHTNESS:   A raster layer's brightness value

         * CONTRAST:   A raster layer's contrast value

         * DATASETNAME: A layers dataset name the way it appears in the workspace

         * DATASOURCE:   A layer's file path or connection file

         * DEFINITIONQUERY:   A layer's definition query string

         * DESCRIPTION:   A layer's description string

         * LABELCLASSES: A layer's list of label classes

         * LONGNAME:   A layer's path including the group layer(s) it may be nested within

         * NAME:   A layer's name

         * SERVICEPROPERTIES: Connection information for SDE and web service layers

         * SHOWLABELS:   A Boolean indicating if a layer's lables are toggled on or off

         * SYMBOLOGY:   A layer's symbology class

         * SYMBOLOGYTYPE:   A layer's symbology class type

         * TIME:   A layer's time properties

         * TRANSPARENCY:   A layer's transparency value

         * VISIBLE:   A Boolean indicating if a layer is toggled on or off in the TOC

         * WORKSPACEPATH: A layer's workspace or connection file path"""
        ...

class LayerSupportsPropertyMixin(SupportsPropertyMixin):
    def supports(self, layer_property):  # -> bool:
        """Layer.supports(layer_property)

        Used to determine if a particular layer type supports a property on
        the layer object.  Not all layers support the same set of properties;
        the supports property can be used to test if a layer supports that
        property before attempting to set it.

          layer_property(String):
        The name of a particular layer property that will be tested.

         * BRIGHTNESS:   A raster layer's brightness value.

         * CONNECTIONPROPERTIES: A Layer's connection information.

         * CONTRAST:   A raster layer's contrast value

         * CREDITS:   A layer's credit information.

         * DATASOURCE:   A layer's file path or connection file.

         * DEFINITIONQUERY:   A layer's definition query string.

         * LONGNAME:   A layer's path including the group layers it may be
         nested within.

         * MAXTHRESHOLD:   A layer's maximum threshold to display the
         features.

         * MINTHRESHOLD:   A layer's minimum threshold to display the
         features.

         * NAME:   A layer's name.

         * TRANSPARENCY:   A layer's transparency value."""
        ...

class CursorMixin:
    def __iter__(self): ...

class RowMixin: ...

class ArrayMixin:
    "Allows arcgisscripting array objects to behave similarly to Python lists."
    def __len__(self): ...
    def __iter__(self): ...
    def __getitem__(self, key): ...
    def __setitem__(self, index, value): ...
    def __repr__(self): ...
    def __init__(self, items=...) -> None:
        """Array({items})

          items{Object}:
        Items can include a list, a Point object, or another Array object."""
        ...
    def append(self, value):  # -> None:
        """Array.append(value)

        Appends an object to the array in the last position.

          value(Object):
        Either a point or array object can be appended to the array."""
        ...
    def extend(self, values):  # -> None:
        """Array.extend(items)

        Extends the array by appending elements.

          items(Object):
        Extends the array by adding strings, integers, or lists."""
        ...

class GeometrySpecializationMixin:
    "Registry for specializing Geometry instances to Geometry subclasses such as Line, Point, etc."
    __type_mapping__ = ...

    class _passthrough: ...

    @classmethod
    def __from_scripting_arc_object__(cls, obj): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __add__(self, other): ...
    def __or__(self, other): ...
    def __sub__(self, other): ...
    def __xor__(self, other): ...
    def __reduce__(self): ...
    def __iter__(self): ...
    def __getitem__(self, key): ...
    def __len__(self): ...

class ParameterMixin:
    def __init__(
        self,
        name=...,
        displayName=...,
        direction=...,
        datatype=...,
        parameterType=...,
        enabled=...,
        category=...,
        symbology=...,
        multiValue=...,
    ) -> None:
        """Parameter({name}, {displayName}, {direction}, {datatype},
        {parameterType}, {enabled}, {category}, {symbology}, {multiValue})

          name{String}:
        The parameter name.

          displayName{String}:
        The parameter label as shown on the tool's dialog box.

          direction{String}:
        Input/Output direction of the parameter.

          datatype{String}:
        The data type of the parameter.

        For a list of parameter data types, see Geoprocessing data types .

          parameterType{String}:
        Can be Required , Optional, or Derived. Derived means that the user
        of your tool does not enter a value for the parameter. Derived types
        are always output parameters.

          enabled{Boolean}:
        False if the parameter is unavailable.

          category{String}:
        The category  of the parameter.

          symbology{String}:
        The path to a layer file (.lyr) used for drawing the output.

          multiValue{Boolean}:
        True if the parameter is a multivalue parameter."""
        ...

class LayoutElementSpecializationMixin:
    "Registry for specializing LayoutElement instances to Layout subclasses such as PictureElement, Mapsurroundelement, etc."
    __type_mapping__ = ...

    class _passthrough: ...

    @classmethod
    def __from_scripting_arc_object__(cls, obj): ...
    def __init__(self, *args, **kwargs) -> None: ...

class LayerSymbologySpecializationMixin:
    "Registry for specializing LayerSymbology instances to Symbology subclasses such as UniqueValueRenderer, etc."
    __type_mapping__ = ...

    class _passthrough: ...

    @classmethod
    def __from_scripting_arc_object__(cls, obj): ...
    def __init__(self, *args, **kwargs) -> None: ...

class RasterClassifiedExclusionMixin:
    "Data sanitizer to make RasterClassifiedSymbology.excludedValues look like the value in the ArcGIS UI"
    @property
    def excludedValues(self): ...
    @excludedValues.setter
    def excludedValues(self, value): ...

class LayerIterationMixin:
    "Allows an object with a .layers property to be iterated over in a for loop"
    def __iter__(self): ...

class LayerMixin:
    "Represents specialization for map layer objects"
    def __init__(self, lyrfile=...) -> None:
        """Layer(lyr_file_path)

        References a layer ( .lyr ) file stored on disk.

          lyr_file_path(String):
        A string that includes the full path and file name of an existing
        layer ( .lyr ) file."""
        ...
    def __repr__(self): ...
    def __str__(self) -> str: ...
    def save(self):  # -> None:
        """save({name})

        Permanently saves the dataset the raster object references.

          name{String}:
        The name to assign to the raster dataset on disk."""
        ...
    def saveACopy(self, layer_file, version=...):  # -> None:
        """Layer.saveACopy(file_name)

        Saves a layer to a layer file ( .lyrx ).

          file_name(String):
        A string that includes the location and name of the output layer file
        ( .lyrx )."""
        ...
    @property
    def longName(self): ...

class LayerDocumentMixin:
    def __init__(self, lyr, *args) -> None: ...
    def listLayers(self, wildcard=..., dataframe=...): ...
    def listBrokenDataSources(self): ...

class TableViewMixin:
    "Represents specialization for tableview objects"
    def __init__(self, table_view_data_source) -> None:
        """TableView(table_view_data_source)

        More a more complete discussion refer to the TableView Class help.

          table_view_data_source(String):
        A string that includes the full workspace path, including the name of
        the table."""
        ...

class DataFrameMixin: ...

class ImageFileExportMixin:
    "Specialization to expose export to image file methods"
    def exportToAI(
        self,
        out_ai,
        df_export_width=...,
        df_export_height=...,
        resolution=...,
        image_quality=...,
        colorspace=...,
        picture_symbol=...,
        convert_markers=...,
    ): ...
    def exportToBMP(
        self,
        out_bmp,
        df_export_width=...,
        df_export_height=...,
        resolution=...,
        world_file=...,
        color_mode=...,
        rle_compression=...,
        background_mask_color=...,
    ): ...
    def exportToEMF(
        self,
        out_emf,
        df_export_width=...,
        df_export_height=...,
        resolution=...,
        image_quality=...,
        description=...,
        picture_symbol=...,
        convert_markers=...,
    ): ...
    def exportToEPS(
        self,
        out_eps,
        df_export_width=...,
        df_export_height=...,
        resolution=...,
        image_quality=...,
        colorspace=...,
        ps_lang_level=...,
        image_compression=...,
        picture_symbol=...,
        convert_markers=...,
        embed_fonts=...,
        page_layout_image=...,
        page_layout_emulsion=...,
        jpeg_compression_quality=...,
    ): ...
    def exportToGIF(
        self,
        out_gif,
        df_export_width=...,
        df_export_height=...,
        resolution=...,
        world_file=...,
        color_mode=...,
        gif_compression=...,
        background_color=...,
        transparent_color=...,
        interlaced=...,
    ): ...
    def exportToJPEG(
        self,
        out_jpeg,
        df_export_width=...,
        df_export_height=...,
        resolution=...,
        world_file=...,
        color_mode=...,
        jpeg_quality=...,
        background_color=...,
        progressive=...,
    ): ...
    def exportToPDF(
        self,
        out_pdf,
        df_export_width=...,
        df_export_height=...,
        resolution=...,
        image_quality=...,
        colorspace=...,
        compress_vectors=...,
        image_compression=...,
        picture_symbol=...,
        convert_markers=...,
        embed_fonts=...,
        layers_attributes=...,
        georef_info=...,
        jpeg_compression_quality=...,
    ): ...
    def exportToPNG(
        self,
        out_png,
        df_export_width=...,
        df_export_height=...,
        resolution=...,
        world_file=...,
        color_mode=...,
        background_color=...,
        transparent_color=...,
        interlaced=...,
    ): ...
    def exportToSVG(
        self,
        out_svg,
        df_export_width=...,
        df_export_height=...,
        resolution=...,
        image_quality=...,
        compress_document=...,
        picture_symbol=...,
        convert_markers=...,
        embed_fonts=...,
    ): ...
    def exportToTIFF(
        self,
        out_tiff,
        df_export_width=...,
        df_export_height=...,
        resolution=...,
        world_file=...,
        color_mode=...,
        tiff_compression=...,
        geoTIFFTags=...,
    ): ...

class MapDocumentMethods:
    def __init__(self, mxd) -> None:
        """MapDocument(mxd_path)

        Provides a reference to a map document ( .mxd ) stored on disk or to
        the map document that is currently loaded within the ArcMap
        application (using the CURRENT keyword)

          mxd_path(String):
        A string that includes the full path and file name of an existing map
        document ( .mxd ) or a string that contains the keyword CURRENT."""
        ...
    @property
    def dataDrivenPages(self): ...
    @property
    def isDDPEnabled(self): ...
    @property
    def pageSize(self): ...

class MapDocumentMixin(ImageFileExportMixin):
    "Represents a map document"
    def __init__(self, mxd, *args) -> None:
        """MapDocument(mxd_path)

        Provides a reference to a map document ( .mxd ) stored on disk or to
        the map document that is currently loaded within the ArcMap
        application (using the CURRENT keyword)

          mxd_path(String):
        A string that includes the full path and file name of an existing map
        document ( .mxd ) or a string that contains the keyword CURRENT."""
        ...
    def __iter__(self): ...
    def __repr__(self): ...
    def __getitem__(self, search_layer): ...
    @property
    def pageLayout(self): ...
    @property
    def layers(self): ...
    @property
    def layerNames(self): ...
    @property
    def dataFrames(self): ...
    @property
    def dataFrameNames(self): ...
    def listLayoutElements(self, element_type=..., wildcard=...): ...
    def listTextElements(self, wildcard=...): ...
    @property
    def elements(self): ...
    @property
    def textElements(self): ...
    def listDataFrames(self, wildcard=...): ...
    def updateDataSources(self, existing_path, new_path, output_mxd=...): ...
    def updateSymbology(self, layer_name, layer_file, dataframe=...): ...
    def replaceLayer(self, layer_name, layer_file, dataframe=...): ...
    def updateTextElement(self, existing_text, new_text, output_mxd=...): ...
    def layerVisibility(self, layer_name, visibility=..., extent=...): ...
    def containsLayer(self, layer_name): ...
    def listLayers(self, wildcard=..., dataframe=...):  # -> list[Unknown]:
        """listLayers({wildcard})

        Returns a Python list of Layer objects that exist within a map.

          wildcard{String}:
        A wildcard is based on the layer name and is not case sensitive. A
        combination of asterisks (*) and characters can be used to help
        limit the resulting list."""
        ...
    def saveToLayerFile(self, layer, out_file, version=...): ...
    def listBrokenDataSources(self):  # -> list[Unknown]:
        """listBrokenDataSources()

        Returns a Python list of Layer or Table objects that have broken
        connections to their original source data within a map."""
        ...
    def listTableViews(self, wildcard=..., dataframe=...):  # -> list[Unknown]:
        """listTableViews({wildcard})

        Returns a Python list of TableView objects that exist within a map.

          wildcard{String}:
        A combination of asterisks (*) and characters can be used to help
        limit the results."""
        ...
    def listPageNames(self):
        "Gets the map's page names"
        ...
    def printMap(self, *pages): ...
    def convertToMSD(
        self, out_msd, dataframe, msd_anti_aliasing, msd_text_anti_aliasing
    ): ...
    def analyzeForMSD(self): ...

class ArcSDESQLExecuteMixin:
    def __init__(
        self, server=..., instance=..., database=..., user=..., password=...
    ) -> None:
        """ArcSDESQLExecute({server}, {instance}, {database}, {user},
        {password})

          server{String}:
        Name of the server on which the database is installed or a valid
        connection file.

          instance{String}:
        The port number.

          database{String}:
        Name of the database.

          user{String}:
        The user name.

          password{String}:
        The password for the user name."""
        ...

class NetCDFFilePropertiesMixin:
    def __init__(self, netcdffile=...) -> None:
        """NetCDFFileProperties(netcdffile)

          netcdffile(String):
        The input netCDF file."""
        ...

class SpatialReferenceMixin:
    def __init__(self, item=..., vcs=..., text=...) -> None:
        """SpatialReference({item}, {vcs})

          item{String}:
        The spatial reference can be created in three ways: Using the name of
        the coordinate system  sr = arcpy.SpatialReference("Hawaii Albers
        Equal Area Conic") Using a projection file (.prj) sr =
        arcpy.SpatialReference("c:/coordsystems/NAD 1983.prj") Using a
        coordinate system's factory code (or authority code)   # 32145 is the
        code for:
        #  NAD 1983 StatePlane Vermont FIPS 4400 (Meters)
        sr = arcpy.SpatialReference(32145)

        For more information on coordinate system names and factory codes,
        see geographic_coordinate_systems.pdf and
        projected_coordinate_systems.pdf files in the ArcGIS Documentation
        folder.

          vcs{String / long}:
        A vertical coordinate system is associated with the coordinate system.

        For more information, see Using the spatial reference class ."""
        ...
    def __reduce__(self): ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...

class FieldMappingsMixin:
    def __init__(self) -> None:
        """FieldMappings()"""
        ...
    def __iter__(self): ...

class FieldMapMixin:
    def __init__(self) -> None:
        """FieldMap()"""
        ...

class FieldMixin:
    def __init__(self) -> None:
        """Field()"""
        ...

class ExtentMixin:
    def __init__(self, *args, **kwargs) -> None:
        """Extent({XMin}, {YMin}, {XMax}, {YMax}, {ZMin}, {ZMax}, {MMin},
        {MMax}, {spatial_reference})

          XMin{Double}:
        The extent XMin value.

          YMin{Double}:
        The extent YMin value.

          XMax{Double}:
        The extent XMax value.

          YMax{Double}:
        The extent YMax value.

          ZMin{Double}:
        The extent ZMin value. None if no z-value.

          ZMax{Double}:
        The extent ZMax value. None if no z-value.

          MMin{Double}:
        The extent MMin value. None if no m-value.

          MMax{Double}:
        The extent MMax value. None if no m-value.

          spatial_reference{SpatialReference}:
        The spatial reference of the new extent.
        """
        ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...

class ValueTableMixin:
    def __init__(self, columns=...) -> None:
        """ValueTable({columns})

          columns{Integer}:
        The number of columns."""
        ...

class FieldInfoMixin:
    def __init__(self) -> None:
        """FieldInfo()"""
        ...

class FeatureSetMixin:
    def __init__(self, *args, **kwargs) -> None:
        """FeatureSet({table})

          table_path{String}:
        The table to be imported.
          where_clause{String}:
        An SQL expression used to select a subset of records.
          time_filter{String}:
        The time instant or the time extent to query.
          renderer{String}:
        Renderer of the FeatureSet.
          is_renderer{Bool}:
        Specifies the type of the value used with the renderer.
          geojson_geometry_type{String}:
        Specifieds the type of geometry to load from geojson."""
        ...

class RecordSetMixin:
    def __init__(self, *args, **kwargs) -> None:
        """RecordSet({table})

          table_path{String}:
        Table to be loaded into the RecordSet object.
          where_clause{String}:
        An SQL expression used to select a subset of records."""
        ...

class PointMixin:
    "Point creation/manipulation helpers"
    def __repr__(self): ...
    def __init__(
        self,
        X: Optional[float] = None,
        Y: Optional[float] = None,
        Z: Optional[float] = None,
        M: Optional[float] = None,
        ID: Optional[float] = None,
    ) -> None:
        """Point({X}, {Y}, {Z}, {M}, {ID})

          X{Double}:
        The X coordinate of the point.

          Y{Double}:
        The Y coordinate of the point.

          Z{Double}:
        The Z coordinate of the point.

          M{Double}:
        The M value of the point.

          ID{Integer}:
        The shape ID of the point."""
        ...

class ResultMixin:
    def __init__(self, toolname=..., resultID=...) -> None:
        """Result(toolname, resultID)

          toolname(String):
        The name of the executed tool.

          resultID(Integer):
        The job ID."""
        ...
    def __repr__(self): ...
    def __str__(self) -> str: ...
    def __unicode__(self): ...
    def __getitem__(self, key): ...
    def __len__(self): ...
    def __iter__(self): ...
