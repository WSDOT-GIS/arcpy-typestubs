"""
This type stub file was generated by pyright.
"""

from typing import Any
from arcpy import Point, SpatialReference
from arcpy.arcobjects.arcobjects import Geometry

__all__ = [
    "Annotation",
    "Dimension",
    "Multipatch",
    "Multipoint",
    "PointGeometry",
    "Polygon",
    "Polyline",
    "AsShape",
    "FromCoordString",
    "GenerateOptimalCoordinateSystem",
]

class Annotation(Geometry):
    __type_string__ = ...

class Dimension(Geometry):
    __type_string__ = ...

class Multipatch(Geometry):
    __type_string__ = ...

class Multipoint(Geometry):
    """Multipoint objects are ordered collection of points."""

    __type_string__ = ...
    def __init__(self, inputs, spatial_reference=..., has_z=..., has_m=...) -> None: ...
    def __iter__(self): ...
    @property
    def __geo_interface__(self): ...
    def __getSVG__(self, scale_factor=..., fill_color=...):  # -> str:
        """Returns SVG circle elements for MultiPoint geometry.

        Parameters
        ==========
        scale_factor : float
            Multiplication factor for the SVG circle diameters. Default is 1.
        fill_color : str, optional
            Hex string for fill color. Default is to use "#66cc99"
        """
        ...

class PointGeometry(Geometry):
    """A PointGeometry is a shape that has neither length nor area at a given
    scale."""

    __type_string__ = ...
    def __init__(
        self,
        inputs: Point,
        spatial_reference: SpatialReference | None = None,
        has_z: bool = False,
        has_m: bool = False,
    ) -> None: ...
    @property
    def __geo_interface__(self) -> dict[str, str | tuple[Any, Any]]: ...
    def __getSVG__(self, scale_factor: float = 1, fill_color: str = "#66cc99") -> str:
        """Returns SVG circle element for Point geometry.

        Parameters
        ==========
        scale_factor : float
            Multiplication factor for the SVG circle diameter. Default is 1.
        fill_color : str, optional
            Hex string for fill color. Default is to use "#66cc99"
        """
        ...
    def toCoordString(self, notation: ...) -> str:
        """PointGeometry.toCoordString({notation})"""
        ...

class Polygon(Geometry):
    """A Polygon object is a closed shape defined by a connected sequence of x,y
    coordinate pairs."""

    __type_string__ = ...
    def __init__(self, inputs, spatial_reference=..., has_z=..., has_m=...) -> None: ...
    def __iter__(self): ...
    @property
    def __geo_interface__(self): ...
    def __getSVG__(self, scale_factor=..., fill_color=...):  # -> str:
        """Returns SVG path element for Polygon geometry.

        Parameters
        ==========
        scale_factor : float
            Multiplication factor for the SVG stroke-width. Default is 1.
        stroke_color : str, optional
            Hex string for stroke color. Default is "#66cc99"
        """
        ...

class Polyline(Geometry):
    """A Polyline object is a shape defined by one or more paths, in which a
    path is a series of connected segments."""

    __type_string__ = ...
    def __init__(self, inputs, spatial_reference=..., has_z=..., has_m=...) -> None: ...
    def __iter__(self): ...
    @property
    def __geo_interface__(self): ...
    def __getSVG__(
        self, scale_factor=..., stroke_color=...
    ):  # -> LiteralString | Literal['<g />']:
        """Returns SVG polyline element for Polyline geometry.

        Parameters
        ==========
        scale_factor : float
            Multiplication factor for the SVG stroke-width. Default is 1.
        stroke_color : str, optional
            Hex string for stroke color. Default is "#66cc99"
        """
        ...

def AsShape(
    geojson_struct, esri_json=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """AsShape(geojson_struct, {esri_json})

    Converts Esri JSON or GeoJSON to ArcPy geometry or feature set objects.
    GeoJSON is a geospatial data interchange format for encoding geographic
    data
    structures.

      geojson_struct(Dictionary):
    The geojson_struct includes type and coordinates .

    The following strings are  included for type : Point , LineString ,
    Polygon , MultiPoint , and MultiLineString .

      esri_json{Boolean}:
    Sets whether the input JSON is evaluated as Esri JSON or GeoJSON.  If
    True, the input is evaluated as Esri JSON."""
    ...

def FromCoordString(
    coordinate_str, notation
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """FromCoordString(coordinate_str, notation)

    Convert string in various notation formats (aka notations): DD, DDM, DMS, GARS, GEOREF, UTM, USNG, MGRS to a
    PointGeometry.

     coordinate_str(string):
    A string in a certain format that represents the coordinates of a point.

     notation (string):
    A string represents the format of the coordinate_str. The following formats are supported: MGRS, USNG, UTM, UTMNS,
    GEOREF, GARS, DMS, DMS_1, DMS_2, DDM, DDM_1, DDM_2, DD, DD_1, DD_2, DD_NUMERIC.

    This function is going to return an instance of PointGeometry with spatial reference of WGS_1984.
    """
    ...

def GenerateOptimalCoordinateSystem(
    extent, property, custom_name=...
):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """GenerateOptimalCoordinateSystem(extent, property, {custom_name})

    Get a custom coordinate system that matches a specified extent and projection property.

     extent(Extent):
    An arcpy.Extent object that represents the extent of interest. The spatial reference of the extent needs to be in a
    geographic coordinate system.
     property(string):
    A string that represents the projection property of the custom projected coordinate system. The following properties
    are supported: equal_area, conformal, equidistant_one_point, equidistant_meridians, and compromise_world.
    equal_area, equidistant_one_point properties are supported for all extents of interest; conformal,
    equidistant_meridians properties are supported only for large-scale extents; and compromise_world property only
    supports full world extents.
     custom_name(string):
    A string that specifies the name of the custom projected coordinate system. The name will be "Custom_Projection" if
    not specified.

    This function returns an instance of SpatialReference with a custom projected coordinate system matching the
    specified extent and projection property.
    """
    ...
