"""
This type stub file was generated by pyright.
"""

"""Routines for generating python code from a toolbox."""
_detect_encoding = ...
def detect_encoding(readline): # -> tuple[str, Sequence[bytes]] | tuple[Literal['latin-1'], list[Unknown]]:
    ...

def clnstr(s): # -> str:
    ...

HTML_RE = ...
def text_for_node(somenode): # -> LiteralString | str:
    """Returns a safe representation of all the text in a dom.minidom node"""
    ...

def indent_text(astring, indentation=...): # -> LiteralString:
    ...

def indent_unicode_text(astring, indentation=...): # -> LiteralString:
    ...

def safe_name(*names, **kw): # -> None:
    """Creates a python-safe identifier name from a set of provided strings"""
    ...

def arglist_for_tool(tool, long_mode=...):
    """Builds a list of names for arguments in the tool's calling function"""
    ...

def docstring_for_tool(tool): # -> Generator[LiteralString | Unknown | Literal['', '     INPUTS:', '     OUTPUTS:'], Any, None]:
    """Builds the documentation string for an individual tool"""
    ...

def function_name_for_tool(tool, alt_alias=..., use_alt_alias=...): # -> str:
    ...

def code_for_tool(tool, include_add_toolbox=..., alt_alias=..., use_alt_alias=...): # -> Generator[str | LiteralString | Unknown, Any, None]:
    """Builds a code snippet for an individual tool"""
    ...

def docstring_for_toolbox(toolbox): # -> LiteralString | str:
    """Returns a documentation string for a toolbox"""
    ...

def code_for_toolbox(toolbox, include_add_toolbox, relative_to=..., system_toolbox=..., alt_alias=..., use_alt_alias=..., exclude=...): # -> Generator[LiteralString | str | Unknown | Any, Any, None]:
    ...

def generate_toolbox_module(tbxfile, output_file=..., include_gp_addtoolbox=..., relative_paths=..., system_toolbox=..., alt_alias=..., use_alt_alias=..., exclude=...): # -> str | ModuleType:
    """Loads a file toolbox (.tbx) and creates Python code for it.
       if output_file is a string, it will treat it as a filename
       to open."""
    ...

def import_toolbox(tbxfile, module_name=...): # -> str | ModuleType:
    r"""Loads a file toolbox(.tbx) and creates a Python module for it.

       Sample usage:

       arcpy.import_toolbox(r"C:\Data\ArcToolbox\Sample Toolbox\demo.tbx",
                             'toolboxsample')

       This will then generate a python module for demo.tbx and make it
       available for import as arcpy.toolboxes.toolboxsample

       If the second argument is not provided, the function will use the alias
       of the toolbox, if it is set and a valid Python identifier."""
    ...

