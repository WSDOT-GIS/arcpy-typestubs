"""
This type stub file was generated by pyright.
"""

import arcgisscripting

useLocalFunctions = ...

def SetUseLocalFunctions(value): ...
def tryLocalFunction(
    *args,
):  # -> tuple[Raster, Literal[True]] | tuple[None, Literal[False]]:
    """If it returns None, no local function implementation is avail,
    otherwise it returns a Raster object
    """
    ...

class Raster(arcgisscripting.Raster):
    def __init__(self, in_raster, is_multidimensional=...) -> None:
        """Raster(in_raster, {is_multidimensional})\

    Create a Raster object.

    Arguments:
      in_raster -- Name of raster
      is_multidimensional -- Determines whether the input raster is multidimensional or not
    "
    """
        ...
    def __new__(cls, in_raster, is_multidimensional=...): ...
    @property
    def bandNames(self):
        """
        return a list of band names
        """
        ...
    def getRasterBands(self, band_ids_or_names=...):
        """return a list of raster objects, one per band

        Parameters:
          band_ids_or_names(list):a list of band IDs, e.g., [1, 2, 3] or band names ['blue', 'green', 'red']. Default: None, meaning that all bands would be extracted.

        Returns:
          out_raster_lsit(list): a list of raster objects
        """
        ...
    def getBandProperty(self, band_id_or_name, property_name):
        """getBandProperty(self, band_id_or_name, property_name)

        Returns the attribute information of specified band property at band index
          Parameters:
             band_id_or_name(String or integer): the name or (1-based) index of the band
             property_name(String): the name of the band property
          Returns:
             value(Object): value associated with property_name at band_id_or_name.

        """
        ...
    def setBandProperty(self, band_id_or_name, property_name, property_value):
        """setBandProperty(self, band_id_or_name, property_name, property_value)

        Sets the attribute information of specified band property at band index
          Parameters:
             band_id_or_name(String or integer): the name or (1-based) index of the band
             property_name(String): the name of the band property
             property_value(Object): value associated with property_name at band_id_or_name.
          Returns:
             None

        """
        ...
    def exportImage(
        self,
        width=...,
        height=...,
        format=...,
        extent=...,
        spatial_reference=...,
        mosaic_rule=...,
    ):  # -> Image:
        """export an image

        Parameters:
                   width (int): the number that defines the width of the image in pixels.
                   height (int): the number that defines the height of the image in pixels
                   format (string): the format of the exported image. Values: JPGPNG,PNG,PNG8,PNG24,PNG32,JPG,BMP,GIF,TIFF,BIP,BSQ,LERC
                   extent (Extent): the extent (bounding box) of the exported image. If this parameter is not specified, the extent of the raster would be used
                   spatial_reference (SpatialReference): the spatial reference of the exported image. Acceptable values are: None, SpatialReference Data Type, 'ICS', or 'ICS:<object_id>'. If a value is not specified, the spatial reference of the raster dataset is used
                   mosaic_rule (Dict): specifies the mosaic rule when defining how individual images should be mosaicked. If this parameter is not specified, default mosaic rule would be used

        Returns:
               out_image(IPython.display.Image): the bytes of the exported image

        Example:
          image = inRas.exportImage(format = 'JPEG')
        """
        ...
    def getVariableAttributes(self, variable_name):
        """variableAttributes(self, variable_name)

        Returns the attribute information of a variable, e.g., description, unit, etc.
          Parameters:
             variable_name(String): the name of the variable
          Returns:
             out_variable_attributes(Dict) :the attribute information of the given variable.

        """
        ...
    def getDimensionNames(self, variable_name):
        """dimensionNames(self, variable_name)

        Returns a list of the dimension names that the variable contains.
           Parameters:
             variable_name(String): the name of the variable
           Returns:
              out_dimension_names(List) :the dimension names that the given variable contains

        """
        ...
    def getDimensionAttributes(self, variable_name, dimension_name):
        """dimensionAttributes(self, variable_name, dimension_name)

        Returns the attribute information of a dimension within a variable, e.g., min value, max value, unit, etc.
          Parameters:
             variable_name(String): the name of the variable
             dimension_name(String): the name of the dimension
          Returns:
             out_dimension_attributes(Dict):the attribute information of the given dimension within the given variable.

        """
        ...
    def getDimensionValues(self, variable_name, dimension_name):
        """dimensionValues(self, variable_name, dimension_name)

        Returns the dimension values of a dimension within a variable.
          Parameters:
             variable_name(String): the name of the variable
             dimension_name(String): the name of the dimension
          Returns:
             out_dimension_values(List): a list of all dimension values along the given dimension within the given variable.

        """
        ...
    def renameVariable(self, current_variable_name, new_variable_name):
        """renameVariable(self, current_variable_name, new_variable_name)

        Rename the given variable name.
          Parameters:
             current_variable_name(String): the name of the variable to be renamed
             new_variable_name(String): the new variable name
          Returns:
             out_dimension_values(List): a list of all dimension values along the given dimension within the given variable.

        """
        ...
    def renameBand(self, current_band_name_or_index, new_band_name):
        """renameBand(self, current_band_name_or_index, new_band_name)

        Rename a band.
          Parameters:
             current_band_name_or_index(String or integer): the name or index if the band to be renamed
             new_band_name(String): the new band name
          Returns:
             band_names(List): a list of all band names.

        """
        ...
    def removeVariables(self, variable_names):
        """removeVariables(self, variable_names)

        Removes the given variables.
          Parameters:
             variable_names(List): the list of variables to be removed
          Returns:
             out_variable_names(List): a list of all variables.

        """
        ...
    def addDimension(
        self, variable, new_dimension_name, dimension_value, dimension_attributes=...
    ):
        """addDimension(self, variable, new_dimension_name, dimension_value, dimension_attributes = None)

        Adds a new dimension to a given variable.
          Parameters:
             variable(String): variable to which the new dimesnion is to be added
             new_dimension_name(String): name of the new dimesnion to be added
             dimension_value(float): dimension value
             dimension_attributes(dict): optional attributes of the new dimension like Description, Unit etc.
          Returns:
             variables(String): The variable names and their dimensions in the multidimensional raster dataset.

        """
        ...
    def appendSlices(self, mdRaster):
        """appendSlices(self, mdRaster)

        Adds a new dimension to a given variable.
          Parameters:
             mdRaster(raster): multidimensional raster from which the new slices will be read
          Returns:
             variables(String): The variable names and their dimensions in the multidimensional raster dataset.

        """
        ...
    def setVariableAttributes(self, variable_name, variable_attributes):
        """variableAttributes(self, variable_name, variable_attributes)

        Sets the attribute information of a variable, e.g., description, unit, etc.
          Parameters:
             variable_name(String): the name of the variable
             variable_attributes(dict): the attributes to be set for the given variable
          Returns:
             out_variable_attributes(Dict) :the attribute information of the given variable.

        """
        ...
    def read(
        self,
        upper_left_corner=...,
        origin_coordinate=...,
        ncols=...,
        nrows=...,
        nodata_to_value=...,
        cell_size=...,
    ):  # -> ndarray:
        """
        read a numpy array from the calling raster

        :param upper_left_corner: 2-D tuple. a tuple with 2 values representing the number of pixels along x and y
        direction relative to the origin_coordinate. E.g., (2, 0), means that the real origin to extract the array
        is 2 pixels away in x direction from the origin_coordinate

        :param origin_coordinate: arcpy.Point or 2-d tuple (X, Y). The x and y values are in map units.
        If no value is specified, the top left corner of the calling raster, i.e., arcpy.Point(XMin, YMax) will be used

        :param ncols: integer. the number of columns from the real origin in the calling raster to convert to the NumPy array.
        If no value is specified, the number of columns of the calling raster will be used. Default: None

        :param nrows: integer. the number of rows from the real origin in the calling raster to convert to the NumPy array.
        If no value is specified, the number of rows of the calling raster will be used. Default: None

        :param nodata_to_value: numeric. pixels with nodata values in the raster would be assigned with the given value in
        the NumPy array. If no value is specified, the NoData value of the calling raster will be used. Default: None

        :param cell_size: 2-D tuple. a tuple with 2 values shows the x_cell_size and y_cell_size, e.g., cell_size = (2, 2).
        if no value is specified, the original cell size of the calling raster will be used. Otherwise, pixels would be
        resampled to the requested cell_size

        :return: numpy.ndarray. If self is a multidimensional raster, the array has shape (slices, height, width, bands)
        """
        ...
    def write(
        self, array, upper_left_corner=..., origin_coordinate=..., value_to_nodata=...
    ):
        """
        write a numpy array to the calling raster

        :param array: numpy.ndarray. the array must be in the shape of (slices, height, width, bands) for writing a
        multidimensional raster and (height, width bands) for writing a normal raster

        :param upper_left_corner: 2-D tuple.a tuple with 2 values representing the number of pixels along x and y direction
        that shows the position relative to the origin_coordinate. E.g., (2, 0), means that the position from which the
        numpy array will be written into the calling Raster is 2 pixels away in x direction from the origin_coordinate.
        Default value is (0, 0)

        :param origin_coordinate: arcpy.Point or 2-d tuple (X, Y) from where the numpy array will be written
        into the calling Raster. The x- and y-values are in map units. If no value is specified, the top left corner of the
        calling raster, i.e., arcpy.Point(XMin, YMax) will be used

        :param value_to_nodata: numeric. The value in the numpy array assigned to be the NoData values in the calling Raster.
        If no value is specified, the NoData value of the calling Raster will be used. Default None

        :return: None
        """
        ...
    @property
    def hasTranspose(self):
        """
        Identifies if there is a transposed version of data associated with the multidimensional CRF: True if the transpose
        exists, or False if no transpose exists.
        Learn more about Transpose,
        go to https://pro.arcgis.com/en/pro-app/tool-reference/data-management/build-multidimensional-transpose.htm
        """
        ...
    @property
    def RAT(self):
        """
        Return the attribute table as a Diction if the table exists
        """
        ...
    def getColormap(self, variable_name=...):
        """
        get the colormap of the raster or a given variable if the raster is multidimensional.

        :param variable_name (string): optional. Specify it when the raster is a multidimensional.
        :return: dict, return the colormap of the raster or the given variable.
        """
        ...
    def setColormap(self, color_map, variable_name=...):
        """
        set the colormap for the raster or a given variable if the raster is multidimensional

        :param color_map(string, dict): it could be:
                colormap name, e.g., “NDVI”
                customized colormap object, e.g., {'values': [0, 1, 2, 3, 4, 5, 6], 'colors': ['#000000', '#DCFFDF', '#B8FFBE', '#85FF90', '#50FF60','#00AB10', '#006B0A']}
                colorramp name, e.g., “Yellow To Red”
                customized colorramp object, e.g., {"type": "algorithmic", "fromColor": [115, 76, 0, 255],"toColor": [255, 25, 86, 255], "algorithm": "esriHSVAlgorithm"}
        :param variable_name(string): optional. Set the colormap for a given variable when the raster is a multidimensional
        :return: None.
        """
        ...
    def getStatistics(self, variable_name=...):
        """
        Get the statistics of the raster or a given variable if the raster is multidimensional

        :param variable_name(string): optinal. Specify it when the raster is a multidimensional

        :return: dict. Return the statistics of the raster or the given variable.
        """
        ...
    def setStatistics(self, statistics_obj, variable_name=...):
        """
        Set the statistics for the raster or a given variable if the raster is multidimensional

        :param statistics_obj(list): a list of statistics objects , e.g.,
        [{'min': val, 'max': val, 'mean': val, 'standardDeviation': val, 'median': val, 'mode': val, 'count': val}, …]

        :param variable_name(string): optional. Set the statistics for a given variable when the raster is a multidimensional
        :return: None. This is done in place.
        """
        ...
    def getHistograms(self, variable_name=...):
        """
        Get the statistics of the raster or a given variable if the raster is multidimensional

        :param variable_name(string): optional. Specify it when the raster is a multidimensional.

        :return(list of dict): return the statistics of the raster or the given variable.
        """
        ...
    def setHistograms(self, histogram_obj, variable_name=...):
        """
        Set the histogram for the raster or a given variable if the raster is multidimensional.

        :param histogram_obj(list): a list of histogram objects,
        e.g., [{'size': number_of_bins, 'min': min_val, 'max': max_val, 'counts': [pixel_count_at_each_bin, ...]}, ...]

        :param variable_name(string): optional. Set the histogram for a given variable when the raster is a multidimensional

        :return: None. This is done in place.
        """
        ...
    def computeGSD(self, locations, spatial_reference=..., dem=...):
        """
        Computes the ground sampling distance for the given locations
        :param locations (list): a list of list containing x,y coordinates.
            e.g., [[x1,y1], [x2,y2],...]

        :param spatial_reference (SpatialReference): the spatial reference of the input locations

        :param dem: the DEM to be used in the computation of GSD
        :return(list of list): return the ground sampling distances as a list of [x,y] values
        """
        ...
    def getProperty(self, property_name):
        """getProperty(self, property_name)

        Returns the value of the given property.
          Parameters:
             property_name(String): the name of the property
          Returns:
             value(Object): value associated with property_name.

        """
        ...
    def setProperty(self, property_name, property_value):
        """setProperty(self, property_name, property_value)

        Add a customized property to the raster dataset. If the property name exists,
        the existing property value will be overwritten.
          Parameters:
             property_name(String): the name of the property
             property_value(Object): value associated with property_name
          Returns:
             None

        """
        ...
