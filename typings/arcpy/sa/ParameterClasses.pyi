"""
This type stub file was generated by pyright.
"""

from . import CompoundParameter

__all__ = [
    "FuzzyGaussian",
    "FuzzyLarge",
    "FuzzyLinear",
    "FuzzyMSLarge",
    "FuzzyMSSmall",
    "FuzzyNear",
    "FuzzySmall",
    "HfBinary",
    "HfForward",
    "HfInverseLinear",
    "HfLinear",
    "HfTable",
    "KrigingModelOrdinary",
    "KrigingModelUniversal",
    "NbrAnnulus",
    "NbrCircle",
    "NbrIrregular",
    "NbrRectangle",
    "NbrWedge",
    "NbrWeight",
    "RadiusFixed",
    "RadiusVariable",
    "RemapRange",
    "RemapValue",
    "TimeMultipleDays",
    "TimeSpecialDays",
    "TimeWholeYear",
    "TimeWithinDay",
    "TopoBoundary",
    "TopoCliff",
    "TopoCoast",
    "TopoContour",
    "TopoExclusion",
    "TopoLake",
    "TopoPointElevation",
    "TopoSink",
    "TopoStream",
    "TfExponential",
    "TfGaussian",
    "TfLarge",
    "TfLinear",
    "TfLogarithm",
    "TfLogisticDecay",
    "TfLogisticGrowth",
    "TfMSLarge",
    "TfMSSmall",
    "TfNear",
    "TfPower",
    "TfSmall",
    "TfSymmetricLinear",
    "VfBinary",
    "VfCos",
    "VfCosSec",
    "VfInverseLinear",
    "VfLinear",
    "VfSec",
    "VfSecCos",
    "VfSymInverseLinear",
    "VfSymLinear",
    "VfTable",
    "WOTable",
    "WSTable",
]

class _FuzzyMembership(CompoundParameter._CompoundParameter):
    def __init__(self, keyword) -> None: ...

class FuzzyGaussian(_FuzzyMembership):
    """
    FuzzyGaussian(midpoint, spread)

    Spatial Analyst (ArcPy) class that defines a FuzzyGaussian membership object.

    Arguments:
    midpoint -- The user-defined value with a fuzzy membership of 1.
    spread -- Defines the spread of the Gaussian function. The spread generally ranges from 0.01 to 1, with the larger the value results in a steeper distribution around the midpoint.

    Results:
    A FuzzyGaussian membership object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, midpoint=..., spread=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class FuzzyLarge(_FuzzyMembership):
    """
    FuzzyLarge(midpoint, spread)

    Spatial Analyst (ArcPy) class that defines a FuzzyLarge membership object.

    Arguments:
    midpoint -- The user-defined value with a fuzzy membership of 0.5.
    spread -- Defines the spread of the Large function. The spread generally ranges from 1 to 10, with the larger the value results in a steeper distribution from the midpoint.

    Results:
    A FuzzyLarge membership object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, midpoint=..., spread=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class FuzzyLinear(_FuzzyMembership):
    """
    FuzzyLinear(minimum, maximum)

    Spatial Analyst (ArcPy) class that defines a FuzzyLinear membership object.

    Arguments:
    minimum -- The value that will have a membership of 0. If the minimum value is less than the maximum , the linear function will have a positive slope. If the minimum value is greater than the maximum , the linear function will have a negative slope.
    maximum -- The value that will have a membership of 1. If the maximum value is greater than the minimum , the linear function will have a positive slope. If the maximum value is less than the minimum , the linear function will have a negative slope.

    Results:
    A FuzzyLinear membership object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, minimum=..., maximum=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class FuzzyMSLarge(_FuzzyMembership):
    """
    FuzzyMSLarge(meanMultiplier, STDMultiplier)

    Spatial Analyst (ArcPy) class that defines a FuzzyMSLarge membership object.

    Arguments:
    meanMultiplier -- The multiplier for the mean of the input values in the MSLarge function equation.
    STDMultiplier -- The multiplier for the standard deviation of the input values in the MSLarge function equation.

    Results:
    A FuzzyMSLarge membership object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, meanMultiplier=..., STDMultiplier=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class FuzzyMSSmall(_FuzzyMembership):
    """
    FuzzyMSSmall(meanMultiplier, STDMultiplier)

    Spatial Analyst (ArcPy) class that defines a FuzzyMSSmall membership object.

    Arguments:
    meanMultiplier -- The multiplier for the mean of the input values in the MSLarge function equation.
    STDMultiplier -- The multiplier for the standard deviation of the input values in the MSLarge function equation.

    Results:
    A FuzzyMSSmall membership object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, meanMultiplier=..., STDMultiplier=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class FuzzyNear(_FuzzyMembership):
    """
    FuzzyNear(midpoint, spread)

    Spatial Analyst (ArcPy) class that defines a FuzzyNear membership object.

    Arguments:
    midpoint -- The user-defined value with a fuzzy membership of 1.
    spread -- Defines the spread of the Near function. The spread generally ranges from 0.001 to 1 with the larger the value results in a steeper distribution from the midpoint.

    Results:
    A FuzzyNear membership object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, midpoint=..., spread=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class FuzzySmall(_FuzzyMembership):
    """
    FuzzySmall(midpoint, spread)

    Spatial Analyst (ArcPy) class that defines a FuzzySmall membership object.

    Arguments:
    midpoint -- The user-defined value with a fuzzy membership of 0.5.
    spread -- Defines the spread of the Small function. The spread generally ranges from 1 to 10, with the larger the value results in a steeper distribution from the midpoint.

    Results:
    A FuzzySmall membership object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, midpoint=..., spread=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class _HorizontalFactor(CompoundParameter._CompoundParameter):
    def __init__(self, keyword) -> None: ...

class HfBinary(_HorizontalFactor):
    """
    HfBinary({zeroFactor}, {cutAngle})

    Spatial Analyst (ArcPy) class that defines a binary horizontal factor object.

    Arguments:
    zeroFactor -- The zeroFactor will be used to position the y-intercept of the binary function.
    cutAngle -- The cutAngle establishes the HRMA degree threshold beyond which the HFs are set to infinity.

    Results:
    An HfBinary horizontal factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, zeroFactor=..., cutAngle=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class HfForward(_HorizontalFactor):
    """
    HfForward({zeroFactor}, {sideValue})

    Spatial Analyst (ArcPy) class that defines a forward horizontal factor object.

    Arguments:
    zeroFactor -- The zeroFactor will be used to position the y-intercept of the forward function.
    sideValue -- Identifies the HF value that will be assigned for HRMAs that are equal to or less than 45 degrees and less than 90 degrees. In the diagram above, the sideValue is assigned 1.

    Results:
    An HfForward horizontal factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, zeroFactor=..., sideValue=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class HfLinear(_HorizontalFactor):
    """
    HfLinear({zeroFactor}, {cutAngle}, {slope})

    Spatial Analyst (ArcPy) class that defines a linear horizontal factor object.

    Arguments:
    zeroFactor -- The zeroFactor will be used to position the y-intercept of the linear function.
    cutAngle -- The cutAngle establishes the HRMA degree threshold beyond which the HFs are set to infinity.
    slope -- Identifies the slope of the straight line in the HRMA-HF coordinate system. Slope is specified as the rise over the run. For example, a 30-degree slope is 1/30, specified as 0.03333 (rise/run: 1 HF on the y axis / 30 degrees on the x axis).

    Results:
    An HfLinear horizontal factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, zeroFactor=..., cutAngle=..., slope=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class HfInverseLinear(_HorizontalFactor):
    """
    HfInverseLinear({zeroFactor}, {cutAngle}, {slope})

    Spatial Analyst (ArcPy) class that defines an inverse linear horizontal factor object.

    Arguments:
    zeroFactor -- The zeroFactor will be used to position the y-intercept of the inverse linear function.
    cutAngle -- The cutAngle establishes the HRMA degree threshold beyond which the HFs are set to infinity.
    slope -- Identifies the slope of the straight line in the HRMA-HF coordinate system. Slope is specified as the rise over the run. For example, a 30-degree slope is 1/30, specified as 0.03333 (rise/run: 1 HF on the y axis / 30 degrees on the x axis).

    Results:
    An HfBinary horizontal factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, zeroFactor=..., cutAngle=..., slope=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class HfTable(_HorizontalFactor):
    """
    HfTable(inTable)

    Spatial Analyst (ArcPy) class that defines a table horizontal factor object.

    Arguments:
    inTable -- The inTable is an ASCII file with two columns on each line. The first column identifies the HRMA in degrees, and the second, the HF. Each line specifies a point. Two consecutive points produce a line segment in the HRMA-HF coordinate system. The angles must be input in ascending order. The HF factor for any HRMA angle less than the first (lowest) input value or larger than the last (largest) input value will be set to infinity. An infinite HF is represented by -1 in the ASCII file.

    Results:
    An HfTable horizontal factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inTable) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class _KrigingModel(CompoundParameter._CompoundParameter):
    def __init__(self) -> None: ...

class KrigingModelOrdinary(_KrigingModel):
    """
    KrigingModelOrdinary({semivariogramType}, {lagSize}, {majorRange}, {partialSill}, {nugget})

    Spatial Analyst (ArcPy) class that defines a KrigingModelOrdinary object.

    Arguments:
    semivariogramType -- Semivariogram model to be used.
    lagSize -- The lag size to be used in model creation. The default is the output raster cell size.
    majorRange -- Represents a distance beyond which there is little or no correlation.
    partialSill -- The difference between the nugget and the sill.
    nugget -- Represents the error and variation at spatial scales too fine to detect. The nugget effect is seen as a discontinuity at the origin.

    Results:
    A KrigingModelOrdinary object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        semivariogramType=...,
        lagSize=...,
        majorRange=...,
        partialSill=...,
        nugget=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class KrigingModelUniversal(_KrigingModel):
    """
    KrigingModelUniversal({semivariogramType}, {lagSize}, {majorRange}, {partialSill}, {nugget})

    Spatial Analyst (ArcPy) class that defines a KrigingModelUniversal object.

    Arguments:
    semivariogramType -- Semivariogram model to be used.
    lagSize -- The lag size to be used in model creation. The default is the output raster cell size.
    majorRange -- Represents a distance beyond which there is little or no correlation.
    partialSill -- The difference between the nugget and the sill.
    nugget -- Represents the error and variation at spatial scales too fine to detect. The nugget effect is seen as a discontinuity at the origin.

    Results:
    A KrigingModelUniversal object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        semivariogramType=...,
        lagSize=...,
        majorRange=...,
        partialSill=...,
        nugget=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class _Neighborhood(CompoundParameter._CompoundParameter):
    """Base class for specialized neighborhood classes."""

    def __init__(self, keyword) -> None:
        """Creates a _Neighborhood object.

        keyword -- Keyword associated with the neighborhood.
        """
        ...

class NbrAnnulus(_Neighborhood):
    """
    NbrAnnulus({innerRadius}, {outerRadius}, {units})

    Spatial Analyst (ArcPy) class that defines an annulus or donut-shaped neighborhood object.

    Arguments:
    innerRadius -- The inner radius of an annulus neighborhood.
    outerRadius -- The outer radius of an annulus neighborhood.
    units -- Defines the units of the neighborhood.

    Results:
    A NbrAnnulus neighborhood object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, innerRadius=..., outerRadius=..., units=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class NbrCircle(_Neighborhood):
    """
    NbrCircle({radius}, {units})

    Spatial Analyst (ArcPy) class that defines a circular-shaped neighborhood object.

    Arguments:
    radius -- The radius of the circle neighborhood.
    units -- Defines the units of the neighborhood.

    Results:
    A NbrCircle neighborhood object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, radius=..., units=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class NbrIrregular(_Neighborhood):
    """
    NbrIrregular(inKernelFile)

    Spatial Analyst (ArcPy) class that defines an irregular neighborhood object.

    Arguments:
    inKernelFile -- The irregular inKernelFile is an ASCII text file that defines the shape of an irregular neighborhood. A value of 0 for a cell position indicates that the cell is not a member of the neighborhood, and a nonzero number at a corresponding cell's position indicates that the cell value be included as a member of the neighborhood.

    Results:
    A NbrIrregular neighborhood object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inKernelFile) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class NbrRectangle(_Neighborhood):
    """
    NbrRectangle({width}, {height}, {units})

    Spatial Analyst (ArcPy) class that defines a rectangular-shaped neighborhood object.

    Arguments:
    width -- The width of the rectangle neighborhood.
    height -- The height of the rectangle neighborhood.
    units -- Defines the units of the neighborhood.

    Results:
    A NbrRectangle neighborhood object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, width=..., height=..., units=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class NbrWedge(_Neighborhood):
    """
    NbrWedge({radius}, {startAngle}, {endAngle}, {units})

    Spatial Analyst (ArcPy) class that defines a wedge or pie-shaped neighborhood object.

    Arguments:
    radius -- The radius is the distance from the corner of the wedge to the outer limit of the wedge. The radius is an integer or floating-point value.
    startAngle -- The startAngle is an integer or floating-point value from 0 to 360.
    endAngle -- The endAngle is an integer or floating-point value from 0 to 360.
    units -- Defines the units of the neighborhood.

    Results:
    A NbrWedge neighborhood object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, radius=..., startAngle=..., endAngle=..., units=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class NbrWeight(_Neighborhood):
    """
    NbrWeight(inKernelFile)

    Spatial Analyst (ArcPy) class that defines a weighted table neighborhood object.

    Arguments:
    inKernelFile -- The inKernelFile is an ASCII text file that defines the shape of the neighborhood and the weight of each cell in that neighborhood. A value of 0 for a cell position indicates that the cell is not a member of the neighborhood, and a number at a corresponding cell's position indicates that the cell value be included as a member of the neighborhood. The nonzero value will also serve as the weight to multiply the corresponding cell value.

    Results:
    A NbrWeight neighborhood object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inKernelFile) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class _Radius(CompoundParameter._CompoundParameter):
    def __init__(self, keyword) -> None: ...

class RadiusVariable(_Radius):
    """
    RadiusVariable({numberOfPoints}, {maxDistance})

    Spatial Analyst (ArcPy) class that defines a variable radius object.

    Arguments:
    numberOfPoints -- The numberOfPoints is an integer value specifying the number of nearest input samplepoints to be used to perform the interpolation.
    maxDistance -- The maxDistance specifies the distance, in map units, by which to limit the search for the nearest input sample points. The default value is the length of the extent's diagonal.

    Results:
    A RadiusVariable object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, numberOfPoints=..., maxDistance=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class RadiusFixed(_Radius):
    """
    RadiusFixed({distance}, {minNumberOfPoints})

    Spatial Analyst (ArcPy) class that defines a fixed radius object.

    Arguments:
    distance -- The distance specifies the distance as a radius within which input sample points will be used to perform the interpolation. The value of the radius is expressed in map units. The default radius is five times the cell size of the output raster.
    minNumberOfPoints -- The minNumberOfPoints is an integer defining the minimum number of points to be used to perform theinterpolation.

    Results:
    A RadiusFixed object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, distance=..., minNumberOfPoints=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class _Remap(CompoundParameter._CompoundParameter):
    def __init__(self, remapTable) -> None: ...
    def __repr__(self): ...
    def __str__(self) -> str: ...

class RemapRange(_Remap):
    """
    RemapRange([[startValue, endValue, newValue],...])

    Spatial Analyst (ArcPy) class that defines a remap by range table object.

    Arguments:
    remapTable -- The remap table to be used to remap the old values (specified by ranges) to new values.

    Results:
    A remap by range table object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, remapTable) -> None: ...

class RemapValue(_Remap):
    """
    RemapValue([[oldValue, newValue],...])

    Spatial Analyst (ArcPy) class that defines a remap by value table object.

    Arguments:
    remapTable -- The remap table to be used to remap the old values to new values.

    Results:
    A remap by value table object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, remapTable) -> None: ...

class _Time(CompoundParameter._CompoundParameter):
    def __init__(self, keyword) -> None: ...

class TimeWithinDay(_Time):
    """
    TimeWithinDay({day}, {startTime}, {endTime})

    Spatial Analyst (ArcPy) class that defines a time within day object.

    Arguments:
    day -- The day is a Julian day value from 1 to 365.
    startTime -- The startTime is the first hour to be used in the analysis. The hour is represented with a number from 0 to 24.
    endTime -- The endTime is the last hour to be used in the analysis. The hour is represented with a number from 0 to 24.

    Results:
    A time within day object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, day=..., startTime=..., endTime=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TimeSpecialDays(_Time):
    """
    TimeSpecialDays()

    Spatial Analyst (ArcPy) class that defines a time special days object.

    Results:
    """

    __esri_toolinfo__ = ...
    def __init__(self) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TimeMultipleDays(_Time):
    """
    TimeMultipleDays({year}, {startDay}, {endDay})

    Spatial Analyst (ArcPy) class that defines a time multiple days object.

    Arguments:
    year -- The Julian year.
    startDay -- The startDay is the first Julian day in the analysis.
    endDay -- The endDay is the last Julian day in the analysis.

    Results:
    A time multiple days object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, year=..., startDay=..., endDay=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TimeWholeYear(_Time):
    """
    TimeWholeYear({year})

    Spatial Analyst (ArcPy) class that defines a time whole year object.

    Arguments:
    year -- The Julian year.

    Results:
    A time whole year object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, year=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class _TopoInput: ...

class _TopoInputNestedList(_TopoInput, CompoundParameter._CompoundParameter):
    def __init__(self, keyword, inFeatures) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class _TopoInputList(_TopoInput, CompoundParameter._CompoundParameter):
    def __init__(self, keyword, inFeatures) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TopoPointElevation(_TopoInputNestedList):
    """
    TopoPointElevation([[inFeature, {field}],...])

    Spatial Analyst (ArcPy) class that defines a topo point elevation object.

    Arguments:
    inFeatures -- The input point feature datasets.

    Results:
    A topo point elevation object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inFeatures) -> None: ...

class TopoContour(_TopoInputNestedList):
    """
    TopoContour([[inFeature, {field}],...])

    Spatial Analyst (ArcPy) class that defines a topo contour object.

    Arguments:
    inFeatures -- The input line feature datasets.

    Results:
    A topo contour object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inFeatures) -> None: ...

class TopoStream(_TopoInputList):
    """
    TopoStream([inFeature,...])

    Spatial Analyst (ArcPy) class that defines a topo stream object.

    Arguments:
    inFeatures -- The input feature datasets.

    Results:
    A topo stream object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inFeatures) -> None: ...

class TopoSink(_TopoInputNestedList):
    """
    TopoSink([[inFeature, {field}],...])

    Spatial Analyst (ArcPy) class that defines a topo sink object.

    Arguments:
    inFeatures -- The input point feature datasets.

    Results:
    A topo sink object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inFeatures) -> None: ...

class TopoBoundary(_TopoInputList):
    """
    TopoBoundary([inFeature,...])

    Spatial Analyst (ArcPy) class that defines a topo boundary object.

    Arguments:
    inFeatures -- The input feature datasets.

    Results:
    A topo boundary object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inFeatures) -> None: ...

class TopoLake(_TopoInputList):
    """
    TopoLake([inFeature,...])

    Spatial Analyst (ArcPy) class that defines a topo lake object.

    Arguments:
    inFeatures -- The input feature datasets.

    Results:
    A topo lake object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inFeatures) -> None: ...

class TopoCliff(_TopoInputList):
    """
    TopoCliff([inFeature,...])

    Spatial Analyst (ArcPy) class that defines a topo cliff object.

    Arguments:
    inFeatures -- The input feature datasets.

    Results:
    A topo cliff object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inFeatures) -> None: ...

class TopoCoast(_TopoInputList):
    """
    TopoCoast([inFeature,...])

    Spatial Analyst (ArcPy) class that defines a topo coast object.

    Arguments:
    inFeatures -- The input feature datasets.

    Results:
    A topo boundary object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inFeatures) -> None: ...

class TopoExclusion(_TopoInputList):
    """
    TopoExclusion([inFeature,...])

    Spatial Analyst (ArcPy) class that defines a topo exclusion object.

    Arguments:
    inFeatures -- The input feature datasets.

    Results:
    A topo exclusion object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inFeatures) -> None: ...

class _TransformationFunction(CompoundParameter._CompoundParameter):
    def __init__(self, keyword) -> None: ...

class TfGaussian(_TransformationFunction):
    """
    TfGaussian({midpoint}, {spread}, {lowerThreshold}, {valueBelowThreshold}, {upperThreshold}, {valueAboveThreshold})

    Spatial Analyst (ArcPy) class that defines a Gaussian function object.

    Arguments:
    midpoint -- The user-defined value that defines the highest point of the Gaussian transformation function curve. If the midpoint value is between the lower and upper threshold, input cell locations with the corresponding value will receive the toScale evaluation scale value on the output raster.
    spread -- Defines the spread of the Gaussian functionthat controls the steepness of the decay of the function from themidpoint. The spread generally ranges from 0.01 to 1; thelarger the value results in a steeper decay from themidpoint.
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function Gaussian object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        midpoint=...,
        spread=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TfNear(_TransformationFunction):
    """
    TfNear({midpoint}, {spread}, {lowerThreshold}, {valueBelowThreshold}, {upperThreshold}, {valueAboveThreshold})

    Spatial Analyst (ArcPy) class that defines a Near function object.

    Arguments:
    midpoint -- The user-defined value that defines the highest point of the Near transformation function curve. If the midpoint value is between the lower and upper threshold, input cell locations with the corresponding value will receive the toScale evaluation scale value on the output raster.
    spread -- Defines the spread of the Near functionthat controls the steepness of the decay of the function from themidpoint. The spread generally ranges from 0.001 to 1;the larger the value results in a steeper decay from themidpoint.
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function Near object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        midpoint=...,
        spread=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TfLarge(_TransformationFunction):
    """
    TfLarge({midpoint}, {spread}, {lowerThreshold}, {valueBelowThreshold}, {upperThreshold}, {valueAboveThreshold})

    Spatial Analyst (ArcPy) class that defines a Large function object.

    Arguments:
    midpoint -- Defines the transition point of the transformation function where the curve becomes more convex for the values lesser than the midpoint and more concave for values greater than the midpoint. Shifting the midpoint less than the midpoint of the input data alters the transition point, resulting in an increase in the range of the larger values above the midpoint being more preferred, with the preference increasing at a faster rate.
    spread -- Defines the spread of the Large transformationfunction that controls how quickly the function values increase and decrease from themidpoint. The spread generally ranges from 1 to 10; thelarger the value results in a steeper distribution around themidpoint.
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function Large object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        midpoint=...,
        spread=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TfSmall(_TransformationFunction):
    """
    TfSmall({midpoint}, {spread}, {lowerThreshold}, {valueBelowThreshold}, {upperThreshold}, {valueAboveThreshold})

    Spatial Analyst (ArcPy) class that defines a Small function object.

    Arguments:
    midpoint -- Defines the transition point of the transformation function where the curve becomes more concave for the values lesser than the midpoint and more convex for values greater than the midpoint. Shifting the midpoint greater than the midpoint of the input data alters the transition point, resulting in an increase in the range of the smaller values below the midpoint being more preferred, with the preference increasing at a slower rate.
    spread -- Defines the spread of the Small transformation functionthat controlshow quickly the function values increase and decrease from themidpoint. The spread generally ranges from 1 to 10; thelarger the value results in a steeper distribution aroundthe midpoint.
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function Small object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        midpoint=...,
        spread=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TfMSLarge(_TransformationFunction):
    """
    TfMSLarge(meanMultiplier, STDMultiplier, lowerThreshold, valueBelowThreshold, upperThreshold, valueAboveThreshold)

    Spatial Analyst (ArcPy) class that defines an MSLarge function object.

    Arguments:
    meanMultiplier -- The multiplier for the mean of the input values in the MSLarge function equation.
    STDMultiplier -- The multiplier for the standard deviation of the input values in the MSLarge function equation.
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function MSLarge object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        meanMultiplier=...,
        STDMultiplier=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TfMSSmall(_TransformationFunction):
    """
    TfMSSmall({meanMultiplier}, {STDMultiplier}, {lowerThreshold}, {valueBelowThreshold}, {upperThreshold}, {valueAboveThreshold})

    Spatial Analyst (ArcPy) class that defines an MSSmall function object.

    Arguments:
    meanMultiplier -- The multiplier for the mean of the input values in the MSSmall function equation.
    STDMultiplier -- The multiplier for the standard deviation of the input values in the MSSmall function equation.
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function MSSmall object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        meanMultiplier=...,
        STDMultiplier=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TfLinear(_TransformationFunction):
    """
    TfLinear({minimum}, {maximum}, {lowerThreshold}, {valueBelowThreshold}, {upperThreshold}, {valueAboveThreshold})

    Spatial Analyst (ArcPy) class that defines a Linear function object.

    Arguments:
    minimum -- One of two points the Linear transformation function must pass through. If the minimum value is less than the maximum , the linear function will have a positive slope. If the minimum value is greater than the maximum , the linear function will have a negative slope.
    maximum -- One of two points the Linear function mustpass through. If the maximum value is greater than the minimum , the linear function will have a positive slope. If the maximum value is less than the minimum , the linear function will have a negative slope.
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function Linear object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        minimum=...,
        maximum=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TfSymmetricLinear(_TransformationFunction):
    """
    TfSymmetricLinear({minimum}, {maximum}, {lowerThreshold}, {valueBelowThreshold}, {upperThreshold}, {valueAboveThreshold})

    Spatial Analyst (ArcPy) class that defines a SymmetricLinear function object.

    Arguments:
    minimum -- The starting point for the Symmetric Lineartransformation function. The point of inflection to mirror thefunction is determined by the midpoint of the minimum and maximum. Ifthe minimum value is less than the maximum , the linear function will have a positive slope. If the minimum value is greater than the maximum , the linear function will be a negative slope.
    maximum -- The ending point for the Symmetric Lineartransformation function. The point of inflection to mirror thefunction is determined by the midpoint of the minimum and maximum. If the minimum value is less than the maximum , the linear function will have a positive slope. If the minimum value is greater than the maximum , the linear function will have a negative slope.
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function SymmetricLinear object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        minimum=...,
        maximum=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TfExponential(_TransformationFunction):
    """
    TfExponential({shift}, {baseFactor}, {lowerThreshold}, {valueBelowThreshold}, {upperThreshold}, {valueAboveThreshold})

    Spatial Analyst (ArcPy) class that defines an Exponential function object.

    Arguments:
    shift -- Defines how much each input value is to be shifted. The shift value is subtracted from the input value. The transformation function is applied to the shifted input value to determine the function value.
    baseFactor -- A multiplier that controls how steep the Exponential function increases. The larger the multiplier, the steeper the curve will be at the larger input values. There is a close connection between the base factor and the base of the Exponential function. A baseFactor of 1 equals the natural exponential (e x ).
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function Exponential object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        shift=...,
        baseFactor=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TfLogarithm(_TransformationFunction):
    """
    TfLogarithm({shift}, {factor}, {lowerThreshold}, {valueBelowThreshold}, {upperThreshold}, {valueAboveThreshold})

    Spatial Analyst (ArcPy) class that defines a Logarithm function object.

    Arguments:
    shift -- Defines how much each input value is to be shifted. The shift value is subtracted from the input value. The transformation function is applied to the shifted input value to determine the function value.
    factor -- The multiplier to apply to the shifted input values. The factor alters the rise of the Logarithm curve.
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function Logarithm object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        shift=...,
        factor=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TfPower(_TransformationFunction):
    """
    TfPower({shift}, {exponent}, {lowerThreshold}, {valueBelowThreshold}, {upperThreshold}, {valueAboveThreshold})

    Spatial Analyst (ArcPy) class that defines a Power function object.

    Arguments:
    shift -- Defines how much each input value is to be shifted. The shift value is subtracted from the input value. The transformation function is applied to the shifted input value to determine the function value.
    exponent -- The power to raise the input values in the transformation function. As the exponent increases, the preference for the larger input values increases more rapidly.
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function Power object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        shift=...,
        exponent=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TfLogisticGrowth(_TransformationFunction):
    """
    TfLogisticGrowth({minimum}, {maximum}, {yInterceptPercent}, {lowerThreshold}, {valueBelowThreshold}, {upperThreshold}, {valueAboveThreshold})

    Spatial Analyst (ArcPy) class that defines a LogisticGrowth function object.

    Arguments:
    minimum -- The starting point for the LogisticGrowth transformation function.
    maximum -- The ending point for the LogisticGrowth transformation function.
    yInterceptPercent -- Determines the value range in the increasing portion of the logistic growth curve. The smaller the yInterceptPercent , the smaller the input value range will be in the growth section of the curve; however, the preference for the values will increase at a faster rate. A smaller yInterceptPercent results in a more pronounced logistic growth curve.
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function LogisticGrowth object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        minimum=...,
        maximum=...,
        yInterceptPercent=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class TfLogisticDecay(_TransformationFunction):
    """
    TfLogisticDecay({minimum}, {maximum}, {yInterceptPercent}, {lowerThreshold}, {valueBelowThreshold}, {upperThreshold}, {valueAboveThreshold})

    Spatial Analyst (ArcPy) class that defines a LogisticDecay function object.

    Arguments:
    minimum -- The starting point for the LogisticDecay transformation function.
    maximum -- The ending point for the LogisticDecay transformation function.
    yInterceptPercent -- Determines the value range in the decreasing portion of the logistic decay curve. The greater the yInterceptPercent , the smaller the input value range will be in the decay section of the curve; however, the preference for the values will decrease at a faster rate. A larger yInterceptPercent results in a more pronounced logistic decay curve.
    lowerThreshold -- Defines the starting value at which to begin applying the specified transformation function. The input value corresponding to the lowerThreshold is assigned to the fromScale evaluation scale value on the output raster. Input values below the lowerThreshold are assigned to the valueBelowThreshold and are not considered in the function value range.
    valueBelowThreshold -- A user-specified value to assign output cell locations with input values below the lowerThreshold.
    upperThreshold -- Defines the ending value at which to stop applying the specified transformation function. The input value corresponding to the upperThreshold is assigned to the toScale evaluation scale value on the output raster. Input values above the upperThreshold are assigned to the valueAboveThreshold and are not considered in the function value range.
    valueAboveThreshold -- A user-specified value to assign output cell locations with input values above the upperThreshold.

    Results:
    A Transformation function LogisticDecay object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self,
        minimum=...,
        maximum=...,
        yInterceptPercent=...,
        lowerThreshold=...,
        valueBelowThreshold=...,
        upperThreshold=...,
        valueAboveThreshold=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class _VerticalFactor(CompoundParameter._CompoundParameter):
    def __init__(self, keyword) -> None: ...

class VfBinary(_VerticalFactor):
    """
    VfBinary({zeroFactor}, {lowCutAngle}, {highCutAngle})

    Spatial Analyst (ArcPy) class that defines a binary vertical factor object.

    Arguments:
    zeroFactor -- The zeroFactor will be used to position the y-intercept of the binary function.
    lowCutAngle -- The VRMA degree defining the lower threshold, below which (less than) the VFs are set to infinity.
    highCutAngle -- The VRMA degree defining the upper threshold, beyond which (larger than) the VFs are set to infinity.

    Results:
    A VfBinary vertical factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, zeroFactor=..., lowCutAngle=..., highCutAngle=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class VfLinear(_VerticalFactor):
    """
    VfLinear({zeroFactor}, {lowCutAngle}, {highCutAngle}, {slope})

    Spatial Analyst (ArcPy) class that defines a linear vertical factor object.

    Arguments:
    zeroFactor -- The zeroFactor will be used to position the y-intercept of the linear function.
    lowCutAngle -- The VRMA degree defining the lower threshold, below which (less than) the VFs are set to infinity.
    highCutAngle -- The VRMA degree defining the upper threshold, beyond which (larger than) the VFs are set to infinity.
    slope -- Identifies the slope of the straight line in the VRMA-VF coordinate system. Slope is specified as the rise/run. For example, a 30-degree slope is 1/30, specified as 0.03333 (rise/run: 1 VF on the y axis / 30 degrees on the x axis); a 90-degree slope as 0.011111.

    Results:
    A VfLinear vertical factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self, zeroFactor=..., lowCutAngle=..., highCutAngle=..., slope=...
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class VfInverseLinear(_VerticalFactor):
    """
    VfInverseLinear({zeroFactor}, {lowCutAngle}, {highCutAngle}, {slope})

    Spatial Analyst (ArcPy) class that defines an inverse linear vertical factor object.

    Arguments:
    zeroFactor -- The zeroFactor will be used to position the y-intercept of the inverse linear function.
    lowCutAngle -- The VRMA degree defining the lower threshold, below which (less than) the VFs are set to infinity.
    highCutAngle -- The VRMA degree defining the upper threshold, beyond which (larger than) the VFs are set to infinity.
    slope -- Identifies the slope of the straight line in the VRMA-VF coordinate system. Slope is specified as the rise/run. For example, a 30-degree slope is 1/30, specified as 0.03333 (rise/run: 1 VF on the y axis / 30 degrees on the x axis); a -45-degree slope as -0.02222.

    Results:
    A VfInverseLinear vertical factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self, zeroFactor=..., lowCutAngle=..., highCutAngle=..., slope=...
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class VfSymLinear(_VerticalFactor):
    """
    VfSymLinear({zeroFactor}, {lowCutAngle}, {highCutAngle}, {slope})

    Spatial Analyst (ArcPy) class that defines a symmetrical linear vertical factor object.

    Arguments:
    zeroFactor -- The zeroFactor will be used to position the y-intercept of the symmetric linear function.
    lowCutAngle -- The VRMA degree defining the lower threshold, below which (less than) the VFs are set to infinity.
    highCutAngle -- The VRMA degree defining the upper threshold, beyond which (larger than) the VFs are set to infinity.
    slope -- Identifies the slope of the straight line in the VRMA-VF coordinate system. Slope is specified as the rise/run. For example, a 30-degree slope is 1/30, specified as 0.03333 (rise/run: 1 VF on the y axis / 30 degrees on the x axis); a 90-degree slope as 0.011111.

    Results:
    A VfSymLinear vertical factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self, zeroFactor=..., lowCutAngle=..., highCutAngle=..., slope=...
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class VfSymInverseLinear(_VerticalFactor):
    """
    VfSymInverseLinear({zeroFactor}, {lowCutAngle}, {highCutAngle}, {slope})

    Spatial Analyst (ArcPy) class that defines a symmetrical inverse linear vertical factor object.

    Arguments:
    zeroFactor -- The zeroFactor will be used to position the y-intercept of the symmetric inverse linear function.
    lowCutAngle -- The VRMA degree defining the lower threshold, below which (less than) the VFs are set to infinity.
    highCutAngle -- The VRMA degree defining the upper threshold, beyond which (larger than) the VFs are set to infinity.
    slope -- Identifies the slope of the straight line in the VRMA-VF coordinate system. Slope is specified as the rise/run. For example, a 30-degree slope is 1/30, specified as 0.03333 (rise/run: 1 VF on the y axis / 30 degrees on the x axis); a -45-degree slope as -0.022222.

    Results:
    A VfSymInverseLinear vertical factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self, zeroFactor=..., lowCutAngle=..., highCutAngle=..., slope=...
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class VfCos(_VerticalFactor):
    """
    VfCos({lowCutAngle}, highCutAngle, {cosPower})

    Spatial Analyst (ArcPy) class that defines a cosine vertical factor object.

    Arguments:
    lowCutAngle -- The VRMA degree defining the lower threshold, below which (less than) the VFs are set to infinity.
    highCutAngle -- The VRMA degree defining the upper threshold, beyond which (larger than) the VFs are set to infinity.
    cosPower -- The power to which the values in the cosine VRMA function will be raised. The VF is determined by:

    Results:
    A VfCos vertical factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, lowCutAngle=..., highCutAngle=..., cosPower=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class VfSec(_VerticalFactor):
    """
    VfSec({lowCutAngle}, {highCutAngle}, {secPower})

    Spatial Analyst (ArcPy) class that defines a secant vertical factor object.

    Arguments:
    lowCutAngle -- The VRMA degree defining the lower threshold, below which (less than) the VFs are set to infinity.
    highCutAngle -- The VRMA degree defining the upper threshold, beyond which (larger than) the VFs are set to infinity.
    secPower -- The power to which the values in the secant VRMA function will be raised. The VF is determined by:

    Results:
    A VfSec vertical factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, lowCutAngle=..., highCutAngle=..., secPower=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class VfCosSec(_VerticalFactor):
    """
    VfCosSec({lowCutAngle}, {highCutAngle}, {cosPower}, {secPower})

    Spatial Analyst (ArcPy) class that defines a cosine secant vertical factor object.

    Arguments:
    lowCutAngle -- The VRMA degree defining the lower threshold, below which (less than) the VFs are set to infinity.
    highCutAngle -- The VRMA degree defining the upper threshold, beyond which (larger than) the VFs are set to infinity.
    cosPower -- The power to which the values in the cosine VRMA function will be raised. The VF is determined by:
    secPower -- The power to which the values in the secant VRMA function will be raised. The VF is determined by:

    Results:
    A VfCosSec vertical factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self, lowCutAngle=..., highCutAngle=..., cosPower=..., secPower=...
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class VfSecCos(_VerticalFactor):
    """
    VfSecCos({lowCutAngle}, {highCutAngle}, {secPower}, {cosPower})

    Spatial Analyst (ArcPy) class that defines a secant cosine vertical factor object.

    Arguments:
    lowCutAngle -- The VRMA degree defining the lower threshold, below which (less than) the VFs are set to infinity
    highCutAngle -- The VRMA degree defining the upper threshold, beyond which (larger than) the VFs are set to infinity.
    secPower -- The power to which the values in the secant VRMA function will be raised. The VF is determined by:
    cosPower -- The power to which the values in the cosine VRMA function will be raised. The VF is determined by:

    Results:
    A VfSecCos vertical factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(
        self, lowCutAngle=..., highCutAngle=..., secPower=..., cosPower=...
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class VfTable(_VerticalFactor):
    """
    VfTable(inTable)

    Spatial Analyst (ArcPy) class that defines a table vertical factor object.

    Arguments:
    inTable -- The inTable is an ASCII file with two columns on each line. The first column identifies the VRMA in degrees, and the second, the VF. Each line specifies a point. Two consecutive points produce a line segment in the VRMA-VF coordinate system.

    Results:
    A VfSymLinear vertical factor object is returned.
    """

    __esri_toolinfo__ = ...
    def __init__(self, inTable) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class WOTable(CompoundParameter._CompoundParameter):
    """
    WOTable([[inRaster, influence, field, Remap],...], [from, to, by])

    Spatial Analyst (ArcPy) class that defines a weighted overlay table object.

    Arguments:
    weightedOverlayTable -- The table specifying the input rasters, their influence, the field to use, and the remap table identifying what the old values should be remapped to.
    evaluationScale -- The range and interval for the new values in which to remap the old values. The parameter is required for both the dialog box and scripting but it has no effect in scripting.

    Results:
    A WOTable object is returned defining the input rasters, the field identifying the input values, the remap of their values, the weight of each raster, and the evaluation scale.
    """

    __esri_toolinfo__ = ...
    def __init__(self, weightedOverlayTable, evaluationScale) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

class WSTable(CompoundParameter._CompoundParameter):
    """
    WSTable([[inRaster, field, weight],...])

    Spatial Analyst (ArcPy) class that defines a weighted sum table object.

    Arguments:
    weightedSumTable -- The table specifying the input rasters, the fields to use for the values for each raster, and the weight by which to multiply each raster.

    Results:
    A WSTable object is returned defining the input rasters, the field that will be used for each raster, and the weight each raster will have.
    """

    __esri_toolinfo__ = ...
    def __init__(self, weightedSumTable) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...
