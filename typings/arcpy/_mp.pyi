"""
This type stub file was generated by pyright.
"""

from arcpy.arcobjects._base import _ObjectWithoutInitCall
from arcpy.utils import ArgAdaptor
from arcpy import metadata

class constants(ArgAdaptor):
    """Represents the constants that can be passed into various ExportTo* mp functions"""

    __args__ = ...

class ArcGISProject(_ObjectWithoutInitCall):
    """ArcGISProject(aprx_path)

    Provides a reference to an ArcGIS project (.aprx) stored on disk or to the project
    currently loaded within the ArcGIS Pro application using the CURRENT keyword.

    aprx_path(String):
    A string that includes the full system path and file name of an existing
    ArcGIS project ( .aprx ) or a string that contains the CURRENT keyword."""

    dateSaved = ...
    defaultGeodatabase = ...
    defaultToolbox = ...
    filePath = ...
    activeMap = ...
    homeFolder = ...
    documentVersion = ...
    activeView = ...
    metadata = ...
    isReadOnly = ...
    folderConnections = ...
    def importDocument(
        self, document_path, include_layout=..., reuse_existing_maps=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.importDocument(document_path, {include_layout},
        {reuse_existing_maps})


        Imports map (.mxd), globe (.3dd), and scene (.sxd) documents into an
        ArcGIS Pro project.  It can also be used to import the contents of  map
        files (.mapx), layout files (.pagx), and report files (.rptx).


        document_path(String):
        A string that includes the system path and name of a document (.mxd,
        .3dd, or .sxd) or a map file (.mapx), layout file ( .pagx), or report
        file (.rptx).


        include_layout{Boolean}:
        A Boolean parameter indicating whether the layout from a map document
        (.mxd) is imported.  If  set to True, the layout and all data frames are
        imported. If set to False, only the data frames are imported.  This
        parameter is ignored for other file types. The default value is True.


        reuse_existing_maps{Boolean}:
        A Boolean parameter to prevent the creation of duplicate maps in the
        project. If reuse_existing_maps is set to True, it checks the project
        for the maps referenced in the imported file and only copies maps that
        don't already exist in the project.  There may be cases in which maps
        have the same name in different imported sources, so you may want to set
        this value to  False. The default value is False.
        """
        ...
    def listBrokenDataSources(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.listBrokenDataSources()


        Returns a Python list of Layer and/or Table objects that have broken
        connections to their original source data for all maps in a project.
        """
        ...
    def listLayouts(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.listLayouts({wildcard})


        Returns a Python list of Layout objects in an ArcGIS project (.aprx).


        wildcard{String}:
        A wildcard is based on the layout name and is not case sensitive.  A
        combination of asterisks (*) and characters can be used to help
        limit the resulting list. The default value is None.
        """
        ...
    def listReports(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.listReports({wildcard})


        Returns a Python list of Report objects in an ArcGIS project (.aprx).


        wildcard{String}:
        A wildcard is based on the report name and is not case sensitive.  A
        combination of asterisks (*) and characters can be used to help
        limit the resulting list. The default value is None.
        """
        ...
    def listMaps(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.listMaps({wildcard})


        Returns a Python list of Map objects in an ArcGIS project (.aprx).


        wildcard{String}:
        A wildcard is based on the map name and is not case sensitive. A
        combination of asterisks (*) and characters can be used to help
        limit the resulting list. The default value is None.
        """
        ...
    def save(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.save()


        Saves changes to an ArcGISProject  (.aprx).
        """
        ...
    def saveACopy(
        self, file_name
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.saveACopy(file_name)


        Saves an ArcGISProject (.aprx) to a new file path or name.


        file_name(String):
        A string used to save an ArcGISProject (.aprx) to a new file path or
        file name.
        """
        ...
    def updateConnectionProperties(
        self,
        current_connection_info,
        new_connection_info,
        auto_update_joins_and_relates=...,
        validate=...,
        ignore_case=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.updateConnectionProperties(current_connection_info,
        new_connection_info, {auto_update_joins_and_relates}, {validate},
        {ignore_case})


        The updateConnectionProperties method replaces connection properties
        using a dictionary or a path to a workspace.


        current_connection_info(String):
        A string that represents the workspace path or a Python dictionary that
        contains connection properties to the source you want to update. If an
        empty string or None is used in current_connection_info, all connection
        properties will be replaced with the new_workspace_info, depending on
        the value of the validate parameter.


        new_connection_info(String):
        A string that represents the workspace path or a Python dictionary that
        contains connection properties with the new source information.


        auto_update_joins_and_relates{Boolean}:
        If  set to True, the updateConnectionProperties method will also update
        the connections for associated joins or relates. The default value is
        True.


        validate{Boolean}:
        If  set to True, the connection properties will only be updated if the
        new_connection_info value is a valid connection.  If it is not valid,
        the connection will not be replaced.   If set to False, the method will
        set all connections to match the new_connection_info value, regardless
        of a valid match.  In this case, if a match does not exist, the data
        sources would be broken. The default value is True.


        ignore_case{Boolean}:
        Determines whether searches will be case sensitive. By default, queries
        are case sensitive. To perform queries that are not case sensitive, set
        ignore_case to True. The default value is False.
        """
        ...
    def listColorRamps(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.listColorRamps({wildcard})


        The listColorRamps method references color ramps  available in a
        project.


        wildcard{String}:
        A wildcard is based on the color ramp name as it appears in the
        application.  A combination of asterisks (*) and characters can be used
        to help
        limit the resulting list. The default value is None.
        """
        ...
    @constants.maskargs
    def closeViews(
        self, view_type=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.closeViews({view_type})


        Close view panes that are currently open in  ArcGIS Pro.


        view_type{String}:
        A constant that determines the type of views to be closed in the
        application. The default value is MAPS_AND_LAYOUTS.

        * MAPS: Close all open map view panes.

        * LAYOUTS: Close all open layout view panes.

        * REPORTS: Close all open report view panes.

        * MAPS_AND_LAYOUTS: Close all open layout and map view panes.
        """
        ...
    @constants.maskargs
    def createMap(
        self, name=..., map_type=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.createMap({name}, {map_type})


        This method creates a map that will automatically get added to the
        Catalog pane.


        name{String}:
        A string that represents the name of the new map.  If a name is not
        provided, the default name will follow the sequencing nomenclature, for
        example, Map, Map1, Map2.


        map_type{String}:
        The type of map to be created and are defined by the keywords below. The
        default value is Map.

        * MAP: A new map

        * GLOBE: A new global scene

        * SCENE: A new local scene
        """
        ...
    def copyItem(
        self, project_item, new_name=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.copyItem(project_item, {new_name})


        Creates a copy of an existing layout, map, or report project item.


        project_item(Object):
        An object that represents a supported project item to be copied.


        new_name{String}:
        A string that represents the name of the new project item.  If a name is
        not provided, the default name will follow the sequencing nomenclature,
        for example, Map, Map1, Map2.
        """
        ...
    def deleteItem(
        self, project_item
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.deleteItem(project_item)


        Deletes a layout, map, or report project item.


        project_item(Object):
        An object that represents a supported project item to be deleted.
        """
        ...
    def updateFolderConnections(
        self, folder_connections, validate=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ArcGISProject.updateFolderConnections(folder_connections, {validate})


        Replaces project folder connections using a list of dictionaries that
        describe each connection.


        folder_connections(List):
        A list of Python dictionaries that each contain connection properties to
        an individual folder.  The dictionary keys are defined below.

        * alias: An alternative label for a folder connection. If left as an
        empty string, the alias will match the connectionString value.

        * connectionString: A local or UNC path to a system folder.

        * isHomeFolder: The default home folder.  One and only one folder must
        be set to True. Note: It is possible for administrators to set the home
        folder to be read-only.  If that is that case, this setting will be
        ignored.


        validate{Boolean}:
        If  set to True, the folder will only be added if the  connectionString
        is a valid path.  If it is not valid, the folder will not be added and
        the function will return the dictionary as an invalid folder.   If set
        to False, the method will set all connections to match the
        connectionString, regardless of a valid match.  In this case, if a match
        does not exist, the folder will be added but will appear as broken. The
        default value is True.
        """
        ...
    def __init__(self, aprx_path) -> None:
        """ArcGISProject(aprx_path)


        Provides a reference to an ArcGIS project ( .aprx ) stored on disk or to the
        project currently loaded within the ArcGIS Pro application using the
        CURRENT keyword.


        aprx_path(String):
        A string that includes the full system path and file name of an existing ArcGIS
        project (.aprx) or a string that contains the CURRENT keyword.
        """
        ...

class Bookmark(_ObjectWithoutInitCall):
    """Provides access to bookmark methods and properties."""

    hasThumbnail = ...
    map = ...
    name = ...
    def updateThumbnail(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Bookmark.updateThumbnail()


        Updates a bookmark's thumbnail image.
        """
        ...
    def __eq__(self, other) -> bool: ...

class Camera(_ObjectWithoutInitCall):
    """The Camera object provides access to  2D and 3D viewer properties that
    control the display in a MapFrame ."""

    heading = ...
    mode = ...
    pitch = ...
    roll = ...
    scale = ...
    X = ...
    Y = ...
    Z = ...
    def getExtent(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Camera.getExtent()


        Returns an Extent object for a 2D map frame.
        """
        ...
    def setExtent(
        self, extent
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Camera.setExtent(extent)


        Sets the Extent for a map frame in a layout.


        extent(Extent):
        A geoprocessing Extent object.
        """
        ...
    def __eq__(self, other) -> bool: ...

class GraphicElement(_ObjectWithoutInitCall):
    """The GraphicElement object provides access to properties that enables its
    repositioning on the page layout, as well as methods that allow for
    duplicating and deleting existing graphic elements."""

    elementHeight = ...
    elementPositionX = ...
    elementPositionY = ...
    elementRotation = ...
    elementWidth = ...
    isGroup = ...
    locked = ...
    name = ...
    type = ...
    visible = ...
    def clone(
        self, suffix=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GraphicElement.clone({suffix})


        Provides a mechanism to clone an existing graphic element on a page
        layout.


        suffix{String}:
        An optional string that is used to tag each newly created graphic
        element.  The new element will get the same element name as the parent
        graphic plus the suffix value along with  a numeric sequencer.  For
        example, if the parent element name is Line and the suffix value is
        _copy, the newly cloned elements are named  Line_copy, Line_copy_1,
        Line_copy_2, and so on.  If a suffix is not provided, the results
        resemble Line_1, Line_2, Line_3, and so on.
        """
        ...
    def delete(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """GraphicElement.delete()


        Provides a mechanism to delete an existing graphic element on a page
        layout.
        """
        ...
    def __eq__(self, other) -> bool: ...

class LabelClass(_ObjectWithoutInitCall):
    """Provides access to a layer's label class properties."""

    expression = ...
    name = ...
    SQLQuery = ...
    visible = ...

class Layer(_ObjectWithoutInitCall):
    """Layer(lyr_file_path)


    References a layer file stored on disk.


    lyr_file_path(String):
    A string that includes the full path and file name of an existing layer
    file.  The supported extensions are .lyr or .lyrx.
    """

    brightness = ...
    contrast = ...
    connectionProperties = ...
    dataSource = ...
    definitionQuery = ...
    is3DLayer = ...
    isBroken = ...
    isFeatureLayer = ...
    isSceneLayer = ...
    isBasemapLayer = ...
    isGroupLayer = ...
    isNetworkAnalystLayer = ...
    isNetworkDatasetLayer = ...
    isRasterLayer = ...
    isWebLayer = ...
    isTimeEnabled = ...
    longName = ...
    maxThreshold = ...
    minThreshold = ...
    name = ...
    showLabels = ...
    transparency = ...
    visible = ...
    symbology = ...
    metadata = ...
    time = ...
    URI = ...
    @constants.maskargs
    def extrusion(
        self, extrusion_type=..., expression=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.extrusion({extrusion_type}, {expression})


        Extrudes 2D features in a layer to display 3D symbology.


        extrusion_type{String}:
        A string that specifies the extrusion method.  The default value is NONE
        which turns off layer extrusion. The default value is NONE.

        * ABSOLUTE_HEIGHT: The feature is extruded to the specified z-value, as
        a flat top, regardless of the z-values of the feature.

        * MIN_HEIGHT: Adds extrusion height to the minimum z-value of the
        feature, and the feature is extruded to a flat top at that value.

        * NONE: Features are not extruded.

        * BASE_HEIGHT: A z-value is calculated for each vertex of the feature's
        base, and the feature is extruded to the various z-values creating a
        multifaceted top.

        * MAX_HEIGHT: Adds extrusion height to the minimum z-value of the
        feature, and the feature is extruded to a flat top at that value.


        expression{String}:
        A string that defines the extrusion expression, which provides an
        absolute extrusion height  for each feature. The default value is None.
        """
        ...
    def getSelectionSet(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.getSelectionSet()


        Returns a layer's selection as a Python set of object IDs.
        """
        ...
    def listLabelClasses(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.listLabelClasses({wildcard})


        Returns a Python list of LabelClass objects in a layer.


        wildcard{String}:
        A wildcard is based on the label class name and is not case sensitive. A
        combination of asterisks (*) and characters can be used to help
        limit the resulting list. The default value is None.
        """
        ...
    def listLayers(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.listLayers({wildcard})


        Returns a Python list of Layer objects from  a group layer or composite
        layer.


        wildcard{String}:
        A wildcard is based on the layer name and is not case sensitive. A
        combination of asterisks (*) and characters can be used to help
        limit the resulting list. The default value is None.
        """
        ...
    def listTables(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.listTables({wildcard})


        Returns a Python list of Table objects that exist within a group layer.


        wildcard{String}:
        A wildcard is based on the table name and is not case sensitive.  A
        combination of asterisks (*) and characters can be used to limit the
        resulting list. The default value is None.
        """
        ...
    def listDefinitionQueries(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.listDefinitionQueries({wildcard})


        Returns a Python list of definition queries associated with a layer.


        wildcard{String}:
        A wildcard is based on the query name and is not case sensitive.  A
        combination of asterisks (*) and characters can be used to limit the
        resulting list. The default value is None.
        """
        ...
    def saveACopy(
        self, file_name
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.saveACopy(file_name)


        Saves a layer to a layer file (.lyrx).


        file_name(String):
        A string that includes the location and name of the output layer file
        (.lyrx).
        """
        ...
    @constants.maskargs
    def setSelectionSet(
        self, oidList=..., method=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.setSelectionSet({oidList}, {method})


        Sets a layer's selection using a Python list of Object IDs.


        oidList{Integer}:
        A Python list of Object IDs to use along with the appropriate selection
        method. The default value is None.


        method{String}:
        A string that specifies which selection method to use. The default value
        is NEW.

        * UNION: Selects all the features in both the current selection and
        those in the oidList.

        * NEW: Creates a new feature selection from the oidList.

        * DIFFERENCE: Selects the features that are not in the current selection
        but are in the oidList.

        * SYMDIFFERENCE: Selects the features that are in the current selection
        or the oidList but not both.

        * INTERSECT: Selects the features that are in the current selection and
        the oidList.
        """
        ...
    def supports(
        self, layer_property
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.supports(layer_property)


        Used to determine if a particular layer type supports a property on the
        layer object.  Not all layers support the same set of properties; the
        supports property can be used to test if a layer supports that property
        before attempting to set it.


        layer_property(String):
        The name of a particular layer property that will be tested. The default
        value is name.

        * SYMBOLOGY: A layer that symbology can be accessed.

        * NAME: A layer's name.

        * BRIGHTNESS: A raster layer's brightness value.

        * SHOWLABELS: A layer that can display labels.

        * MINTHRESHOLD: A layer's minimum threshold to display the features.

        * LONGNAME: A layer's path including the group layers it may be nested
        within.

        * URI: A layer's Universal Resource Identifier.

        * MAXTHRESHOLD: A layer's maximum threshold to display the features.

        * VISIBLE: A layer's visibility state.

        * DEFINITIONQUERY: A layer's definition query string.

        * DATASOURCE: A layer's file path or connection file.

        * TRANSPARENCY: A layer's transparency value.

        * TIME: A layer's time properties.

        * CONNECTIONPROPERTIES: A Layer's connection information.

        * CONTRAST: A raster layer's contrast value

        * METADATA: A layer that can persist metadata.
        """
        ...
    def updateConnectionProperties(
        self,
        current_connection_info,
        new_connection_info,
        auto_update_joins_and_relates=...,
        validate=...,
        ignore_case=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.updateConnectionProperties(current_connection_info,
        new_connection_info, {auto_update_joins_and_relates}, {validate},
        {ignore_case})


        The updateConnectionProperties method replaces connection properties
        using a dictionary or a path to a workspace.


        current_connection_info(String):
        A string that represents the workspace path or a Python dictionary that
        contains connection properties to the source you want to update. If an
        empty string or None is used in current_connection_info, all connection
        properties will be replaced with the new_workspace_info, depending on
        the value of the validate parameter.


        new_connection_info(String):
        A string that represents the workspace path or a Python dictionary that
        contains connection properties with the new source information.


        auto_update_joins_and_relates{Boolean}:
        If  set to True, the updateConnectionProperties method will also update
        the connections for associated joins or relates. The default value is
        True.


        validate{Boolean}:
        If  set to True, the connection properties will only be updated if the
        new_connection_info value is a valid connection.  If it is not valid,
        the connection will not be replaced.   If set to False, the method will
        set all connections to match the new_connection_info value, regardless
        of a valid match.  In this case, if a match does not exist, the data
        sources would be broken. The default value is True.


        ignore_case{Boolean}:
        Determines whether searches will be case sensitive. By default, queries
        are case sensitive. To perform queries that are not case sensitive, set
        ignore_case to True. The default value is False.
        """
        ...
    def updateDefinitionQueries(
        self, definitionQueries
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.updateDefinitionQueries(definitionQueries)


        Updates a layer's collection of definition queries.


        definitionQueries(List):
        Updates a list of dictionaries that represent the properties of each
        definition query.
        """
        ...
    def updateLayerFromJSON(
        self, json_data
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.updateLayerFromJSON(json_data)


        Updates a Layer from a JSON string.


        json_data(String):
        The layer definition in JavaScript Object Notation (JSON) format. See
        the ExportWebMap JSON specification for more information. ArcGIS Maps
        SDK for JavaScript and ArcGIS Web AppBuilder allow you to get this JSON
        string from the web app. The layer definition is a subset of the
        webmap_json used in the ConvertWebMapToArcGISProject function. You don't
        need to create the web map JSON; the APIs take care of it for you.
        However, you need to extract the layer definition from the full
        webmap_json.
        """
        ...
    def enableTime(
        self,
        startTimeField=...,
        endTimeField=...,
        autoCalculateTimeRange=...,
        timeDimension=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.enableTime({startTimeField}, {endTimeField},
        {autoCalculateTimeRange}, {timeDimension})


        Enables time on a layer if it has time information.


        startTimeField{String}:
        The name of the field containing the start time values. If each feature
        has a single time field, specify that field name in the startTimeField
        and leave endTimeField blank. If each feature has a start and end time
        field, specify both the  startTimeField and endTimeField. The default
        value is None.


        endTimeField{String}:
        The name of the field containing the end time values. Not all layers use
        an end time field. If each feature has a single time field, specify that
        field name in the startTimeField and leave endTimeField blank. If each
        feature has a start and end time field, specify both the  startTimeField
        and endTimeField. The default value is None.


        autoCalculateTimeRange{Boolean}:
        If  set to True, the start and end time attribute information is used to
        calculate the layer's time extent. The default value is True.


        timeDimension{String}:
        The name of the dimension containing time values when using netCDF data.
        The default value is None.
        """
        ...
    def disableTime(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.disableTime()


        Disables time on a layer.
        """
        ...
    def __str__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    @constants.maskargs
    def getDefinition(self, cim_version):  # -> Any | list[Unknown] | None:
        """Layer.getDefinition(cim_version)


        Gets a layer's CIM definition.


        cim_version(String):
        A string that represents the major version of the CIM.
        """
        ...
    @constants.maskargs
    def setDefinition(
        self, definition_object
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layer.setDefinition(definition_object)


        Sets a layer's CIM definition.


        definition_object(Object):
        A modified CIM definition object originally retrieved using
        getDefinition.
        """
        ...

class LayerFile(_ObjectWithoutInitCall):
    """LayerFile(layer_file_path)


    References a layer file (.lyr or .lyrx) stored on disk.


    layer_file_path(String):
    A string that includes the full system path and file name of an existing
    layer file.
    """

    filePath = ...
    version = ...
    metadata = ...
    @constants.maskargs
    def addLayer(
        self, add_layer_or_layerfile, add_position=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LayerFile.addLayer(add_layer_or_layerfile, {add_position})


        Provides the ability to add a Layer or LayerFile to a layer file
        (.lyrx) using basic placement options.


        add_layer_or_layerfile(Layer):
        A reference to a Layer or LayerFile object representing the layer or
        layers  to be added.


        add_position{String}:
        A constant that determines the placement of the added layer or layers
        in a layer file. The default value is AUTO_ARRANGE.

        * TOP: Places the layer or layers at the top of the TOC layer stack.

        * AUTO_ARRANGE: Automatically places the layer or layers based on its
        layer weight rules and geometry.

        * BOTTOM: Places the layer or layers at the bottom of the TOC layer
        stack.
        """
        ...
    @constants.maskargs
    def addLayerToGroup(
        self, target_group_layer, add_layer_or_layerfile, add_position=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LayerFile.addLayerToGroup(target_group_layer, add_layer_or_layerfile,
        {add_position})


        Provides the ability to add a Layer or the contents of a LayerFile to an
        existing group layer in a layer file (.lyrx) using basic placement
        options.


        target_group_layer(Layer):
        A reference to an existing group Layer object.


        add_layer_or_layerfile(Layer):
        A reference to a Layer or LayerFile object representing the layer or
        layers  to be added.


        add_position{String}:
        A constant that determines the placement of the added layer or layers in
        the target_group_layer. The default value is AUTO_ARRANGE.

        * TOP: Places the layer at the top of the TOC layer stack.

        * AUTO_ARRANGE: Automatically places the layer based on its layer weight
        rules and geometry.

        * BOTTOM: Places the layer at the bottom of the TOC layer stack.
        """
        ...
    @constants.maskargs
    def insertLayer(
        self, reference_layer, insert_layer_or_layerfile, insert_position=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LayerFile.insertLayer(reference_layer, insert_layer_or_layerfile,
        {insert_position})


        Provides the ability to add a Layer or LayerFile into a layer file
        (.lyrx) by specifying  a location.


        reference_layer(Layer):
        A Layer object representing an existing layer that determines the
        location where the new layer will be inserted.


        insert_layer_or_layerfile(Layer):
        A reference to a Layer or LayerFile object representing the layer or
        layers  to be added.


        insert_position{String}:
        A constant that determines the placement of the added layer or layers
        relative to the reference_layer. The default value is BEFORE.

        * AFTER: Inserts the new layer after or below the reference layer.

        * BEFORE: Inserts the new layer before or above the reference layer.
        """
        ...
    def listBrokenDataSources(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LayerFile.listBrokenDataSources()


        Returns a Python list of Layer objects in a layer file that have broken
        connections to their original source data.
        """
        ...
    def listLayers(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LayerFile.listLayers({wildcard})


        Returns a Python list of Layers in a layer file.


        wildcard{String}:
        A wildcard is based on the layer name and is not case sensitive. A
        combination of asterisks (*) and characters can be used to help
        limit the resulting list. The default value is None.
        """
        ...
    def listTables(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LayerFile.listTables({wildcard})


        Returns a Python list of Table objects that exist within a LayerFile.


        wildcard{String}:
        A wildcard is based on the table name and is not case sensitive.  A
        combination of asterisks (*) and characters can be used to limit the
        resulting list. The default value is None.
        """
        ...
    @constants.maskargs
    def moveLayer(
        self, reference_layer, move_layer, insert_position=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LayerFile.moveLayer(reference_layer, move_layer, {insert_position})


        Provides the ability to move a layer or group layer in a layer file to
        a specific location in the layer stack.


        reference_layer(Layer):
        A Layer  object representing an existing layer that determines the
        location where the new layer will be moved.


        move_layer(Layer):
        A reference to a Layer object representing the layer to be moved.


        insert_position{String}:
        A constant that determines the placement of the moved layer relative to
        the reference layer. The default value is BEFORE.

        * AFTER: Moves the  layer after or below the reference layer.

        * BEFORE: Moves the layer before or above the reference layer.
        """
        ...
    def removeLayer(
        self, remove_layer
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LayerFile.removeLayer(remove_layer)


        Provides the ability to remove a layer from a layer file.


        remove_layer(Layer):
        A reference to a Layer object representing the layer to be removed.
        """
        ...
    def save(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LayerFile.save()


        Saves an existing layer file reference to a .lyrx file, even if the file
        referenced was a .lyr file.
        """
        ...
    def saveACopy(
        self, file_name
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LayerFile.saveACopy(file_name)


        Saves a LayerFile  to a new path or file name.


        file_name(String):
        A string used to save a LayerFile to a new path or file name.  You can
        only save to .lyrx files.
        """
        ...
    def updateConnectionProperties(
        self,
        current_connection_info,
        new_connection_info,
        auto_update_joins_and_relates=...,
        validate=...,
        ignore_case=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LayerFile.updateConnectionProperties(current_connection_info,
        new_connection_info, {auto_update_joins_and_relates}, {validate},
        {ignore_case})


        The updateConnectionProperties method replaces connection properties
        using a dictionary or a path to a workspace.


        current_connection_info(String):
        A string that represents the workspace path or a Python dictionary that
        contains connection properties to the source you want to update. If an
        empty string or None is used in current_connection_info, all connection
        properties will be replaced with the new_workspace_info, depending on
        the value of the validate parameter.


        new_connection_info(String):
        A string that represents the workspace path or a Python dictionary that
        contains connection properties with the new source information.


        auto_update_joins_and_relates{Boolean}:
        If  set to True, the updateConnectionProperties method will also update
        the connections for associated joins or relates. The default value is
        True.


        validate{Boolean}:
        If  set to True, the connection properties will only be updated if the
        new_connection_info value is a valid connection.  If it is not valid,
        the connection will not be replaced.   If set to False, the method will
        set all connections to match the new_connection_info value, regardless
        of a valid match.  In this case, if a match does not exist, the data
        sources would be broken. The default value is True.


        ignore_case{Boolean}:
        Determines whether searches will be case sensitive. By default, queries
        are case sensitive. To perform queries that are not case sensitive, set
        ignore_case to True. The default value is False.
        """
        ...
    def __init__(self, layer_file_path) -> None:
        """LayerFile(layer_file_path)


        References a layer file ( .lyr or .lyrx ) stored on disk.


        layer_file_path(String):
        A string that includes the full system path and file name of an existing layer file.
        """
        ...
    def __str__(self) -> str: ...

class LayerTime(_ObjectWithoutInitCall):
    """LayerTime provides access to layer time level information in a Layer Object."""

    startTimeField = ...
    endTimeField = ...
    timeFormat = ...
    startTime = ...
    endTime = ...
    timeZone = ...
    daylightSavings = ...
    timeOffset = ...
    timeOffsetUnits = ...
    timeStepInterval = ...
    timeStepIntervalUnits = ...
    timeDimension = ...

class Layout(_ObjectWithoutInitCall):
    """The Layout object references a single-page layout in an ArcGIS Pro
    project ( .aprx ).  It provides access to common properties like page
    size and a number of different export methods."""

    name = ...
    pageHeight = ...
    pageUnits = ...
    pageWidth = ...
    mapSeries = ...
    metadata = ...
    URI = ...
    @constants.maskargs
    def exportToAIX(
        self,
        out_aix,
        resolution=...,
        image_quality=...,
        compress_vector_graphics=...,
        image_compression=...,
        jpeg_compression_quality=...,
        embed_fonts=...,
        embed_color_profile=...,
        clip_to_elements=...,
        keep_layout_background=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.exportToAIX(out_aix, {resolution}, {image_quality},
        {compress_vector_graphics}, {image_compression},
        {jpeg_compression_quality}, {embed_fonts}, {embed_color_profile},
        {clip_to_elements}, {keep_layout_background})


        Exports the  Layout  to Adobe Illustrator Exchange (AIX) format. AIX
        files can be used with the ArcGIS Maps for Adobe Creative Cloud
        extension or Adobe Illustrator.


        out_aix(String):
        A string that represents the path and file name for the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 300.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2

        * NORMAL: An output image quality resample ratio of 3

        * FASTEST: An output image quality resample ratio of 5

        * BEST: An output image quality resample ratio of 1

        * FASTER: An output image quality resample ratio of 4


        compress_vector_graphics{Boolean}:
        A Boolean that controls compression of vector and text portions of the
        output file. Image compression is defined separately. The default value
        is True.


        image_compression{String}:
        A string that specifies the compression scheme used to compress image or
        raster data in the output file. The default value is ADAPTIVE.

        * DEFLATE: A lossless data compression.

        * NONE: Compression is not applied.

        * RLE: Run-length encoded compression.

        * JPEG: A lossy data compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.

        * ADAPTIVE: Automatically selects the best compression type for each
        image on the page.   JPEG will be used for large images with many unique
        colors.  DEFLATE will be used for all other images.


        jpeg_compression_quality{Integer}:
        A number that controls compression quality value when image_compression
        is set to ADAPTIVE or JPEG. The valid range is 1 through 100.    A
        jpeg_compression_quality of 100 provides the best-quality images but
        creates large export files.   The recommended range is between 70 and
        90. The default value is 80.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in the export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.


        clip_to_elements{Boolean}:
        If set to True, the layout is clipped to the smallest bounding box that
        includes all layout elements. The default value is False.


        keep_layout_background{Boolean}:
        If set to True, the layout's white background will be kept. The default
        value is True.
        """
        ...
    @constants.maskargs
    def exportToBMP(
        self,
        out_bmp,
        resolution=...,
        bmp_color_mode=...,
        bmp_image_compression=...,
        embed_color_profile=...,
        clip_to_elements=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.exportToBMP(out_bmp, {resolution}, {bmp_color_mode},
        {bmp_image_compression}, {embed_color_profile}, {clip_to_elements})


        Exports the Layout to the Microsoft Windows Bitmap format (BMP).


        out_bmp(String):
        A string that represents the path and file name for the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        bmp_color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 24-BIT_TRUE_COLOR.

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 24-BIT_TRUE_COLOR: 24-bit true color


        bmp_image_compression{String}:
        A string that specifies the compression scheme used to compress image or
        raster data in the output file.  This option only applies to 8-bit
        bmp_color_mode options. The default value is NONE.

        * RLE: Run-length encoded compression.

        * NONE: Compression is not applied.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.


        clip_to_elements{Boolean}:
        If set to True, the layout is clipped to the smallest bounding box that
        includes all layout elements. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToEMF(
        self,
        out_emf,
        resolution=...,
        image_quality=...,
        output_as_image=...,
        clip_to_elements=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.exportToEMF(out_emf, {resolution}, {image_quality},
        {output_as_image}, {clip_to_elements})


        Exports the Layout to the Enhanced Metafile (EMF) format.


        out_emf(String):
        A string that represents the system path and file name for the output
        export file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2

        * NORMAL: An output image quality resample ratio of 3

        * FASTEST: An output image quality resample ratio of 5

        * BEST: An output image quality resample ratio of 1

        * FASTER: An output image quality resample ratio of 4


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.


        clip_to_elements{Boolean}:
        If set to True, the layout is clipped to the smallest bounding box that
        includes all layout elements. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToEPS(
        self,
        out_eps,
        resolution=...,
        image_compression=...,
        image_quality=...,
        embed_fonts=...,
        output_as_image=...,
        clip_to_elements=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.exportToEPS(out_eps, {resolution}, {image_compression},
        {image_quality}, {embed_fonts}, {output_as_image}, {clip_to_elements})


        Exports the Layout to an Encapsulated PostScript (EPS) format file.


        out_eps(String):
        A string that represents the system path and file name for the output
        export file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        image_compression{String}:
        A string that specifies the compression scheme used to compress image or
        raster data in the output file. The default value is DEFLATE.

        * RLE: Run-length encoded compression.

        * NONE: Compression is not applied.

        * DEFLATE: A lossless data compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2.

        * NORMAL: An output image quality resample ratio of 3.

        * FASTEST: An output image quality resample ratio of 5.

        * BEST: An output image quality resample ratio of 1.

        * FASTER: An output image quality resample ratio of 4.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in the export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.


        clip_to_elements{Boolean}:
        If set to True, the layout is clipped to the smallest bounding box that
        includes all layout elements. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToGIF(
        self, out_gif, resolution=..., gif_color_mode=..., clip_to_elements=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.exportToGIF(out_gif, {resolution}, {gif_color_mode},
        {clip_to_elements})


        Exports the Layout to Graphic Interchange Format (GIF).


        out_gif(String):
        A string that represents the system path and file name for the output
        export file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        gif_color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 8-BIT_PALETTE.

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette

        * 8-BIT_GRAYSCALE: 8-bit grayscale


        clip_to_elements{Boolean}:
        If set to True, the layout is clipped to the smallest bounding box that
        includes all layout elements. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToJPEG(
        self,
        out_jpg,
        resolution=...,
        jpeg_color_mode=...,
        jpeg_quality=...,
        embed_color_profile=...,
        clip_to_elements=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.exportToJPEG(out_jpg, {resolution}, {jpeg_color_mode},
        {jpeg_quality}, {embed_color_profile}, {clip_to_elements})


        Exports the Layout to a Joint Photographic Experts Group (JPEG) format
        file.


        out_jpg(String):
        A string that represents the path and file name of the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        jpeg_color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 24-BIT_TRUE_COLOR.

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 24-BIT_TRUE_COLOR: 24-bit true color


        jpeg_quality{Integer}:
        This value (0–100) controls the amount of compression applied to the
        output image. With a JPEG image, quality is adversely affected the more
        compression is applied. A higher quality (highest = 100) setting will
        produce sharper images and larger file sizes. A lower quality setting
        will produce more image artifacts and smaller files. The default value
        is 80.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.


        clip_to_elements{Boolean}:
        If set to True, the layout is clipped to the smallest bounding box that
        includes all layout elements. The default value is False.
        """
        ...
    def exportToPAGX(self, out_pagx): ...
    @constants.maskargs
    def exportToPDF(
        self,
        out_pdf,
        resolution=...,
        image_quality=...,
        compress_vector_graphics=...,
        image_compression=...,
        embed_fonts=...,
        layers_attributes=...,
        georef_info=...,
        jpeg_compression_quality=...,
        clip_to_elements=...,
        output_as_image=...,
        embed_color_profile=...,
        pdf_accessibility=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.exportToPDF(out_pdf, {resolution}, {image_quality},
        {compress_vector_graphics}, {image_compression}, {embed_fonts},
        {layers_attributes}, {georef_info}, {jpeg_compression_quality},
        {clip_to_elements}, {output_as_image}, {embed_color_profile},
        {pdf_accessibility})


        Exports the Layout  to Portable Document Format (PDF).


        out_pdf(String):
        A string that represents the path and file name for the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 300.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2

        * NORMAL: An output image quality resample ratio of 3

        * FASTEST: An output image quality resample ratio of 5

        * BEST: An output image quality resample ratio of 1

        * FASTER: An output image quality resample ratio of 4


        compress_vector_graphics{Boolean}:
        A Boolean that controls compression of vector and text portions of the
        output file. Image compression is defined separately. The default value
        is True.


        image_compression{String}:
        A string that specifies the compression scheme used to compress image or
        raster data in the output file. The default value is ADAPTIVE.

        * DEFLATE: A lossless data compression.

        * NONE: Compression is not applied.

        * RLE: Run-length encoded compression.

        * JPEG: A lossy data compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.

        * ADAPTIVE: Automatically selects the best compression type for each
        image on the page.   JPEG will be used for large images with many unique
        colors.  DEFLATE will be used for all other images.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in the export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        layers_attributes{String}:
        A string that specifies whether the PDF layer and PDF object data
        (attributes) will be included in the export file. The default value is
        LAYERS_ONLY.

        * LAYERS_ONLY: Export PDF layers only

        * LAYERS_AND_ATTRIBUTES: Export PDF layers and feature attributes

        * NONE: None


        georef_info{Boolean}:
        A Boolean that enables the export of coordinate system information for
        each data frame into the output PDF file. The default value is True.


        jpeg_compression_quality{Integer}:
        A number that controls compression quality value when image_compression
        is set to ADAPTIVE or JPEG. The valid range is 1 through 100.    A
        jpeg_compression_quality of 100 provides the best quality images but
        creates large export files.   The recommended range is between 70 and
        90. The default value is 80.


        clip_to_elements{Boolean}:
        If set to True, the layout is clipped to the smallest bounding box that
        includes all layout elements. The default value is False.


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.


        pdf_accessibility{Boolean}:
        Output a tagged PDF file where text can be read by screen readers or
        other assistive technology.  A tagged PDF file can include alt text—a
        text
        description of a graphic element that a screen reader uses to
        describe the element—for map frames, pictures, and chart frames.
        Alt text is added in the
        Element Pane for each element. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToPNG(
        self,
        out_png,
        resolution=...,
        color_mode=...,
        transparent_background=...,
        embed_color_profile=...,
        clip_to_elements=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.exportToPNG(out_png, {resolution}, {color_mode},
        {transparent_background}, {embed_color_profile}, {clip_to_elements})


        Exports the Layout to a Portable Network Graphics (PNG) format file.


        out_png(String):
        A string that represents the path and file name of the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 32-BIT_WITH_ALPHA.

        * 32-BIT_WITH_ALPHA: 32-bit with alpha

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 24-BIT_TRUE_COLOR: 24-bit true color


        transparent_background{Boolean}:
        If set to True, the white page background is set to transparent. The
        default value is False.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.


        clip_to_elements{Boolean}:
        If set to True, the layout is clipped to the smallest bounding box that
        includes all layout elements. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToSVG(
        self,
        out_svg,
        resolution=...,
        compress_to_svgz=...,
        image_quality=...,
        embed_fonts=...,
        output_as_image=...,
        clip_to_elements=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.exportToSVG(out_svg, {resolution}, {compress_to_svgz},
        {image_quality}, {embed_fonts}, {output_as_image}, {clip_to_elements})


        Exports the Layout to the Scalable Vector Graphics format (SVG).


        out_svg(String):
        A string that represents the path and file name for the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        compress_to_svgz{Boolean}:
        If set to True, the output is compressed. The default value is False.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2.

        * NORMAL: An output image quality resample ratio of 3.

        * FASTEST: An output image quality resample ratio of 5.

        * BEST: An output image quality resample ratio of 1.

        * FASTER: An output image quality resample ratio of 4.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in the export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.


        clip_to_elements{Boolean}:
        If set to True, the layout is clipped to the smallest bounding box that
        includes all layout elements. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToTGA(
        self,
        out_tga,
        resolution=...,
        color_mode=...,
        transparent_background=...,
        clip_to_elements=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.exportToTGA(out_tga, {resolution}, {color_mode},
        {transparent_background}, {clip_to_elements})


        Exports the Layout to the Truevision Graphics Adapter format (TGA).


        out_tga(String):
        A string that represents the path and file name for the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 32-BIT_WITH_ALPHA.

        * 32-BIT_WITH_ALPHA: 32-bit with alpha

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 24-BIT_TRUE_COLOR: 24-bit true color


        transparent_background{Boolean}:
        If set to True, the white page background is set to transparent. The
        default value is False.


        clip_to_elements{Boolean}:
        If set to True, the layout is clipped to the smallest bounding box that
        includes all layout elements. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToTIFF(
        self,
        out_tif,
        resolution=...,
        color_mode=...,
        tiff_compression=...,
        jpeg_compression_quality=...,
        transparent_background=...,
        embed_color_profile=...,
        clip_to_elements=...,
        world_file=...,
        geoTIFF_tags=...,
        georef_mapframe=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.exportToTIFF(out_tif, {resolution}, {color_mode},
        {tiff_compression}, {jpeg_compression_quality},
        {transparent_background}, {embed_color_profile}, {clip_to_elements},
        {world_file}, {geoTIFF_tags}, {georef_mapframe})


        Exports the Layout to a Tagged Image File Format (TIFF) file.


        out_tif(String):
        A string that represents the path and file name of the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        color_mode{String}:
        This value specifies the number of bits used to describe color. The
        available options are dependent on the specified Color Model set in the
        layout's Color Management properties. The default value is
        24-BIT_TRUE_COLOR.

        * 32-BIT_WITH_ALPHA: 32-bit with alpha. Available only to RGB.

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette. Available to RGB and
        CMYK.

        * 40-BIT_CMYK_WITH_ALPHA: 40-bit CMYK with alpha. Available only to
        CMYK.

        * 24-BIT_TRUE_COLOR: 24-bit true color. Available only to RGB.

        * 32-BIT_CMYK_TRUE_COLOR: 32-bit CMYK true color. Available only to
        CMYK.

        * 8-BIT_GRAYSCALE: 8-bit grayscale. Available to RGB and CMYK.


        tiff_compression{String}:
        This value represents a compression scheme. The default value is LZW.

        * DEFLATE: A lossless data compression.

        * NONE: Compression is not applied.

        * JPEG: JPEG compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.

        * PACK_BITS: Pack bits compression.


        jpeg_compression_quality{Integer}:
        This value (0–100) controls the amount of compression applied to the
        output image. With a JPEG image, quality is adversely affected the more
        compression is applied. A higher-quality (highest = 100) setting will
        produce sharper images and larger file sizes. A lower-quality setting
        will produce more image artifacts and smaller files. The default value
        is 80.


        transparent_background{Boolean}:
        If set to True, the white page background is set to transparent. The
        default value is False.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.


        clip_to_elements{Boolean}:
        If set to True, the layout is clipped to the smallest bounding box that
        includes all layout elements. The default value is False.


        world_file{Boolean}:
        If set to True and a valid georef_mapframe is
        set, a world file will be generated based on the map frame's
        coordinate system. The default value is False.


        geoTIFF_tags{Boolean}:
        If set to True and a valid georef_mapframe is set, geoTIFF tags will be
        embedded in the resulting image based on the map frame's coordinate
        system. The default value is False.


        georef_mapframe{MapFrame}:
        The MapFrame used to control the coordinate system when geoTIFF_tags are
        set to True. The default value is None.
        """
        ...
    @constants.maskargs
    def listElements(
        self, element_type=..., wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.listElements({element_type}, {wildcard})


        Returns a Python list of page layout elements  that exist on  a Layout
        object.


        element_type{String}:
        A string that represents the element type that will be used to filter
        the returned list of elements. The default value is None.

        * MAPFRAME_ELEMENT: Filter for MapFrame objects.

        * MAPSURROUND_ELEMENT: Filter for MapsurroundElement objects.

        * GRAPHIC_ELEMENT: Filter for GraphicElement objects.

        * LEGEND_ELEMENT: Filter for LegendElement objects.

        * PICTURE_ELEMENT: Filter for PictureElement objects.

        * TEXT_ELEMENT: Filter for TextElement objects.


        wildcard{String}:
        A wildcard is based on the element name and is not case sensitive.  A
        combination of asterisks (*) and characters can be used to help limit
        the results. The default value is None.
        """
        ...
    def __eq__(self, other) -> bool: ...
    @constants.maskargs
    def getDefinition(self, cim_version):  # -> Any | list[Unknown] | None:
        """Layout.getDefinition(cim_version)


        Gets a layout's CIM definition.


        cim_version(String):
        A string that represents the major version of the CIM.
        """
        ...
    @constants.maskargs
    def setDefinition(
        self, definition_object
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.setDefinition(definition_object)


        Sets a layout's CIM definition.


        definition_object(Object):
        A modified CIM definition object originally retrieved using
        getDefinition.
        """
        ...
    def openView(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Layout.openView()


        Opens and activates a new layout view pane in the application.
        """
        ...

class LegendElement(_ObjectWithoutInitCall):
    """The LegendElement object provides access to properties that enable its positioning
    and resizing on the page layout as well as modifying its title. It also provides
    access to individual LegendItems."""

    elementHeight = ...
    elementPositionX = ...
    elementPositionY = ...
    elementWidth = ...
    locked = ...
    name = ...
    mapFrame = ...
    title = ...
    type = ...
    visible = ...
    elementRotation = ...
    showTitle = ...
    syncNewLayer = ...
    syncLayerOrder = ...
    syncLayerVisibility = ...
    syncReferenceScale = ...
    columnCount = ...
    fittingStrategy = ...
    items = ...
    def removeItem(
        self, remove_item
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LegendElement.removeItem(remove_item)


        Allows you to remove a legend item from a legend.


        remove_item(LegendItem):
        A reference to a LegendItem object representing the item to be removed.
        """
        ...
    @constants.maskargs
    def addItem(
        self, layer, add_position=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LegendElement.addItem(layer, {add_position})


        Allows you to add a Layer to a legend using basic placement options.


        layer(Layer):
        A reference to a Layer object representing the layer to be added to a
        legend as a LegendItem.


        add_position{String}:
        A constant that determines the placement of the added layer within the
        legend. The default value is TOP.

        * TOP: Places the layer or layers at the top of the TOC layer stack.

        * BOTTOM: Places the layer or layers at the bottom of the TOC layer
        stack.
        """
        ...
    @constants.maskargs
    def moveItem(
        self, reference_item, move_item, move_position=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LegendElement.moveItem(reference_item, move_item, {move_position})


        Allows you to move a legend item to  a specific location within a
        legend.


        reference_item(LegendItem):
        A LegendItem object representing an existing legend item that determines
        the relative location where the  move_item will be moved.


        move_item(Layer):
        A reference to a LegendItem object representing the layer to be moved.


        move_position{String}:
        A constant that determines the placement of the moved layer relative to
        the reference layer. The default value is BEFORE.

        * AFTER: Moves the  legend item after or below the reference_item.

        * BEFORE: Moves the legend item before or above the reference_item.
        """
        ...

class LegendItem(_ObjectWithoutInitCall):
    """LegendItem provides access to legend item level information in a LegendElement."""

    arrangement = ...
    patchHeight = ...
    patchWidth = ...
    showFeatureCount = ...
    showVisibleFeatures = ...
    visible = ...
    type = ...
    name = ...
    column = ...

class Report(_ObjectWithoutInitCall):
    """The Report object references a report in an ArcGIS Pro
    project ( .aprx ).  It provides access to common properties like dataReference,
    definitionQuery, and the export method."""

    name = ...
    referenceDataSource = ...
    definitionQuery = ...
    metadata = ...
    def setReferenceDataSource(
        self, data_source
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Report.setReferenceDataSource(data_source)


        Sets a report's reference data source.


        data_source(Object):
        The data reference that powers the report.  This parameter can be a
        Layer object, a Table object, or a string that represents the path to an
        external data source. The default value is None.
        """
        ...
    def exportToPDF(
        self,
        out_pdf,
        page_range_type=...,
        page_range=...,
        starting_page_number=...,
        total_page_number=...,
        resolution=...,
        image_quality=...,
        compress_vector_graphics=...,
        image_compression=...,
        embed_fonts=...,
        jpeg_compression_quality=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Report.exportToPDF(out_pdf, {page_range_type}, {page_range},
        {starting_page_number}, {total_page_number}, {resolution},
        {image_quality}, {compress_vector_graphics}, {image_compression},
        {embed_fonts}, {jpeg_compression_quality})


        Exports a report to a Portable Document Format (PDF) file.


        out_pdf(String):
        A string that represents the path and file name of the output export
        file.


        page_range_type{String}:
        A string that defines the type of page range to export. The default is
        ALL. The default value is ALL.

        * EVEN: Export the even numbered pages of the report.

        * LAST: Export the last page of the report.

        * ALL: Export all pages of the report.

        * ODD: Export the odd numbered pages of the report.

        * RANGE: Export the pages listed in the page_range parameter .


        page_range{String}:
        A string that identifies the pages to be exported if the RANGE option in
        the page_range_type parameter is used (for example, 1, 3, 5-12).   If
        any other page_range_type value is used, the page_range value will be
        ignored.


        starting_page_number{Integer}:
        Applies an offset to the page numbering to add additional pages to the
        beginning of the report.  The default offset is 1. The default value is
        1.


        total_page_number{Integer}:
        The total number of pages to label, for example, when your report
        displays X of Y pages.  This is useful when you want to combine multiple
        reports into one.  The default is -1, which means there is no override.
        The default value is None.


        resolution{Integer}:
        An integer that defines the resolution of the export file in dots per
        inch (dpi). The default value is 96.


        image_quality{String}:
        A string that defines output image quality. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2

        * NORMAL: An output image quality resample ratio of 3

        * FASTEST: An output image quality resample ratio of 5

        * BEST: An output image quality resample ratio of 1

        * FASTER: An output image quality resample ratio of 4


        compress_vector_graphics{Boolean}:
        A Boolean that controls compression of vector and text portions of the
        output file. Image compression is defined separately. The default value
        is True.


        image_compression{String}:
        A string that defines the compression scheme used to compress image or
        raster data in the output file. The default value is ADAPTIVE.

        * NONE: Compression is not applied

        * RLE: Run-length encoded compression

        * JPEG: A lossy data compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression

        * DEFLATE: A lossless data compression

        * ADAPTIVE: Automatically selects the best compression type for each
        image on the page.   JPEG will be used for large images with many unique
        colors.  DEFLATE will be used for all other images.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in an export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        jpeg_compression_quality{Integer}:
        A number that controls compression quality value when image_compression
        is set to ADAPTIVE or JPEG. The valid range is 1 through 100.    A
        jpeg_compression_quality of 100 provides the best quality images but
        creates large export files.   The recommended range is 70 through 90.
        The default value is 80.
        """
        ...
    def listSections(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Report.listSections({wildcard})


        Returns a Python list of ReportSection and ReportLayoutSection objects
        in a report.


        wildcard{String}:
        A wildcard is based on the section name and is not case sensitive.  A
        combination of asterisks (*) and characters can be used to help
        limit the resulting list. The default value is None.
        """
        ...
    def openView(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Report.openView()


        Opens and activates a new report view pane in the application.
        """
        ...
    @constants.maskargs
    def getDefinition(self, cim_version):  # -> Any | list[Unknown] | None:
        """Report.getDefinition(cim_version)


        Gets a report's CIM definition.


        cim_version(String):
        A string that represents the major version of the CIM.
        """
        ...
    @constants.maskargs
    def setDefinition(
        self, definition_object
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Report.setDefinition(definition_object)


        Sets a report's CIM definition.


        definition_object(Object):
        A modified CIM definition object originally retrieved using
        getDefinition.
        """
        ...

class ReportSection(_ObjectWithoutInitCall):
    """The ReportSection object references a reportSection in a Report.
    It provides access to common properties like dataReference and
    definitionQuery."""

    name = ...
    referenceDataSource = ...
    definitionQuery = ...
    visible = ...
    type = ...
    def setReferenceDataSource(
        self, data_source
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ReportSection.setReferenceDataSource(data_source)


        Sets a report section's reference data source.


        data_source(Object):
        The data reference for the report section.  This parameter can be a
        Layer object, a Table object, or a string that represents the path to an
        external data source. The default value is None.
        """
        ...
    def setRelatedReportSource(
        self,
        related_report_data_source,
        related_report_section_name,
        relate_or_relationship_class_name,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """ReportSection.setRelatedReportSource(related_report_data_source,
        related_report_section_name, relate_or_relationship_class_name)


        Sets a related report's data source.


        related_report_data_source(Object):
        The data source for the new related report.  This parameter can be a
        Layer object, a Table object, or a string that represents the path to an
        external data source. The default value is None.


        related_report_section_name(String):
        The name of the related report. The default value is None.


        relate_or_relationship_class_name(String):
        The name of the new relate or relationship class. The default value is
        None.
        """
        ...

class ReportLayoutSection(_ObjectWithoutInitCall):
    """The ReportLayoutSection object references a reportLayoutSection in a Report.
    It provides access to common properties like name and visibility."""

    name = ...
    visible = ...
    type = ...
    URI = ...

class Map(_ObjectWithoutInitCall):
    """The Map is the primary object for referencing and managing layers and
    tables within an ArcGIS Pro project."""

    defaultCamera = ...
    defaultView = ...
    mapType = ...
    name = ...
    referenceScale = ...
    mapUnits = ...
    metadata = ...
    spatialReference = ...
    URI = ...
    transformations = ...
    @constants.maskargs
    def addLayer(
        self, add_layer_or_layerfile, add_position=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.addLayer(add_layer_or_layerfile, {add_position})


        Provides the ability to add a Layer or LayerFile to a map within a
        project (.aprx) using basic placement options.


        add_layer_or_layerfile(Layer):
        A reference to a Layer or LayerFile object representing the layer or
        layers  to be added.


        add_position{String}:
        A constant that determines the placement of the added layer or layers
        in a map. The default value is AUTO_ARRANGE.

        * TOP: Places the layer or layers at the top of the TOC layer stack.

        * AUTO_ARRANGE: Automatically places the layer or layers based on its
        layer weight rules and geometry.

        * BOTTOM: Places the layer or layers at the bottom of the TOC layer
        stack.
        """
        ...
    @constants.maskargs
    def addLayerToGroup(
        self, target_group_layer, add_layer_or_layerfile, add_position=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.addLayerToGroup(target_group_layer, add_layer_or_layerfile,
        {add_position})


        Provides the ability to add a Layer or the contents of a LayerFile to an
        existing group layer in a map within a project (.aprx) using basic
        placement options.


        target_group_layer(Layer):
        A reference to an existing group Layer object.


        add_layer_or_layerfile(Layer):
        A reference to a Layer or LayerFile object representing the layer or
        layers  to be added.


        add_position{String}:
        A constant that determines the placement of the added layer or layers in
        the target_group_layer. The default value is AUTO_ARRANGE.

        * TOP: Places the layer at the top of the TOC layer stack.

        * AUTO_ARRANGE: Automatically places the layer based on its layer weight
        rules and geometry.

        * BOTTOM: Places the layer at the bottom of the TOC layer stack.
        """
        ...
    def addTable(
        self, add_table
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.addTable(add_table)


        Provides the ability to add a Table  to a map within a project (.aprx).


        add_table(Table):
        A reference to a Table object representing the table  to be added.
        """
        ...
    def addTableToGroup(
        self, target_group_layer, add_table
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.addTableToGroup(target_group_layer, add_table)


        Provides the ability to add a Table to an existing group layer in a map
        within a project (.aprx).


        target_group_layer(Layer):
        A reference to an existing group layer.


        add_table(Table):
        A reference to a Table object.
        """
        ...
    def clearSelection(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.clearSelection()


        Clears the selection for all layers and tables in a map.
        """
        ...
    @constants.maskargs
    def insertLayer(
        self, reference_layer, insert_layer_or_layerfile, insert_position=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.insertLayer(reference_layer, insert_layer_or_layerfile,
        {insert_position})


        Provides the ability to add a Layer or LayerFile to a map within a
        project (.aprx) by specifying  a specific location.


        reference_layer(Layer):
        A Layer object representing an existing layer that determines the
        location where the new layer will be inserted.


        insert_layer_or_layerfile(Layer):
        A reference to a Layer or LayerFile object representing the layer or
        layers  to be added.


        insert_position{String}:
        A constant that determines the placement of the added layer or layers
        relative to the reference_layer. The default value is BEFORE.

        * AFTER: Inserts the new layer after or below the reference layer.

        * BEFORE: Inserts the new layer before or above the reference layer.
        """
        ...
    def listBookmarks(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.listBookmarks({wildcard})


        Returns a Python list of bookmark objects in a Map.


        wildcard{String}:
        A wildcard is based on the bookmark name and is not case sensitive. A
        combination of asterisks (*) and characters can be used to help
        limit the resulting list. The default value is None.
        """
        ...
    def listBrokenDataSources(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.listBrokenDataSources()


        Returns a Python list of Layer or Table objects that have broken
        connections to their original source data within a map.
        """
        ...
    def listLayers(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.listLayers({wildcard})


        Returns a Python list of Layer objects that exist within a map.


        wildcard{String}:
        A wildcard is based on the layer name and is not case sensitive. A
        combination of asterisks (*) and characters can be used to help
        limit the resulting list. The default value is None.
        """
        ...
    def listTables(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.listTables({wildcard})


        Returns a Python list of Table objects that exist within a map.


        wildcard{String}:
        A wildcard is based on the layer name and is not case sensitive.  A
        combination of asterisks (*) and characters can be used to help limit
        the resulting list. The default value is None.
        """
        ...
    def addBasemap(
        self, basemap_name
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.addBasemap(basemap_name)


        addBasemap provides the ability to add or replace a basemap layer within
        a map.


        basemap_name(String):
        The name of the basemap as it appears in the basemap gallery.
        """
        ...
    @constants.maskargs
    def addDataFromPath(
        self, data_path, web_service_type=..., custom_parameters=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.addDataFromPath(data_path, {web_service_type}, {custom_parameters})


        addDataFromPath allows you to add a Layer  to a map in a project (.aprx)
        by providing a local path or URL.


        data_path(String):
        A string that represents a local path or URL. The default value is None.


        web_service_type{String}:
        A string that represents the type of web service connection. When you
        are working with a service URL that is hosted on a third-party server
        and the URL is not deterministic, you must specify the service type from
        the list to add the data.  The default value of AUTOMATIC will not work
        if the custom_parameters dictionary is provided. The default value is
        AUTOMATIC.

        * WMS: A WMS OGC web service

        * KML: KML

        * AUTOMATIC: Attempt to automatically match the correct service based on
        the provided URL

        * ARCGIS_SERVER_WEB: An ArcGIS Server web service

        * VECTOR_TILE: A vector tile service


        custom_parameters{Dictionary}:
        A Python dictionary of custom connection parameters.  The KML
        data_service_type does not support custom properties. The default value
        is None.
        """
        ...
    @constants.maskargs
    def moveLayer(
        self, reference_layer, move_layer, insert_position=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.moveLayer(reference_layer, move_layer, {insert_position})


        Provides the ability to move a layer or group layer in a map to  a
        specific location in the layer stack.


        reference_layer(Layer):
        A Layer  object representing an existing layer that determines the
        location where the new layer will be moved.


        move_layer(Layer):
        A reference to a Layer object representing the layer to be moved.


        insert_position{String}:
        A constant that determines the placement of the moved layer relative to
        the reference layer. The default value is BEFORE.

        * AFTER: Moves the  layer after or below the reference layer.

        * BEFORE: Moves the layer before or above the reference layer.
        """
        ...
    def removeLayer(
        self, remove_layer
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.removeLayer(remove_layer)


        Provides the ability to remove a layer from a map in a project.


        remove_layer(Layer):
        A reference to a Layer object representing the layer to be removed.
        """
        ...
    def removeTable(
        self, remove_table
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.removeTable(remove_table)


        Provides the ability to remove a table from a map in a project.


        remove_table(Table):
        A reference to a Table object representing the layer to be removed.
        """
        ...
    def updateConnectionProperties(
        self,
        current_connection_info,
        new_connection_info,
        auto_update_joins_and_relates=...,
        validate=...,
        ignore_case=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.updateConnectionProperties(current_connection_info,
        new_connection_info, {auto_update_joins_and_relates}, {validate},
        {ignore_case})


        The updateConnectionProperties method replaces connection properties
        using a dictionary or a path to a workspace.


        current_connection_info(String):
        A string that represents the workspace path or a Python dictionary that
        contains connection properties to the source you want to update. If an
        empty string or None is used in current_connection_info, all connection
        properties will be replaced with the new_workspace_info, depending on
        the value of the validate parameter.


        new_connection_info(String):
        A string that represents the workspace path or a Python dictionary that
        contains connection properties with the new source information.


        auto_update_joins_and_relates{Boolean}:
        If  set to True, the updateConnectionProperties method will also update
        the connections for associated joins or relates. The default value is
        True.


        validate{Boolean}:
        If  set to True, the connection properties will only be updated if the
        new_connection_info value is a valid connection.  If it is not valid,
        the connection will not be replaced.   If set to False, the method will
        set all connections to match the new_connection_info value, regardless
        of a valid match.  In this case, if a match does not exist, the data
        sources would be broken. The default value is True.


        ignore_case{Boolean}:
        Determines whether searches will be case sensitive. By default, queries
        are case sensitive. To perform queries that are not case sensitive, set
        ignore_case to True. The default value is False.
        """
        ...
    def getWebLayerSharingDraft(
        self, server_type, service_type, service_name, layers_and_tables=...
    ):  # -> TileSharingDraft | FeatureSharingDraft | MapImageSharingDraft:
        """Map.getWebLayerSharingDraft(server_type, service_type, service_name,
        {layers_and_tables})


        Creates a sharing draft from a map that can be configured and shared to
        ArcGIS Enterprise or ArcGIS Online.


        server_type(String):
        A string representing the server type.
        The following server types are supported:
        The getWebLayerSharingDraft function does not support publishing  map
        services to ArcGIS Server. Instead, use the
        arcpy.sharing.CreateSharingDraft function.

        * FEDERATED_SERVER: Supports publishing a map image layer to an ArcGIS
        Enterprise portal federated server. Use this option when specifying
        MAP_IMAGE  in the service_type parameter.

        * HOSTING_SERVER: Supports publishing either a web feature layer or a
        web tile layer to ArcGIS Enterprise or ArcGIS Online. Use this option
        when specifying FEATURE or TILE  in the service_type parameter.


        service_type(String):
        A string representing the service type. The following service types are
        supported:

        * TILE: Creates a TileSharingDraft for a web tile layer

        * MAP_IMAGE: Creates a MapImageSharingDraft for a map image layer

        * FEATURE: Creates a FeatureSharingDraft for a web feature layer


        service_name(String):
        A string that represents the name of the service. This is the name
        people will see and use to identify the service. The name can contain
        alphanumeric characters, spaces, and underscores. No special characters
        are allowed. The name cannot be more than 120 characters in length.


        layers_and_tables{List}:
        A list of layers and tables from the map. If left blank, the entire map
        will be published. This parameter allows you to choose a subset of
        layers and tables from the map to publish. The layers and tables must be
        from the same map that is being published.If you specify a layer or
        table that participates in a relationship class when publishing a web
        feature layer or a map image layer, all layers or tables involved in the
        relationship class will be published.
        """
        ...
    def __eq__(self, other) -> bool: ...
    @constants.maskargs
    def getDefinition(self, cim_version):  # -> Any | list[Unknown] | None:
        """Map.getDefinition(cim_version)


        Gets a map's CIM definition.


        cim_version(String):
        A string that represents the major version of the CIM.
        """
        ...
    @constants.maskargs
    def setDefinition(
        self, definition_object
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.setDefinition(definition_object)


        Sets a map's CIM definition.


        definition_object(Object):
        A modified CIM definition object originally retrieved using
        getDefinition.
        """
        ...
    def exportToMAPX(
        self, out_mapx
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.exportToMAPX(out_mapx)


        Exports a Map  to a map file.


        out_mapx(String):
        A string used to save a Map to a map file (.mapx).
        """
        ...
    @constants.maskargs
    def createGroupLayer(
        self, name, group_layer=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.createGroupLayer(name, {group_layer})


        Allows you to create  a group layer in a map within a project (.aprx).


        name(String):
        A string that represents the name of the new group layer.


        group_layer{Layer}:
        A reference to an existing group layer into which  to insert the new
        group layer. Use this parameter to create nested group layers.
        """
        ...
    def openView(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.openView()


        Opens and activates a new map view pane in the application.
        """
        ...
    def updateTransformations(
        self, transformations
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Map.updateTransformations(transformations)


        The updateTransformations method replaces a map's transformations using
        a dictionary.


        transformations(Dictionary):
        The dictionary keys are defined below.

        * 2D: Horizontal transformations, if any exist

        * 3D: Vertical transformations, if any exist
        """
        ...

class MapFrame(_ObjectWithoutInitCall):
    """The MapFrame object is a page layout element that is used to display the
    contents of a map on a layout.      It also provides access to page size
    and positioning, basic navigation methods,  and export options."""

    camera = ...
    elementHeight = ...
    elementPositionX = ...
    elementPositionY = ...
    elementRotation = ...
    elementWidth = ...
    locked = ...
    map = ...
    name = ...
    type = ...
    visible = ...
    time = ...
    @constants.maskargs
    def exportToBMP(
        self,
        out_bmp,
        resolution=...,
        world_file=...,
        bmp_color_mode=...,
        bmp_image_compression=...,
        embed_color_profile=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.exportToBMP(out_bmp, {resolution}, {world_file},
        {bmp_color_mode}, {bmp_image_compression}, {embed_color_profile})


        Exports the MapFrame to a Microsoft Windows Bitmap (BMP) format file.


        out_bmp(String):
        A string that represents the path and file name of the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        world_file{Boolean}:
        If set to True, a georeferenced world file is created. The file contains
        pixel scale information and real-world coordinate information. The
        default value is False.


        bmp_color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 24-BIT_TRUE_COLOR.

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 24-BIT_TRUE_COLOR: 24-bit true color


        bmp_image_compression{String}:
        A string that specifies the compression scheme used to compress image or
        raster data in the output file.  This option only applies to 8-bit
        bmp_color_mode options. The default value is NONE.

        * RLE: Run-length encoded compression.

        * NONE: Compression is not applied.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.
        """
        ...
    @constants.maskargs
    def exportToEMF(
        self, out_emf, resolution=..., image_quality=..., output_as_image=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.exportToEMF(out_emf, {resolution}, {image_quality},
        {output_as_image})


        Exports the MapFrame to an Enhanced Metafile (EMF) format file.


        out_emf(String):
        A string that represents the system path and file name of the output
        export file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2

        * NORMAL: An output image quality resample ratio of 3

        * FASTEST: An output image quality resample ratio of 5

        * BEST: An output image quality resample ratio of 1

        * FASTER: An output image quality resample ratio of 4


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToEPS(
        self,
        out_eps,
        resolution=...,
        image_compression=...,
        image_quality=...,
        embed_fonts=...,
        output_as_image=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.exportToEPS(out_eps, {resolution}, {image_compression},
        {image_quality}, {embed_fonts}, {output_as_image})


        Exports the MapFrame to an Encapsulated PostScript (EPS) format file.


        out_eps(String):
        A string that represents the system path and file name of the output
        export file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        image_compression{String}:
        A string that specifies the compression scheme used to compress image or
        raster data in the output file. The default value is DEFLATE.

        * RLE: Run-length encoded compression.

        * NONE: Compression is not applied.

        * DEFLATE: A lossless data compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2.

        * NORMAL: An output image quality resample ratio of 3.

        * FASTEST: An output image quality resample ratio of 5.

        * BEST: An output image quality resample ratio of 1.

        * FASTER: An output image quality resample ratio of 4.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in the export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToGIF(
        self, out_gif, resolution=..., world_file=..., gif_color_mode=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.exportToGIF(out_gif, {resolution}, {world_file},
        {gif_color_mode})


        Exports the MapFrame to a Graphic Interchange Format (GIF) file.


        out_gif(String):
        A string that represents the system path and file name of the output
        export file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        world_file{Boolean}:
        If set to True, a georeferenced world file is created. The file contains
        pixel scale information and real-world coordinate information. The
        default value is False.


        gif_color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 8-BIT_PALETTE.

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 8-BIT_PALETTE: 8-bit adaptive palette
        """
        ...
    @constants.maskargs
    def exportToJPEG(
        self,
        out_jpg,
        resolution=...,
        world_file=...,
        jpeg_color_mode=...,
        jpeg_quality=...,
        embed_color_profile=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.exportToJPEG(out_jpg, {resolution}, {world_file},
        {jpeg_color_mode}, {jpeg_quality}, {embed_color_profile})


        Exports the MapFrame to the Joint Photographic Experts Group (JPEG)
        format.


        out_jpg(String):
        A string that represents the path and file name for the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        world_file{Boolean}:
        If set to True, a georeferenced world file is created. The file contains
        pixel scale information and real-world coordinate information.  If you
        export a 3D map frame, this parameter will be ignored regardless of the
        setting because world files are not applicable to 3D views. The default
        value is False.


        jpeg_color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 24-BIT_TRUE_COLOR.

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 24-BIT_TRUE_COLOR: 24-bit true color


        jpeg_quality{Integer}:
        This value (0–100) controls the amount of compression applied to the
        output image. For JPEG, image quality is adversely affected the more
        compression is applied. A higher quality (highest = 100) setting will
        produce sharper images and larger file sizes. A lower quality setting
        will produce more image artifacts and smaller files. The default value
        is 80.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.
        """
        ...
    @constants.maskargs
    def exportToPDF(
        self,
        out_pdf,
        resolution=...,
        image_quality=...,
        compress_vector_graphics=...,
        image_compression=...,
        embed_fonts=...,
        layers_attributes=...,
        georef_info=...,
        jpeg_compression_quality=...,
        output_as_image=...,
        embed_color_profile=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.exportToPDF(out_pdf, {resolution}, {image_quality},
        {compress_vector_graphics}, {image_compression}, {embed_fonts},
        {layers_attributes}, {georef_info}, {jpeg_compression_quality},
        {output_as_image}, {embed_color_profile})


        Exports the MapFrame  to a Portable Document Format (PDF) file.


        out_pdf(String):
        A string that represents the path and file name of the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 300.


        image_quality{String}:
        A string that defines the output image quality and the draw resolution
        of map layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2

        * NORMAL: An output image quality resample ratio of 3

        * FASTEST: An output image quality resample ratio of 5

        * BEST: An output image quality resample ratio of 1

        * FASTER: An output image quality resample ratio of 4


        compress_vector_graphics{Boolean}:
        A Boolean that controls the compression of vector and text portions of
        the output file. Image compression is defined separately. The default
        value is True.


        image_compression{String}:
        A string that defines the compression scheme used to compress image or
        raster data in the output file. The default value is ADAPTIVE.

        * DEFLATE: A lossless data compression.

        * NONE: Compression is not applied.

        * RLE: Run-length encoded compression.

        * JPEG: A lossy data compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.

        * ADAPTIVE: Automatically selects the best compression type for each
        image on the page.   JPEG will be used for large images with many unique
        colors.  DEFLATE will be used for all other images.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in the export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        layers_attributes{String}:
        A string that controls the inclusion of PDF layers and PDF object data
        (attributes) in the export file. The default value is LAYERS_ONLY.

        * LAYERS_ONLY: Export PDF layers only.

        * LAYERS_AND_ATTRIBUTES: Export PDF layers and feature attributes.

        * NONE: No setting is applied.


        georef_info{Boolean}:
        A Boolean that enables the export of coordinate system information for
        each data frame into the output PDF file. The default value is True.


        jpeg_compression_quality{Integer}:
        A number that controls the compression quality value when
        image_compression is set to ADAPTIVE or JPEG. The valid range is 1
        through 100.    A jpeg_compression_quality of 100 provides the best
        quality images but creates large export files.   The recommended range
        is 70 through 90. The default value is 80.


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.
        """
        ...
    @constants.maskargs
    def exportToPNG(
        self,
        out_png,
        resolution=...,
        world_file=...,
        color_mode=...,
        embed_color_profile=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.exportToPNG(out_png, {resolution}, {world_file}, {color_mode},
        {embed_color_profile})


        Exports the MapFrame to Portable Network Graphics (PNG) format.


        out_png(String):
        A string that represents the path and file name for the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        world_file{Boolean}:
        If set to True, a georeferenced world file is created. The file contains
        pixel scale information and real-world coordinate information.  If you
        export a 3D map frame, this parameter will be ignored regardless of the
        setting because world files are not applicable to 3D views. The default
        value is False.


        color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 32-BIT_WITH_ALPHA.

        * 32-BIT_WITH_ALPHA: 32-bit with alpha

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 24-BIT_TRUE_COLOR: 24-bit true color


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.
        """
        ...
    @constants.maskargs
    def exportToSVG(
        self,
        out_svg,
        resolution=...,
        compress_to_svgz=...,
        image_quality=...,
        embed_fonts=...,
        output_as_image=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.exportToSVG(out_svg, {resolution}, {compress_to_svgz},
        {image_quality}, {embed_fonts}, {output_as_image})


        Exports the MapFrame to a Scalable Vector Graphics (SVG) format file.


        out_svg(String):
        A string that represents the path and file name of the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        compress_to_svgz{Boolean}:
        If set to True, the output is compressed. The default value is False.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2.

        * NORMAL: An output image quality resample ratio of 3.

        * FASTEST: An output image quality resample ratio of 5.

        * BEST: An output image quality resample ratio of 1.

        * FASTER: An output image quality resample ratio of 4.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in the export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToTGA(
        self, out_tga, resolution=..., world_file=..., color_mode=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.exportToTGA(out_tga, {resolution}, {world_file}, {color_mode})


        Exports the MapFrame to a Truevision Graphics Adapter (TGA) format file.


        out_tga(String):
        A string that represents the path and file name of the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        world_file{Boolean}:
        If set to True, a georeferenced world file is created. The file contains
        pixel scale information and real-world coordinate information. The
        default value is False.


        color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 32-BIT_WITH_ALPHA.

        * 32-BIT_WITH_ALPHA: 32-bit with alpha

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 24-BIT_TRUE_COLOR: 24-bit true color
        """
        ...
    @constants.maskargs
    def exportToTIFF(
        self,
        out_tif,
        resolution=...,
        world_file=...,
        color_mode=...,
        tiff_compression=...,
        geoTIFF_tags=...,
        jpeg_compression_quality=...,
        embed_color_profile=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.exportToTIFF(out_tif, {resolution}, {world_file}, {color_mode},
        {tiff_compression}, {geoTIFF_tags}, {jpeg_compression_quality},
        {embed_color_profile})


        Exports the MapFrame to Tagged Image File Format (TIFF).


        out_tif(String):
        A string that represents the path and file name for the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        world_file{Boolean}:
        If set to True, a georeferenced world file is created. The file contains
        pixel scale information and real-world coordinate information.  If you
        export a 3D map frame, this parameter will be ignored regardless of the
        setting because world files are not applicable to 3D views. The default
        value is False.


        color_mode{String}:
        This value specifies the number of bits used to describe color. The
        available options are dependent on the specified Color Model set in the
        layout's Color Management properties. The default value is
        24-BIT_TRUE_COLOR.

        * 32-BIT_WITH_ALPHA: 32-bit with alpha. Available only to RGB.

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette. Available to RGB and
        CMYK.

        * 40-BIT_CMYK_WITH_ALPHA: 40-bit CMYK with alpha. Available only to
        CMYK.

        * 24-BIT_TRUE_COLOR: 24-bit true color. Available only to RGB.

        * 32-BIT_CMYK_TRUE_COLOR: 32-bit CMYK true color. Available only to
        CMYK.

        * 8-BIT_GRAYSCALE: 8-bit grayscale. Available to RGB and CMYK.


        tiff_compression{String}:
        This value represents a compression scheme. The default value is LZW.

        * DEFLATE: A lossless data compression.

        * NONE: Compression is not applied.

        * JPEG: JPEG compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.

        * PACK_BITS: Pack bits compression.


        geoTIFF_tags{Boolean}:
        If set to True, georeferencing tags are included in the structure of the
        TIFF export file. The tags contain pixel scale information and real-
        world coordinate information. These tags can be read by applications
        that support GeoTIFF format. The default value is False.


        jpeg_compression_quality{Integer}:
        This value (0–100) controls the amount of compression applied to the
        output image. With a JPEG image, quality is adversely affected the more
        compression is applied. A higher quality (highest = 100) setting will
        produce sharper images and larger file sizes. A lower quality setting
        will produce more image artifacts and smaller files. The default value
        is 80.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.
        """
        ...
    def getLayerExtent(
        self, layer, selection_only=..., symbolized_extent=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.getLayerExtent(layer, {selection_only}, {symbolized_extent})


        Returns a layer's extent for all features or only the selected features
        in a layer.


        layer(Layer):
        A reference to a Layer object.


        selection_only{Boolean}:
        If True, it returns the extent for selected features; if False, it
        returns the extent for all features. The default value is True.


        symbolized_extent{Boolean}:
        A value of True will return the layer's symbolized extent; otherwise, it
        will return the geometric extent.  The symbolized extent takes into
        account the area the symbology covers so that it does not get cut off by
        the data frame's boundary. The default value is True.
        """
        ...
    def panToExtent(
        self, extent
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.panToExtent(extent)


        Pans and centers the MapFrame using a new Extent object without changing
        the map frame's scale.


        extent(Extent):
        A geoprocessing Extent object.
        """
        ...
    def zoomToAllLayers(
        self, selection_only=..., symbolized_extent=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.zoomToAllLayers({selection_only}, {symbolized_extent})


        Modifies the MapFrame view to match the extent of all layers or selected
        layers in a map.


        selection_only{Boolean}:
        If True, it sets the extent based on the selected  features; if False,
        it sets the extent for all  features in a map. The default value is
        True.


        symbolized_extent{Boolean}:
        A value of True will return the layer's symbolized extent; otherwise, it
        will return the geometric extent.  The symbolized extent takes into
        account the area the symbology covers so that it does not get cut off by
        the map frame's boundary. The default value is True.
        """
        ...
    def zoomToBookmark(
        self, bookmark
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.zoomToBookmark(bookmark)


        Modifies the MapFrame view to match the view information stored with a
        spatial bookmark.


        bookmark(Bookmark):
        A reference to a Bookmark object.
        """
        ...
    @constants.maskargs
    def exportToAIX(
        self,
        out_aix,
        resolution=...,
        image_quality=...,
        compress_vector_graphics=...,
        image_compression=...,
        jpeg_compression_quality=...,
        embed_fonts=...,
        embed_color_profile=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapFrame.exportToAIX(out_aix, {resolution}, {image_quality},
        {compress_vector_graphics}, {image_compression},
        {jpeg_compression_quality}, {embed_fonts}, {embed_color_profile})


        Exports the MapFrame  to Adobe Illustrator Exchange (AIX) format. AIX
        files can be used with the ArcGIS Maps for Adobe Creative Cloud
        extension or Adobe Illustrator.


        out_aix(String):
        A string that represents the path and file name for the output export
        file.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 300.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2

        * NORMAL: An output image quality resample ratio of 3

        * FASTEST: An output image quality resample ratio of 5

        * BEST: An output image quality resample ratio of 1

        * FASTER: An output image quality resample ratio of 4


        compress_vector_graphics{Boolean}:
        A Boolean that controls compression of vector and text portions of the
        output file. Image compression is defined separately. The default value
        is True.


        image_compression{String}:
        A string that specifies the compression scheme used to compress image or
        raster data in the output file. The default value is ADAPTIVE.

        * DEFLATE: A lossless data compression.

        * NONE: Compression is not applied.

        * RLE: Run-length encoded compression.

        * JPEG: A lossy data compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.

        * ADAPTIVE: Automatically selects the best compression type for each
        image on the page.   JPEG will be used for large images with many unique
        colors.  DEFLATE will be used for all other images.


        jpeg_compression_quality{Integer}:
        A number that controls compression quality value when image_compression
        is set to ADAPTIVE or JPEG. The valid range is 1 through 100.    A
        jpeg_compression_quality of 100 provides the best quality images but
        creates large export files.   The recommended range is between 70 and
        90. The default value is 80.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in the export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.
        """
        ...
    def __eq__(self, other) -> bool: ...

class MapSurroundElement(_ObjectWithoutInitCall):
    elementPositionX = ...
    elementPositionY = ...
    elementHeight = ...
    elementWidth = ...
    locked = ...
    name = ...
    mapFrame = ...
    type = ...
    visible = ...

class MapTime(_ObjectWithoutInitCall):
    """The MapTime object is a Map object with time settings."""

    currentTimeStart = ...
    currentTimeEnd = ...
    currentTimeSpan = ...
    currentTimeSpanUnits = ...
    timeStepInterval = ...
    timeStepIntervalUnits = ...
    isTimeEnabled = ...
    timeInclusion = ...
    @constants.maskargs
    def timeStep(
        self, reference_time, interval, interval_units
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapTime.timeStep(reference_time, interval, interval_units)


        The timeStep method returns a new time based on a given reference time
        and a time interval.


        reference_time(DateTime):
        A Python DateTime object. The interval and interval_units will be added
        to the reference_time.The reference_time can be any Python DateTime
        object. For example, you can set the reference_time to be the
        currentStartTime or currentEndTime values.


        interval(Double):
        A double that defines a time interval. Positive or negative intervals
        can be used.


        interval_units(String):
        A string that specifies a valid interval unit.

        * CENTURIES: Centuries

        * SECONDS: Seconds

        * MINUTES: Minutes

        * MONTHS: Months

        * DAYS: Days

        * YEARS: Years

        * HOURS: Hours

        * WEEKS: Weeks

        * DECADES: Decades

        * MILLISECONDS: Milliseconds
        """
        ...
    @constants.maskargs
    def setTimeInclusion(
        self, time_inclusion
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapTime.setTimeInclusion(time_inclusion)


        The setTimeInclusion method controls how  the currentTimeStart and the
        currentTimeEnd are included in the current time span.


        time_inclusion(String):
        A string that specifies a valid time inclusion value.

        * INCLUDE_ONLY_START: Include start time, exclude end time.

        * INCLUDE_ONLY_END: Exclude start time, include end time.

        * INCLUDE_START_AND_END: Include both start and end times.

        * EXCLUDE_START_AND_END: Exclude both start and end times.
        """
        ...

class PictureElement(_ObjectWithoutInitCall):
    """Provides access to picture properties that enable the repositioning of a
    picture on the page layout as well as getting and setting its data
    source."""

    elementHeight = ...
    elementPositionX = ...
    elementPositionY = ...
    elementRotation = ...
    elementWidth = ...
    locked = ...
    name = ...
    sourceImage = ...
    type = ...
    visible = ...

class Table(_ObjectWithoutInitCall):
    """Table(table_data_source)


    Enables you to reference a table in a workspace so that it can be added
    to a Map .


    table_data_source(String):
    A string that includes the full workspace path, including the name of the
    table.  For SDE tables, the workspace path is the path to an SDE
    connection file.
    """

    connectionProperties = ...
    dataSource = ...
    definitionQuery = ...
    isBroken = ...
    name = ...
    longName = ...
    metadata = ...
    URI = ...
    def getSelectionSet(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Table.getSelectionSet()


        Returns a table's selection as a Python set of Object IDs.
        """
        ...
    @constants.maskargs
    def setSelectionSet(
        self, oidList=..., method=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Table.setSelectionSet({oidList}, {method})


        Sets a table's selection using a Python list of Object IDs.


        oidList{List}:
        A Python list of Object IDs to use along with the appropriate selection
        method. The default value is None.


        method{String}:
        A string that specifies which selection method to use. The default value
        is NEW.

        * UNION: Selects all the records in both the current selection and those
        in the oidList.

        * NEW: Creates a new record selection from the oidList.

        * DIFFERENCE: Selects the records that are not in the current selection
        but are in the oidList.

        * SYMDIFFERENCE: Selects the records that are in the current selection
        or the oidList but not both.

        * INTERSECT: Selects the records that are in the current selection and
        the oidList.
        """
        ...
    def updateConnectionProperties(
        self,
        current_connection_info,
        new_connection_info,
        auto_update_joins_and_relates=...,
        validate=...,
        ignore_case=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Table.updateConnectionProperties(current_connection_info,
        new_connection_info, {auto_update_joins_and_relates}, {validate},
        {ignore_case})


        The updateConnectionProperties method replaces connection properties
        using a dictionary or a path to a workspace.


        current_connection_info(String):
        A string that represents the workspace path or a Python dictionary that
        contains connection properties to the source you want to update. If an
        empty string or None is used in current_connection_info, all connection
        properties will be replaced with the new_workspace_info, depending on
        the value of the validate parameter.


        new_connection_info(String):
        A string that represents the workspace path or a Python dictionary that
        contains connection properties with the new source information.


        auto_update_joins_and_relates{Boolean}:
        If  set to True, the updateConnectionProperties method will also update
        the connections for associated joins or relates. The default value is
        True.


        validate{Boolean}:
        If  set to True, the connection properties will only be updated if the
        new_connection_info value is a valid connection.  If it is not valid,
        the connection will not be replaced.   If set to False, the method will
        set all connections to match the new_connection_info value, regardless
        of a valid match.  In this case, if a match does not exist, the data
        sources would be broken. The default value is True.


        ignore_case{Boolean}:
        Determines whether searches will be case sensitive. By default, queries
        are case sensitive. To perform queries that are not case sensitive, set
        ignore_case to True. The default value is False.
        """
        ...
    def updateDefinitionQueries(
        self, definitionQueries
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Table.updateDefinitionQueries(definitionQueries)


        Updates a table's collection of definition queries.


        definitionQueries(List):
        Updates a list of dictionaries that represent the properties of each
        definition query for a table.
        """
        ...
    def listDefinitionQueries(
        self, wildcard=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Table.listDefinitionQueries({wildcard})


        Returns a Python list of definition queries associated with a table.


        wildcard{String}:
        A wildcard is based on the query name and is not case sensitive.  A
        combination of asterisks (*) and characters can be used to limit the
        resulting list. The default value is None.
        """
        ...
    def __init__(self, table_data_source) -> None:
        """Table(table_data_source)


        Enables you to reference a table in a workspace so that it can be added to a Map .


        table_data_source(String):
        A string that includes the full workspace path, including the name of the table.
        For SDE tables, the workspace path is the path to an SDE connection file.
        """
        ...
    def __str__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    @constants.maskargs
    def getDefinition(self, cim_version):  # -> Any | list[Unknown] | None:
        """Table.getDefinition(cim_version)


        Gets a table's CIM definition.


        cim_version(String):
        A string that represents the major version of the CIM.
        """
        ...
    @constants.maskargs
    def setDefinition(
        self, definition_object
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Table.setDefinition(definition_object)


        Sets a table's CIM definition.


        definition_object(Object):
        A modified CIM definition object originally retrieved using
        getDefinition.
        """
        ...
    def saveACopy(
        self, file_name
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Table.saveACopy(file_name)


        Saves a table to a layer file (.lyrx).


        file_name(String):
        A string that includes the location and name of the output layer file
        (.lyrx).
        """
        ...

class TextElement(_ObjectWithoutInitCall):
    """The TextElement object provides access to properties that enable its
    repositioning on the page layout as well as modifying the text string and
    font size."""

    elementHeight = ...
    elementPositionX = ...
    elementPositionY = ...
    elementRotation = ...
    elementWidth = ...
    locked = ...
    textAngle = ...
    textSize = ...
    name = ...
    text = ...
    type = ...
    visible = ...
    def clone(
        self, suffix=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """TextElement.clone({suffix})


        Provides a mechanism to clone an existing  text element on a page
        layout.


        suffix{String}:
        An optional string that is used to tag each newly created text element.
        The new element gets the same element name as the parent text element,
        plus the suffix value, plus a numeric sequencer.  For example, if the
        parent element name is FieldLabel and the suffix value is _copy, the
        newly cloned elements are named  FieldLabel_copy, FieldLabel_copy_1,
        FieldLabel_copy_2, and so on.  If a suffix is not provided, the results
        resemble FieldLabel_1, FieldLabel_2, FieldLabel_3, and so on.
        """
        ...
    def delete(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """TextElement.delete()


        Provides a mechanism to delete an existing text element on a page
        layout.
        """
        ...

class MapView(_ObjectWithoutInitCall):
    """The MapView."""

    camera = ...
    map = ...
    @constants.maskargs
    def exportToAIX(
        self,
        out_aix,
        width,
        height,
        resolution=...,
        image_quality=...,
        compress_vector_graphics=...,
        image_compression=...,
        jpeg_compression_quality=...,
        embed_fonts=...,
        embed_color_profile=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.exportToAIX(out_aix, width, height, {resolution},
        {image_quality}, {compress_vector_graphics}, {image_compression},
        {jpeg_compression_quality}, {embed_fonts}, {embed_color_profile})


        Exports the MapView to Adobe Illustrator Exchange (AIX) format. AIX
        files can be used with the ArcGIS Maps for Adobe Creative Cloud
        extension or Adobe Illustrator.


        out_aix(String):
        A string that represents the path and file name for the output export
        file.


        width(Integer):
        A number that defines the width of the export in pixels.


        height(Integer):
        A number that defines the height of the export in pixels.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 300.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2

        * NORMAL: An output image quality resample ratio of 3

        * FASTEST: An output image quality resample ratio of 5

        * BEST: An output image quality resample ratio of 1

        * FASTER: An output image quality resample ratio of 4


        compress_vector_graphics{Boolean}:
        A Boolean that controls compression of vector and text portions of the
        output file. Image compression is defined separately. The default value
        is True.


        image_compression{String}:
        A string that specifies the compression scheme used to compress image or
        raster data in the output file. The default value is ADAPTIVE.

        * DEFLATE: A lossless data compression.

        * NONE: Compression is not applied.

        * RLE: Run-length encoded compression.

        * JPEG: A lossy data compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.

        * ADAPTIVE: Automatically selects the best compression type for each
        image on the page.   JPEG will be used for large images with many unique
        colors.  DEFLATE will be used for all other images.


        jpeg_compression_quality{Integer}:
        A number that controls compression quality value when image_compression
        is set to ADAPTIVE or JPEG. The valid range is 1 through 100.    A
        jpeg_compression_quality of 100 provides the best quality images but
        creates large export files.   The recommended range is between 70 and
        90. The default value is 80.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in the export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.
        """
        ...
    @constants.maskargs
    def exportToBMP(
        self,
        out_bmp,
        width,
        height,
        resolution=...,
        world_file=...,
        bmp_color_mode=...,
        bmp_image_compression=...,
        embed_color_profile=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.exportToBMP(out_bmp, width, height, {resolution}, {world_file},
        {bmp_color_mode}, {bmp_image_compression}, {embed_color_profile})


        Exports the MapView to a Microsoft Windows Bitmap (BMP) format file.


        out_bmp(String):
        A string that represents the path and file name of the output export
        file.


        width(Integer):
        A number that defines the width of the export in pixels.


        height(Integer):
        A number that defines the height of the export in pixels.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        world_file{Boolean}:
        If set to True, a georeferenced world file is created. The file contains
        pixel scale information and real-world coordinate information. The
        default value is False.


        bmp_color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 24-BIT_TRUE_COLOR.

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 24-BIT_TRUE_COLOR: 24-bit true color


        bmp_image_compression{String}:
        A string that specifies the compression scheme used to compress image or
        raster data in the output file.  This option only applies to 8-bit
        bmp_color_mode options. The default value is NONE.

        * RLE: Run-length encoded compression.

        * NONE: Compression is not applied.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.
        """
        ...
    @constants.maskargs
    def exportToEMF(
        self,
        out_emf,
        width,
        height,
        resolution=...,
        image_quality=...,
        output_as_image=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.exportToEMF(out_emf, width, height, {resolution},
        {image_quality}, {output_as_image})


        Exports the MapView to an Enhanced Metafile (EMF) format file.


        out_emf(String):
        A string that represents the system path and file name of the output
        export file.


        width(Integer):
        A number that defines the width of the export in pixels.


        height(Integer):
        A number that defines the height of the export in pixels.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2

        * NORMAL: An output image quality resample ratio of 3

        * FASTEST: An output image quality resample ratio of 5

        * BEST: An output image quality resample ratio of 1

        * FASTER: An output image quality resample ratio of 4


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToEPS(
        self,
        out_eps,
        width,
        height,
        resolution=...,
        image_compression=...,
        image_quality=...,
        embed_fonts=...,
        output_as_image=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.exportToEPS(out_eps, width, height, {resolution},
        {image_compression}, {image_quality}, {embed_fonts}, {output_as_image})


        Exports the MapView to an Encapsulated PostScript (EPS) format file.


        out_eps(String):
        A string that represents the system path and file name of the output
        export file.


        width(Integer):
        A number that defines the width of the export in pixels.


        height(Integer):
        A number that defines the height of the export in pixels.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        image_compression{String}:
        A string that specifies the compression scheme used to compress image or
        raster data in the output file. The default value is DEFLATE.

        * RLE: Run-length encoded compression.

        * NONE: Compression is not applied.

        * DEFLATE: A lossless data compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2.

        * NORMAL: An output image quality resample ratio of 3.

        * FASTEST: An output image quality resample ratio of 5.

        * BEST: An output image quality resample ratio of 1.

        * FASTER: An output image quality resample ratio of 4.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in the export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToGIF(
        self, out_gif, width, height, resolution=..., world_file=..., gif_color_mode=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.exportToGIF(out_gif, width, height, {resolution}, {world_file},
        {gif_color_mode})


        Exports the MapView to a Graphic Interchange Format (GIF) file.


        out_gif(String):
        A string that represents the system path and file name of the output
        export file.


        width(Integer):
        A number that defines the width of the export in pixels.


        height(Integer):
        A number that defines the height of the export in pixels.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        world_file{Boolean}:
        If set to True, a georeferenced world file is created. The file contains
        pixel scale information and real-world coordinate information. The
        default value is False.


        gif_color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 8-BIT_PALETTE.

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 8-BIT_PALETTE: 8-bit adaptive palette
        """
        ...
    @constants.maskargs
    def exportToJPEG(
        self,
        out_jpg,
        width,
        height,
        resolution=...,
        world_file=...,
        jpeg_color_mode=...,
        jpeg_quality=...,
        embed_color_profile=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.exportToJPEG(out_jpg, width, height, {resolution}, {world_file},
        {jpeg_color_mode}, {jpeg_quality}, {embed_color_profile})


        Exports the MapView to a Joint Photographic Experts Group (JPEG) format
        file.


        out_jpg(String):
        A string that represents the path and file name of the output export
        file.


        width(Integer):
        A number that defines the width of the export in pixels.


        height(Integer):
        A number that defines the height of the export in pixels.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        world_file{Boolean}:
        If set to True, a georeferenced world file is created. The file contains
        pixel scale information and real-world coordinate information.  If you
        export a 3D map frame, this parameter will be ignored regardless of the
        setting, because world files are not applicable to 3D views. The default
        value is False.


        jpeg_color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 24-BIT_TRUE_COLOR.

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 24-BIT_TRUE_COLOR: 24-bit true color


        jpeg_quality{Integer}:
        This value (0–100) controls the amount of compression applied to the
        output image. For JPEG, image quality is adversely affected the more
        compression is applied. A higher quality (highest = 100) setting will
        produce sharper images and larger file sizes. A lower quality setting
        will produce more image artifacts and smaller files. The default value
        is 80.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.
        """
        ...
    @constants.maskargs
    def exportToPDF(
        self,
        out_pdf,
        width,
        height,
        resolution=...,
        image_quality=...,
        compress_vector_graphics=...,
        image_compression=...,
        embed_fonts=...,
        layers_attributes=...,
        georef_info=...,
        jpeg_compression_quality=...,
        output_as_image=...,
        embed_color_profile=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.exportToPDF(out_pdf, width, height, {resolution},
        {image_quality}, {compress_vector_graphics}, {image_compression},
        {embed_fonts}, {layers_attributes}, {georef_info},
        {jpeg_compression_quality}, {output_as_image}, {embed_color_profile})


        Exports the MapView  to a Portable Document Format (PDF) file.


        out_pdf(String):
        A string that represents the path and file name of the output export
        file.


        width(Integer):
        A number that defines the width of the export in pixels.


        height(Integer):
        A number that defines the height of the export in pixels.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 300.


        image_quality{String}:
        A string that defines the output image quality and the draw resolution
        of map layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2

        * NORMAL: An output image quality resample ratio of 3

        * FASTEST: An output image quality resample ratio of 5

        * BEST: An output image quality resample ratio of 1

        * FASTER: An output image quality resample ratio of 4


        compress_vector_graphics{Boolean}:
        A Boolean that controls the compression of vector and text portions of
        the output file. Image compression is defined separately. The default
        value is True.


        image_compression{String}:
        A string that defines the compression scheme used to compress image or
        raster data in the output file. The default value is ADAPTIVE.

        * DEFLATE: A lossless data compression.

        * NONE: Compression is not applied.

        * RLE: Run-length encoded compression.

        * JPEG: A lossy data compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.

        * ADAPTIVE: Automatically selects the best compression type for each
        image on the page.   JPEG will be used for large images with many unique
        colors.  DEFLATE will be used for all other images.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in the export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        layers_attributes{String}:
        A string that controls the inclusion of PDF layers and PDF object data
        (attributes) in the export file. The default value is LAYERS_ONLY.

        * LAYERS_ONLY: Export PDF layers only.

        * LAYERS_AND_ATTRIBUTES: Export PDF layers and feature attributes.

        * NONE: None.


        georef_info{Boolean}:
        A Boolean that enables the export of coordinate system information for
        each data frame into the output PDF file. The default value is True.


        jpeg_compression_quality{Integer}:
        A number that controls the compression quality value when
        image_compression is set to ADAPTIVE or JPEG. The valid range is 1
        through 100.    A jpeg_compression_quality of 100 provides the best
        quality images but creates large export files.   The recommended range
        is 70 through 90. The default value is 80.


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.
        """
        ...
    @constants.maskargs
    def exportToPNG(
        self,
        out_png,
        width,
        height,
        resolution=...,
        world_file=...,
        color_mode=...,
        embed_color_profile=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.exportToPNG(out_png, width, height, {resolution}, {world_file},
        {color_mode}, {embed_color_profile})


        Exports the MapView to a Portable Network Graphics (PNG) format file.


        out_png(String):
        A string that represents the path and file name of the output export
        file.


        width(Integer):
        A number that defines the width of the export in pixels.


        height(Integer):
        A number that defines the height of the export in pixels.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        world_file{Boolean}:
        If set to True, a georeferenced world file is created. The file contains
        pixel scale information and real-world coordinate information.  If you
        export a 3D map frame, this parameter will be ignored regardless of the
        setting, because world files are not applicable to 3D views. The default
        value is False.


        color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 32-BIT_WITH_ALPHA.

        * 32-BIT_WITH_ALPHA: 32-bit with alpha

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 24-BIT_TRUE_COLOR: 24-bit true color


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.
        """
        ...
    @constants.maskargs
    def exportToSVG(
        self,
        out_svg,
        width,
        height,
        resolution=...,
        compress_to_svgz=...,
        image_quality=...,
        embed_fonts=...,
        output_as_image=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.exportToSVG(out_svg, width, height, {resolution},
        {compress_to_svgz}, {image_quality}, {embed_fonts}, {output_as_image})


        Exports the MapView to a Scalable Vector Graphics (SVG) format file.


        out_svg(String):
        A string that represents the path and file name of the output export
        file.


        width(Integer):
        A number that defines the width of the export in pixels.


        height(Integer):
        A number that defines the height of the export in pixels.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        compress_to_svgz{Boolean}:
        If set to True, the output is compressed. The default value is False.


        image_quality{String}:
        A string that specifies output image quality, the draw resolution of map
        layers that draw as rasters. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2.

        * NORMAL: An output image quality resample ratio of 3.

        * FASTEST: An output image quality resample ratio of 5.

        * BEST: An output image quality resample ratio of 1.

        * FASTER: An output image quality resample ratio of 4.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in the export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.
        """
        ...
    @constants.maskargs
    def exportToTGA(
        self, out_tga, width, height, resolution=..., world_file=..., color_mode=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.exportToTGA(out_tga, width, height, {resolution}, {world_file},
        {color_mode})


        Exports the MapView to a Truevision Graphics Adapter (TGA) format file.


        out_tga(String):
        A string that represents the path and file name of the output export
        file.


        width(Integer):
        A number that defines the width of the export in pixels.


        height(Integer):
        A number that defines the height of the export in pixels.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        world_file{Boolean}:
        If set to True, a georeferenced world file is created. The file contains
        pixel scale information and real-world coordinate information. The
        default value is False.


        color_mode{String}:
        This value specifies the number of bits used to describe color. The
        default value is 32-BIT_WITH_ALPHA.

        * 32-BIT_WITH_ALPHA: 32-bit with alpha

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette

        * 8-BIT_GRAYSCALE: 8-bit grayscale

        * 24-BIT_TRUE_COLOR: 24-bit true color
        """
        ...
    @constants.maskargs
    def exportToTIFF(
        self,
        out_tif,
        width,
        height,
        resolution=...,
        world_file=...,
        color_mode=...,
        tiff_compression=...,
        geoTIFF_tags=...,
        jpeg_compression_quality=...,
        embed_color_profile=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.exportToTIFF(out_tif, width, height, {resolution}, {world_file},
        {color_mode}, {tiff_compression}, {geoTIFF_tags},
        {jpeg_compression_quality}, {embed_color_profile})


        Exports the MapView to a Tagged Image File Format (TIFF) file.


        out_tif(String):
        A string that represents the path and file name of the output export
        file.


        width(Integer):
        A number that defines the width of the export in pixels.


        height(Integer):
        A number that defines the height of the export in pixels.


        resolution{Integer}:
        A number that defines the resolution of the export file in dots per inch
        (dpi). The default value is 96.


        world_file{Boolean}:
        If set to True, a georeferenced world file is created. The file contains
        pixel scale information and real-world coordinate information.  If you
        export a 3D map frame, this parameter will be ignored regardless of the
        setting, because world files are not applicable to 3D views. The default
        value is False.


        color_mode{String}:
        This value specifies the number of bits used to describe color. The
        available options are dependent on the specified Color Model set in the
        layout's Color Management properties. The default value is
        24-BIT_TRUE_COLOR.

        * 32-BIT_WITH_ALPHA: 32-bit with alpha. Available only to RGB.

        * 8-BIT_ADAPTIVE_PALETTE: 8-bit adaptive palette. Available to RGB and
        CMYK.

        * 40-BIT_CMYK_WITH_ALPHA: 40-bit CMYK with alpha. Available only to
        CMYK.

        * 24-BIT_TRUE_COLOR: 24-bit true color. Available only to RGB.

        * 32-BIT_CMYK_TRUE_COLOR: 32-bit CMYK true color. Available only to
        CMYK.

        * 8-BIT_GRAYSCALE: 8-bit grayscale. Available to RGB and CMYK.


        tiff_compression{String}:
        This value represents a compression scheme. The default value is LZW.

        * DEFLATE: A lossless data compression.

        * NONE: Compression is not applied.

        * JPEG: JPEG compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.

        * PACK_BITS: Pack bits compression.


        geoTIFF_tags{Boolean}:
        If set to True, georeferencing tags are included in the structure of the
        TIFF export file. The tags contain pixel scale information and real-
        world coordinate information. These tags can be read by applications
        that support the GeoTIFF format. The default value is False.


        jpeg_compression_quality{Integer}:
        This value (0–100) controls the amount of compression applied to the
        output image. With a JPEG image, quality is adversely affected the more
        compression is applied. A higher quality (highest = 100) setting will
        produce sharper images and larger file sizes. A lower quality setting
        will produce more image artifacts and smaller files. The default value
        is 80.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.
        """
        ...
    def getLayerExtent(
        self, layer, selection_only=..., symbolized_extent=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.getLayerExtent(layer, {selection_only}, {symbolized_extent})


        Returns a layer's extent for all features or only the selected features
        in a layer.


        layer(Layer):
        A reference to a Layer object.


        selection_only{Boolean}:
        If True, it returns the extent for selected features; if False, it
        returns the extent for all features. The default value is True.


        symbolized_extent{Boolean}:
        A value of True will return the layer's symbolized extent; otherwise, it
        will return the geometric extent.  The symbolized extent takes into
        account the area the symbology covers so that it does not get cut off by
        the data frame's boundary. The default value is True.
        """
        ...
    def panToExtent(
        self, extent
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.panToExtent(extent)


        Pans and centers the MapView using a new Extent object without changing
        the map view's scale.


        extent(Extent):
        A geoprocessing Extent object.
        """
        ...
    def zoomToBookmark(
        self, bookmark
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.zoomToBookmark(bookmark)


        Modifies the MapView view to match the view information stored with a
        spatial bookmark.


        bookmark(Bookmark):
        A reference to a Bookmark object.
        """
        ...
    def zoomToAllLayers(
        self, selection_only=..., symbolized_extent=...
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapView.zoomToAllLayers({selection_only}, {symbolized_extent})


        Modifies the MapView view to match the extent of all layers or selected
        layers in a map.


        selection_only{Boolean}:
        If True, it sets the extent based on the selected  features; if False,
        it sets the extent for all  features in a map. The default value is
        True.


        symbolized_extent{Boolean}:
        A value of True will return the layer's symbolized extent; otherwise, it
        will return the geometric extent.  The symbolized extent takes into
        account the area the symbology covers so that it does not get cut off by
        the map frame's boundary. The default value is True.
        """
        ...

class MapSeries(_ObjectWithoutInitCall):
    """MapSeries object provides access to properties."""

    currentPageNumber = ...
    mapFrame = ...
    indexLayer = ...
    pageCount = ...
    pageNameField = ...
    selectedIndexFeatures = ...
    enabled = ...
    @property
    def pageRow(self): ...
    @constants.maskargs
    def exportToPDF(
        self,
        out_pdf,
        page_range_type=...,
        page_range_string=...,
        multiple_files=...,
        resolution=...,
        image_quality=...,
        compress_vector_graphics=...,
        image_compression=...,
        embed_fonts=...,
        layers_attributes=...,
        georef_info=...,
        jpeg_compression_quality=...,
        clip_to_elements=...,
        show_selection_symbology=...,
        output_as_image=...,
        embed_color_profile=...,
        pdf_accessibility=...,
        show_export_count=...,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapSeries.exportToPDF(out_pdf, {page_range_type}, {page_range_string},
        {multiple_files}, {resolution}, {image_quality},
        {compress_vector_graphics}, {image_compression}, {embed_fonts},
        {layers_attributes}, {georef_info}, {jpeg_compression_quality},
        {clip_to_elements}, {show_selection_symbology}, {output_as_image},
        {embed_color_profile}, {pdf_accessibility}, {show_export_count})


        Exports a specified set of pages to a Portable Document Format (PDF)
        file for a layout that has map series enabled.


        out_pdf(String):
        A string that represents the path and file name of the output export
        file.


        page_range_type{String}:
        The string value that designates how the pages will be printed. The
        default value is ALL.

        * CURRENT: The active or current page is exported.

        * ALL: All pages are exported.

        * SELECTED: Selected index layer features/pages are exported.

        * RANGE: Only pages listed in the page_range_string parameter are
        exported.


        page_range_string{String}:
        A string that identifies the pages to be exported if the RANGE option in
        the page_range_type parameter is used (for example, 1, 3, 5-12).   If
        any other page_range_type value is used, the page_range_string value
        will be ignored.


        multiple_files{String}:
        A string that controls how the output PDF file is created.  By default,
        all pages are exported into a single, multipage document.  The default
        is PDF_SINGLE_FILE. The default value is PDF_SINGLE_FILE.

        * PDF_SINGLE_FILE: Export  into a multipage, single file document.

        * PDF_MULTIPLE_FILES_PAGE_NUMBER: Export  each map series page to an
        individual file and append the page number to the file name. For
        example, Output.PDF will become Output_1.PDF

        * PDF_MULTIPLE_FILES_PAGE_NAME: Export  each map series page to an
        individual file and append the page name to the file name.  For example,
        Output.PDF will become Output_LakeErie.PDF


        resolution{Integer}:
        An integer that defines the resolution of the export file in dots per
        inch (dpi). The default value is 96.


        image_quality{String}:
        A string that defines output image quality. The default value is BEST.

        * BETTER: An output image quality resample ratio of 2

        * NORMAL: An output image quality resample ratio of 3

        * FASTEST: An output image quality resample ratio of 5

        * BEST: An output image quality resample ratio of 1

        * FASTER: An output image quality resample ratio of 4


        compress_vector_graphics{Boolean}:
        A Boolean that controls the compression of vector and text portions of
        the output file. Image compression is defined separately. The default
        value is True.


        image_compression{String}:
        A string that defines the compression scheme used to compress image or
        raster data in the output file. The default value is ADAPTIVE.

        * NONE: Compression is not applied.

        * RLE: Run-length encoded compression.

        * JPEG: A lossy data compression.

        * LZW: Lempel-Ziv-Welch, a lossless data compression.

        * DEFLATE: A lossless data compression.

        * ADAPTIVE: Automatically selects the best compression type for each
        image on the page.   JPEG will be used for large images with many unique
        colors.  DEFLATE will be used for all other images.


        embed_fonts{Boolean}:
        A Boolean that controls the embedding of fonts in an export file. Font
        embedding allows text and character markers to be displayed correctly
        when the document is viewed on a computer that does not have the
        necessary fonts installed. The default value is True.


        layers_attributes{String}:
        A string that controls the inclusion of PDF layers and PDF object data
        (attributes) in the export file. The default value is LAYERS_ONLY.

        * LAYERS_ONLY: Export PDF layers only.

        * LAYERS_AND_ATTRIBUTES: Export PDF layers and feature attributes.

        * NONE: No setting is applied.


        georef_info{Boolean}:
        A Boolean that enables the export of coordinate system information for
        each map frame into the output PDF file. The default value is True.


        jpeg_compression_quality{Integer}:
        A number that controls the compression quality value when
        image_compression is set to ADAPTIVE or JPEG. The valid range is 1
        through 100.    A jpeg_compression_quality of 100 provides the best
        quality images but creates large export files.   The recommended range
        is 70 through 90. The default value is 80.


        clip_to_elements{Boolean}:
        If set to True, the layout is clipped to the smallest bounding box that
        includes all layout elements. The default value is False.


        show_selection_symbology{Boolean}:
        A Boolean that controls whether the selection symbology should be
        displayed in the output. The default value is False.


        output_as_image{Boolean}:
        If set to True, vector content  can be saved as an image.  Selecting
        this option for maps or layouts that contain vector layers with a high
        density of vertices can reduce the output file size.  When exporting to
        PDF and this option is set to True, you cannot view PDF layers in the
        output. The default value is False.


        embed_color_profile{Boolean}:
        If set to True, color profile information is embedded in the image's
        metadata. The default value is True.


        pdf_accessibility{Boolean}:
        Output a tagged PDF file where text can be read by screen readers or
        other assistive technology.  A tagged PDF file can include alt text—a
        text
        description of a graphic element that a screen reader uses to
        describe the element—for map frames, pictures, and chart frames.
        Alt text is added in the
        Element Pane
         for each element. The default value is False.


        show_export_count{Boolean}:
        If set to True, you will see the status of each page being exported
        displayed in the Python shell. The default value is False.
        """
        ...
    def getPageNumberFromName(
        self, page_name
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapSeries.getPageNumberFromName(page_name)


        Returns a Map Series page number based on the name of the page.


        page_name(String):
        A page number in the index layer that corresponds to the Name field that
        was used to set up the Map Series.
        """
        ...
    def refresh(
        self,
    ):  # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """MapSeries.refresh()


        Refreshes an existing map series.
        """
        ...

ob_conversion = ...
