"""
This type stub file was generated by pyright.
"""

__all__ = ["PDFDocument", "PDFDocumentOpen", "PDFDocumentCreate"]
RANGE_RE = ...

def page_range_list(range_string): ...

class PDFDocument:
    """Allows for the management of PDF documents, including facilities for
    merging and deleting pages, setting document open behavior, and creating
    or changing document security settings."""

    _open = ...
    _decrypt = ...
    _decrypt_key = ...
    _ID = ...
    _password = ...
    _owner_password = ...
    def __init__(self, pdf_path, input_pdf_password=..., open_new=...) -> None:
        """PDFDocument(pdf_path)

        Creates an empty PDFDocument object in memory.

          pdf_path(String):
        A string that specifies the  path and file name for the resulting PDF
        file when the saveAndClose method is called."""
        ...
    def appendPages(self, pdf_path, input_pdf_password=...):  # -> None:
        """PDFDocument.appendPages(pdf_path, {input_pdf_password})

        Appends one PDF document to the end of another.

          pdf_path(String):
        A string that includes the location and name of the input PDF
        document to be appended.

          input_pdf_password{String}:
        A string that defines the master password to a protected file.  It
        must be a master password; a user password will not work."""
        ...
    def deletePages(self, page_range):  # -> None:
        """PDFDocument.deletePages(page_range)

        Provides the ability to delete one or multiple pages within an
        existing PDF document.

          page_range(String):
        A string that defines the page or pages to be deleted.  Delete a
        single page by passing in a single value as a string (for example,
        "3" ). Multiple pages can be deleted using a comma between each value
        (for example, "3, 5, 7" ).  Ranges can also be applied (for example,
        "1, 3, 5-12" )."""
        ...
    def insertPages(
        self, pdf_path, before_page_number=..., input_pdf_password=...
    ):  # -> None:
        """PDFDocument.insertPages(pdf_path, {before_page_number},
        {input_pdf_password})

        Allows inserting the contents of one PDF document at the beginning or
        in between the pages of another  PDFDocument.

          pdf_path(String):
        A string that includes the location and name of the input PDF
        document to be inserted.

          before_page_number{Integer}:
        An integer that defines a page number in the currently referenced
        PDFDocument before which the new pages will be inserted.  For
        example, if the before_page_value is 1, the inserted page will be
        inserted before all pages.

          input_pdf_password{String}:
        A string that defines the master password to a protected file.   It
        must be a master password; a user password will not work."""
        ...
    def saveAndClose(self):  # -> None:
        """PDFDocument.saveAndClose()

        Saves any changes made to the currently referenced PDFDocument ."""
        ...
    def updateDocProperties(
        self,
        pdf_title=...,
        pdf_author=...,
        pdf_subject=...,
        pdf_keywords=...,
        pdf_open_view=...,
        pdf_layout=...,
    ):  # -> None:
        """PDFDocument.updateDocProperties({pdf_title}, {pdf_author},
        {pdf_subject}, {pdf_keywords}, {pdf_open_view}, {pdf_layout})

        Allows updating of the PDF document metadata and can also set the
        certain behaviors that will trigger when the document is opened in
        Adobe Reader or Adobe Acrobat, such as the initial view mode and the
        page thumbnails view.

          pdf_title{String}:
        A string defining the document title, a PDF metadata property.

          pdf_author{String}:
        A string defining the document author, a PDF metadata property.

          pdf_subject{String}:
        A string defining the document subject, a PDF metadata property.

          pdf_keywords{String}:
        A string defining the document keywords, a PDF metadata property.

          pdf_open_view{String}:
        A string or number that will define the behavior to trigger when the
        PDF file is viewed. The default value is USETHUMBS, which will show
        the Adobe Reader Pages panel automatically when the PDF is opened.

         * VIEWER_DEFAULT:   Uses the application user preference when
         opening the file

         * USE_NONE:   Displays the document only; does not show other panels

         * USE_THUMBS:   Displays the document plus the Pages panel

         * USE_BOOKMARKS:   Displays the document plus the Bookmarks panel

         * FULL_SCREEN:   Displays the document  in full-screen viewing mode

         * LAYERS:   Displays the document plus the layers panel

         * ATTACHMENT:   Displays the document plus the attachment panel

          pdf_layout{String}:
        A string or number that will define the initial view mode to trigger
        when the PDF file is viewed.

         * DONT_CARE:   Uses the application user preference when opening the
         file

         * SINGLE_PAGE:   Uses single-page mode

         * ONE_COLUMN:   Uses one-column continuous mode

         * TWO_COLUMN_LEFT:   Uses two-column continuous mode with first page
         on left

         * TWO_COLUMN_RIGHT:   Uses two-column continuous mode with first
         page on right

         * TWO_PAGE_LEFT:   Uses two-page mode left

         * TWO_PAGE_RIGHT:   Uses two-page mode right"""
        ...
    def updateDocSecurity(
        self, new_master_password, new_user_password=..., encryption=...
    ):  # -> None:
        """PDFDocument.updateDocSecurity(new_master_password,
        {new_user_password}, {encryption})

        Provides the mechanism that sets password, encryption, and security
        restrictions on PDF files.

          new_master_password(String):
        A string that defines the master document password. This password is
        required for appending and inserting pages into a secured PDF.

          new_user_password{String}:
        A string that defines the user password needed to open the PDF
        document for viewing.

          encryption{String}:
        A string  that defines the encryption technique used on the PDF.
        This is the only encryption type supported.

         * "RC4":  Uses 128-bit RC4 encryption (Acrobat 5.0 compatible)"""
        ...
    @property
    def pageCount(self): ...

def PDFDocumentOpen(
    pdf_path, user_password=..., master_password=...
):  # -> PDFDocument:
    """PDFDocumentOpen(pdf_path, {user_password}, {master_password})

    Returns a reference to  an existing PDFDocument file on disk.

      pdf_path(String):
    A string that specifies the path and file name of the PDF file to open.

      user_password{String}:
    A string that specifies the user password. The user password, if set, is
    what you need to provide in order to open a PDF.

      master_password{String}:
    A string that specifies the master password. The master password, if set,
    controls permissions, such as printing, editing, extracting, commenting,
    and so on."""
    ...

def PDFDocumentCreate(pdf_path):  # -> PDFDocument:
    """PDFDocumentCreate(pdf_path)

    Creates a new PDFDocument object in memory.

      pdf_path(String):
    A string that specifies the  path and file name for the resulting PDF
    file when the saveAndClose method is called."""
    ...
