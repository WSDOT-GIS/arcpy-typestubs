"""
This type stub file was generated by pyright.
"""

from arcpy.arcobjects._base import _ObjectWithoutInitCall

class ConfigItem:
    def __init__(self, data) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


class ActivityType(ConfigItem):
    """The ActivityType object provides access to the  activity type
       configuration element in the Workflow Manager database."""
    def __repr__(self): # -> LiteralString:
        ...
    


class HoldType(ConfigItem):
    """The HoldType object
       provides access to the hold types configuration element in the Workflow
       Manager database."""
    def __repr__(self): # -> LiteralString:
        ...
    


class JobType(ConfigItem):
    """The JobType object provides access to the job types in the Workflow
       Manager database."""
    def __repr__(self): # -> LiteralString:
        ...
    


class JobTypeDescription:
    """The JobTypeDescription provides access to
       job type properties that can be customized before creating a job."""
    def __init__(self, data=...) -> None:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


class Priority:
    """The Priority object provides access to a priority configuration element
       in the Workflow Manager database."""
    def __init__(self, data) -> None:
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


class StatusType:
    """The StatusType object provides access to the status type configuration
       elements in the Workflow Manager database."""
    def __init__(self, data) -> None:
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


class Attachment:
    """The Attachment object provides access to the attachments associated with
       the job."""
    def __init__(self, data) -> None:
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


class QueryResult:
    """The QueryResult object provides access to the job query results returned
       by  the queryJobs method."""
    def __init__(self, xml) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


class QueryField:
    """The QueryField object exposes properties detailing a field returned by
       the queryJobs method."""
    def __init__(self, fieldInfo) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


class QueryRow:
    """The QueryRow object provides access to all the values in a row from the
       result of  the queryJobs method."""
    def __init__(self, rowInfo, fields) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __iter__(self): # -> Generator[datetime | int | Unknown | None, Any, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __getitem__(self, item): # -> datetime | int | None:
        ...
    
    def __contains__(self, item): # -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


class Workflow:
    """The Workflow object provides access to properties to interact with the
       Workflow Manager workflow of a job."""
    def __init__(self, workflowDict) -> None:
        ...
    
    def __repr__(self): # -> str | LiteralString:
        ...
    


def Connect(jtc_path=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
    """Connect({jtc_path})

       Establishes a connection to a Workflow Manager database.

         jtc_path{String}:
       The path to the Workflow Manager  .jtc connection file. If no file is
       specified, the current Workflow Manager connection in the Project will be
       used."""
    ...

class ExtendedProperty(_ObjectWithoutInitCall):
    """The ExtendedProperty object provides access to properties of the extended
       property row associated with the job."""
    name = ...
    alias = ...
    cardinality = ...
    jobID = ...
    def __getitem__(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    def __len__(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    def __iter__(self): # -> Generator[Unknown | conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown], Any, None]:
        ...
    


class ExtendedPropertyValue(_ObjectWithoutInitCall):
    """ArcPy class that provides access to the individual cell for extended and
       linked properties associated with the job."""
    data = ...
    canUpdate = ...
    displayOrder = ...
    displayType = ...
    domain = ...
    filter = ...
    ID = ...
    length = ...
    propAlias = ...
    propName = ...
    required = ...
    tableListClass = ...
    tableListDisplayField = ...
    tableListStoreField = ...
    userVisible = ...


class Job(_ObjectWithoutInitCall):
    """The Job object provides access to properties and methods to interact with
       a Workflow Manager job."""
    name = ...
    ID = ...
    assignedTo = ...
    assignedType = ...
    createdBy = ...
    createdDate = ...
    status = ...
    percentComplete = ...
    jobTypeID = ...
    owner = ...
    parent = ...
    startDate = ...
    dueDate = ...
    startedDate = ...
    endDate = ...
    versionName = ...
    parentVersion = ...
    description = ...
    priority = ...
    versionExists = ...
    currentSteps = ...
    hasAOI = ...
    notes = ...
    hasLOI = ...
    def save(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.save()

           Saves any changes made to the job back to the Workflow Manager
           database."""
        ...
    
    def getPendingDays(self, consider_holds): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.getPendingDays(consider_hold)

           Returns the number of days that the job has been pending. This can
           also optionally consider the holds and subtract them from the number
           of days the job was pending.

             consider_hold(Boolean):
           Flag to determine whether to consider the holds when calculating the
           number of pending days."""
        ...
    
    def setDataWorkspace(self, data_workspace_id): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.setDataWorkspace(data_workspace_id)

           Sets the data workspace for the job.

             data_workspace_id(String):
           The GUID of the data workspace to be made active for the job."""
        ...
    
    def setAOI(self, aoi): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.setAOI(aoi)

           Sets the area of interest (AOI) polygon for the job.

           This method has been deprecated. Use setLOI instead.

             aoi(Geometry):
           The AOI polygon to be assigned to the job."""
        ...
    
    def setLOI(self, loi): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.setLOI(loi)

           Sets the location of interest (LOI) for the job. The LOI can be
           either a point (POI) or polygon (AOI).

             loi(Geometry):
           The point or polygon to be assigned as the location of interest for
           the job."""
        ...
    
    def listExtendedProperties(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.listExtendedProperties()

           Lists the fully qualified name of all extended property and linked
           property tables associated with the job."""
        ...
    
    def getExtendedPropertyTable(self, tableName): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.getExtendedPropertyTable(tableName)

           Returns a single extended property table based on its fully qualified
           table name.

             tableName(String):
           The fully qualified table
           name of the extended property table to be returned."""
        ...
    
    def __repr__(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    def executeStep(self, step_id=..., callback=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.executeStep({step_id}, {callback})

           Executes a step in the workflow.

             step_id{Integer}:
           The ID of the step to be executed. The step ID is optional; if a step
           ID is not provided, the current step will be executed.

             callback{Function}:
           The callback argument passes a function that prompts the user for a
           response based on input from the step type. When executing a question
           step, for example, the callback takes the possible step response
           options and allows the user to choose the next step. It is also used
           when the next step in the workflow cannot be determined so a user can
           select the path to follow."""
        ...
    
    def markStepAsComplete(self, step_id=..., callback=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.markStepAsComplete({step_id}, {callback})

           Marks a step in the workflow as complete.

             step_id{Integer}:
           The ID of the step to be marked as complete.
           The step ID is optional; if a step ID is not provided, the current
           step will be executed.

             callback{Function}:
           The callback argument passes a function that prompts the user for a
           response based on input from the step type. When marking a question
           step complete, for example, the callback takes the possible step
           response options and allows the user to choose the next step. It is
           also used when the next step in the workflow cannot be determined so
           a user can select the path to follow."""
        ...
    
    def setStepAsCurrent(self, step_id): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.setStepAsCurrent(step_id)

           Sets a step in the workflow as the current active step.

             step_id(Integer):
           The ID of the step to be set as the current step."""
        ...
    
    def getWorkflow(self): # -> Workflow | None:
        """Job.getWorkflow(jobID)

           Returns a job's Workflow using the job ID.

             jobID(Integer):
           The ID of the job."""
        ...
    
    def getAttachments(self): # -> list[Attachment]:
        """Job.getAttachments()

           Returns all attachments associated with the job as  a list of
           Attachment objects."""
        ...
    
    def addAttachment(self, storage_type, source_location): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.addAttachment(storage_type, source_location)

           Adds an attachment to the job.

             storage_type(String):
           The type of attachment to be added.

            * EMBEDDED: The file is stored in the Workflow Manager database.

            * LINKED: The link to the file path is stored in the Workflow
            Manager database.

            * URL: The URL link is stored in the database.

             source_location(String):
           The file path or URL for the attachment to be added."""
        ...
    
    def deleteAttachment(self, attachment_id): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.deleteAttachment(attachment_id)

           Deletes an attachment associated with the job.

             attachment_id(Integer):
           The ID of the attachment to be deleted."""
        ...
    
    def retrieveAttachment(self, attachment_id, destination_location): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.retrieveAttachment(attachment_id, destination_location)

           Retrieves the file attachments
           associated with the job to a location on disk.

             attachment_id(Integer):
           The ID of the attachment to be retrieved.

             destination_location(String):
           The folder location where the attachment will be stored. A name for
           the file to be saved with or without the file extension can also be
           provided. If no name is provided, the attachment is saved with the
           default name stored with the job."""
        ...
    
    def getHolds(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.getHolds()

           Returns the holds associated with the job as a  list of Hold objects."""
        ...
    
    def releaseHold(self, hold, comment=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.releaseHold(hold, {comment})

           Releases the hold associated with a job and marks it as an inactive
           hold.

             hold(Hold):
           The hold to be released provided as a Hold object.

             comment{String}:
           The comment to be stored as a reason for releasing the hold."""
        ...
    
    def addHold(self, hold_type_id, comment=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.addHold(hold_type_id, {comment})

           Adds a hold to
           a job to suspend job activity.

             hold_type_id(Integer):
           The ID of the hold type template to be used to create the job hold.

             comment{String}:
           The comment to be stored as a reason for adding the hold."""
        ...
    
    def addDependency(self, depends_on_job_id, held_on_type=..., held_on_value=..., dependent_on_type=..., dependent_on_value=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.addDependency(depends_on_job_id, {held_on_type}, {held_on_value},
           {dependent_on_type}, {dependent_on_value})

           Adds a dependency to
           a job to restrict progression of the job past a certain point until
           another job has progressed past a given point.

             depends_on_job_id(Integer):
           ID of the job on which the current job will depend.

             held_on_type{String}:
           Indicates whether the current job (to which the dependency is being
           added) will be held at a step or status.
           When the job is held at a step, the step cannot be executed until the
           dependency is released. When the job is held at a status, the job's
           status cannot change until the dependency is released. The dependency
           is released when the other job reaches the step or status as defined
           in the dependency criteria.

             held_on_value{Variant}:
           The value of the step or status at which the current job will be
           held. This value can be the  ID of a step as an integer or job status
           as a string.

             dependent_on_type{String}:
           Indicates whether the current job (to which the dependency is being
           added) will be dependent on a step or status of the other job.

           When the dependent job is held at a step or status of the other job,
           the dependent job cannot progress until the other job reaches the
           step or status defined in the dependency. Once the other job reaches
           step or status as defined in the dependency criteria the dependency
           is released and the dependent job can progress.

             dependent_on_value{Variant}:
           The value of the step or status of the other job on which the current
           job will be dependent. This value can be the  ID of a step as an
           integer or job status as a string."""
        ...
    
    def logActivity(self, activity_type, message=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.logActivity(activity_type, {message})

           Logs an activity in the job history to describe an action on the job.

             activity_type(String):
           The
           ID or the name of an ActivityType .

             message{String}:
           The custom message to be appended to the existing message in the
           ActivityType ."""
        ...
    
    def sendNotification(self, notification_type): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.sendNotification(notification_type)

           Sends a notification based on an event in the job life cycle.

             notification_type(String):
           The name of the notification type template to be used to send the
           email notification associated with the job."""
        ...
    
    def retrieveJobMap(self, destination_location): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.retrieveJobMap(destination_location)

           Retrieves the job map to a location on disk.

             destination_location(String):
           The folder location where the job map will be stored. A name for the
           map to be saved can also be provided. If no name is provided the job
           map is saved with the default naming scheme defined for the job map."""
        ...
    
    def storeJobMap(self, source_location): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.storeJobMap(source_location)

           Saves a map in the Workflow Manager database and associates it to the
           job as the job map to be used for editing.

             source_location(String):
           The file path that has the map to be stored in the Workflow Manager
           database."""
        ...
    
    def deleteJobMap(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Job.deleteJobMap()

           Deletes the job map associated with the job."""
        ...
    


class LinkedProperty(ExtendedProperty):
    """ArcPy class that provides access to the group of linked property rows
       associated with the job. It is comprised of 0 or more ExtendedProperty
       objects."""
    def createRecord(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LinkedProperty.createRecord()

           Creates a new linked property record associated with the job, as an
           ExtendedProperty object."""
        ...
    
    def deleteRecord(self, record): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """LinkedProperty.deleteRecord(record)

           Deletes one linked property record associated with the job.

             record(ExtendedProperty):
           The linked property record as an ExtendedProperty object."""
        ...
    
    def __getitem__(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    def __len__(self, *args): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    def __iter__(self): # -> Generator[Unknown | conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown], Any, None]:
        ...
    


class Hold(_ObjectWithoutInitCall):
    """The Hold object provides access to the
       hold associated with the job."""
    ID = ...
    type = ...
    typeID = ...
    comment = ...
    active = ...
    holdDate = ...
    releasedBy = ...
    releaseDate = ...


class WorkflowStep(_ObjectWithoutInitCall):
    """The WorkflowStep object provides access to the attributes of a step
       contained within a
       job Workflow ."""
    ID = ...
    name = ...
    nextSteps = ...
    def __repr__(self): # -> LiteralString:
        ...
    


class WorkflowPath(_ObjectWithoutInitCall):
    """The WorkflowPath object provides access to the attributes of a  path
       contained within a
       job Workflow ."""
    fromStep = ...
    toStep = ...
    description = ...
    def __repr__(self): # -> LiteralString:
        ...
    


class WorkflowConnection(_ObjectWithoutInitCall):
    """The WorkflowConnection object provides access to methods for creating or
       getting a Workflow Manager job."""
    def getJob(self, jobID): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """WorkflowConnection.getJob(jobID)

           Return a single job using its job ID.

             jobID(Integer):
           The ID of the job to return."""
        ...
    
    def createJob(self, job_type_id=..., job_type_name=..., job_type_description=..., callback=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """WorkflowConnection.createJob({job_type_id}, {job_type_name},
           {job_type_description}, {callback})

           Creates a new job based on a job type.

             job_type_id{Integer}:
           The ID of the job type from which to create a new job.

             job_type_name{String}:
           The name of the job type from which to create a new job.

             job_type_description{JobTypeDescription}:
           The properties of the job type that can be customized and assigned to
           a new job being
           created, provided as the JobTypeDescription object.

             callback{Function}:
           The callback argument is used when the job is set to automatically
           execute after being created. It passes a function that prompts the
           user for a response based on input from the step type. When executing
           a question step, for example, the callback takes the possible step
           response options and allows the user to choose the next step. It is
           also used when the next step in the workflow cannot be determined so
           a user can select the path to follow."""
        ...
    
    def createSD(self, output_directory, service_name, connection_file_path=..., folder_name=..., description=..., mininstances=..., maxinstances=..., maxusagetime=..., maxwaittime=..., maxidletime=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """WorkflowConnection.createSD(output_directory, service_name,
           {connection_file_path}, {folder_name}, {description}, {mininstances},
           {maxinstances}, {maxusagetime}, {maxwaittime}, {maxidletime})

           Creates a Service Definition ( .sd ) file of the Workflow Manager
           service type that can be published to a specified GIS server.

             output_directory(String):
           The folder path for the  the output ( .sd ) file.

             service_name(String):
           The name of the service. The name can only contain alphanumeric
           characters and underscores. The name cannot be more than 120
           characters in length.

             connection_file_path{String}:
           The path and file name of the ArcGIS Server connection file ( .ags ).

             folder_name{String}:
           The folder name to which to publish the service definition. If the
           folder does not currently exist, it will be created. The default
           folder is the server root level.

             description{String}:
           The description summary.

             mininstances{Integer}:
           The minimum number of instances a service will start and make
           available for use.

             maxinstances{Integer}:
           The maximum number of instances a service can start and make
           available for use.

             maxusagetime{Integer}:
           The maximum time, in seconds, that a service can be used. For
           expected  long running tasks increase the default time.

             maxwaittime{Integer}:
           The maximum time, in seconds, that a client will wait to connect with
           an instance before timing out. When all instances are busy processing
           requests, subsequent requests are queued. If this time-out elapses
           before an instance becomes available the task will fail.

             maxidletime{Integer}:
           The maximum time, in seconds, that an instance will continue to be
           active before pool shrinking occurs. Any instances above the minimum
           number of instances that have not been used will be shut down once
           the idle maximum time value has elapsed."""
        ...
    
    def queryJobs(self, fields, tables, aliases=..., where=..., order_by=...): # -> QueryResult:
        """WorkflowConnection.queryJobs(fields, tables, {aliases}, {where},
           {order_by})

           Queries jobs based on criteria and returns a QueryResult object then
           allows access to a list of jobs and job properties  that meet the
           criteria.

             fields(String):
           Fields from  the query table(s) to be returned
           for the jobs that meet the criteria.

             tables(String):
           Tables in the Workflow Manager database used to query jobs.

             aliases{String}:
           Alias names defined by the user for the returned fields. The alias
           names are listed in the same order as the corresponding fields.

             where{String}:
           A where clause used to query jobs.

             order_by{String}:
           The fields used to order the query results."""
        ...
    
    def getQualifiedTableName(self, table_name): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        ...
    
    config = ...
    jtcPath = ...


class Configuration(_ObjectWithoutInitCall):
    """The Configuration object provides access to
       the configuration elements in the Workflow Manager database."""
    def getUsers(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Configuration.getUsers()

           Returns a list of user names of all the users in the Workflow Manager
           database."""
        ...
    
    def getUserGroups(self, username=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Configuration.getUserGroups({username})

           Returns a list of the name of user groups a user belongs to in the
           Workflow Manager database.
            If no argument is given, the user groups the current user belongs to
            are returned.

             username{String}:
           The username of the user whose user groups will be returned."""
        ...
    
    def getJobTypes(self): # -> list[JobType]:
        """Configuration.getJobTypes()

           Returns a list of all job types  in the Workflow Manager database
           filtered by applied job filters."""
        ...
    
    def getPrivileges(self, username=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Configuration.getPrivileges({username})

           Returns a list of privileges assigned to a user. If no argument is
           given, the privileges for the current user are returned.

             username{String}:
           The username of the user whose privileges will be returned."""
        ...
    
    def getPriorities(self): # -> list[Priority]:
        """Configuration.getPriorities()

           Returns a list of priorities in the Workflow Manager database."""
        ...
    
    def getStatusTypes(self): # -> list[StatusType]:
        """Configuration.getStatusTypes()

           Returns all status types in the Workflow Manager database as a list
           of StatusType objects."""
        ...
    
    def getMaps(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Configuration.getMaps()

           Returns a list of the names of maps in the Workflow Manager database."""
        ...
    
    def retrieveMap(self, map_name, destination_location): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Configuration.retrieveMap(map_name, destination_location)

           Retrieves
           a map from the Workflow Manager database to a specified folder.

             map_name(String):
           The name of the  map to be retrieved
           from the Workflow Manager database.

             destination_location(String):
           The folder location where the retrieved map will be saved and the
           name to be used."""
        ...
    
    def storeMap(self, map_name, source_location, storage_type=..., overwrite=...): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Configuration.storeMap(map_name, source_location, {storage_type},
           {overwrite})

           Stores a map in the Workflow Manager database. Only .mxd can be
           stored in the Workflow Manager database.

             map_name(String):
           The name used to store the map in the Workflow Manager database.

             source_location(String):
           The folder location where the map exists, with the name of the map.

             storage_type{String}:
           The storage type of the map. If no value is given, the map is stored
           in the Workflow Manager database by default.

            * EMBEDDED: The map is stored in the Workflow Manager database.

            * LINKED: The link to the map location is stored in the Workflow
            Manager database.

             overwrite{String}:
           Overwrite the map if it exists in the Workflow Manager database. If
           no value is provided, the existing map is not overwritten.

            * True: The map is stored in the Workflow Manager database.

            * False: The link to the map is stored in the Workflow Manager
            database."""
        ...
    
    def getJobTypeDescription(self, job_type_id=..., job_type_name=...): # -> JobTypeDescription | None:
        """Configuration.getJobTypeDescription({job_type_id}, {job_type_name})

           Returns the
           job type properties that can be customized before creating a job,
           using either the job type id or job type name.

             job_type_id{Integer}:
           The ID of the job type whose properties will be returned.

             job_type_name{String}:
           The name of the job type whose properties will be returned."""
        ...
    
    def getHoldTypes(self): # -> list[HoldType]:
        """Configuration.getHoldTypes()

           Returns all the hold types in the Workflow Manager database, as a
           list of HoldType objects."""
        ...
    
    def getActivityTypes(self): # -> list[ActivityType]:
        """Configuration.getActivityTypes()

           Returns all activity types in the Workflow Manager database as a list
           of ActivityType objects."""
        ...
    
    def getNotificationTypes(self): # -> conversion | int | float | complex | basestring | list[Unknown] | tuple[Unknown, ...] | dict[Unknown, Unknown]:
        """Configuration.getNotificationTypes()

           Returns a list of all the notification types in the Workflow Manager
           database."""
        ...
    


class WorkflowExecutionResult(_ObjectWithoutInitCall):
    """The WorkflowExecutionResult object provides the  result of executing a
       step in the workflow."""
    returnCode = ...


__all__ = ['Connect', 'WorkflowExecutionError', 'WorkflowExecutionStepError']
